import{a as S} from"./run-command-c18b36473918b9d8.js";import{f as v} from"./run-command-3641d3f5f84ce53c.js";import{j as x} from"./run-command-e3e49c92a10f73b5.js";var O=x(S(),1);var N=async(u)=>((l)=>{const i=(s)=>{const y=[];if(((n)=>{return typeof n==="object"&&n!==null&&(typeof n.by==="string"&&(2<=n.by.length&&n.by.length<=16))})(s)===!1){const n=O.default.misc.validatePrune.report(y);((R,t,T=!0)=>{const e=(g,a,r=!0)=>[typeof g.by==="string"&&(2<=g.by.length||n(r,{path:a+".by",expected:"string & MinLength<2>",value:g.by}))&&(g.by.length<=16||n(r,{path:a+".by",expected:"string & MaxLength<16>",value:g.by}))||n(r,{path:a+".by",expected:"(string & MinLength<2> & MaxLength<16>)",value:g.by})].every((o)=>o);return(typeof R==="object"&&R!==null||n(!0,{path:t+"",expected:"__type",value:R}))&&e(R,t+"",!0)||n(!0,{path:t+"",expected:"__type",value:R})})(s,"$input",!0)}const d=y.length===0;return{success:d,errors:y,data:d?s:void 0}},b=(s)=>{const y=(c)=>{for(let d of Object.keys(c)){if(d==="by")continue;delete c[d]}};if(typeof s==="object"&&s!==null)y(s)},E=i(l);if(E.success)b(l);return E})(u),A=async(u)=>{return v(((l)=>{const i=[];if(((s)=>{const y=(t)=>typeof t.executeId==="string"&&t.success===!1&&(typeof t.fail==="object"&&t.fail!==null&&c(t.fail)),c=(t)=>(t.code==="NETWORK_ERROR"||t.code==="INTERNAL_SERVER_ERROR"||t.code==="NOT_FOUND"||t.code==="NOT_ALLOW_METHOD"||t.code==="TYPE_SAFE_ERROR"||t.code==="BUSINESS_FAIL")&&typeof t.message==="string"&&(t.data===void 0||typeof t.data==="object"&&t.data!==null&&d(t.data)),d=(t)=>typeof t.path==="string"&&typeof t.expected==="string"&&typeof t.value==="string",n=(t)=>typeof t.executeId==="string"&&t.success===!0&&(typeof t.data==="object"&&t.data!==null&&typeof t.data.youSay==="string");return typeof s==="object"&&s!==null&&((t)=>(()=>{if(t.success===!1)return y(t);else if(t.success===!0)return n(t);else return!1})())(s)})(l)===!1){const s=O.default.validate.report(i);((y,c,d=!0)=>{const n=(a,r,o=!0)=>[typeof a.executeId==="string"||s(o,{path:r+".executeId",expected:"string",value:a.executeId}),a.success===!1||s(o,{path:r+".success",expected:"false",value:a.success}),(typeof a.fail==="object"&&a.fail!==null||s(o,{path:r+".fail",expected:"RecursiveObjectXToString<Fail<\"NETWORK_ERROR\" | \"INTERNAL_SERVER_ERROR\" | \"NOT_FOUND\" | \"NOT_ALLOW_METHOD\" | \"TYPE_SAFE_ERROR\" | \"BUSINESS_FAIL\">, bigint | RegExp | Date | URL | Uint8Array | ArrayBuffer>",value:a.fail}))&&R(a.fail,r+".fail",o)||s(o,{path:r+".fail",expected:"RecursiveObjectXToString<Fail<\"NETWORK_ERROR\" | \"INTERNAL_SERVER_ERROR\" | \"NOT_FOUND\" | \"NOT_ALLOW_METHOD\" | \"TYPE_SAFE_ERROR\" | \"BUSINESS_FAIL\">, bigint | RegExp | Date | URL | Uint8Array | ArrayBuffer>",value:a.fail})].every((f)=>f),R=(a,r,o=!0)=>[a.code==="NETWORK_ERROR"||a.code==="INTERNAL_SERVER_ERROR"||a.code==="NOT_FOUND"||a.code==="NOT_ALLOW_METHOD"||a.code==="TYPE_SAFE_ERROR"||a.code==="BUSINESS_FAIL"||s(o,{path:r+".code",expected:"(\"BUSINESS_FAIL\" | \"INTERNAL_SERVER_ERROR\" | \"NETWORK_ERROR\" | \"NOT_ALLOW_METHOD\" | \"NOT_FOUND\" | \"TYPE_SAFE_ERROR\")",value:a.code}),typeof a.message==="string"||s(o,{path:r+".message",expected:"string",value:a.message}),a.data===void 0||(typeof a.data==="object"&&a.data!==null||s(o,{path:r+".data",expected:"(__type | undefined)",value:a.data}))&&t(a.data,r+".data",o)||s(o,{path:r+".data",expected:"(__type | undefined)",value:a.data})].every((f)=>f),t=(a,r,o=!0)=>[typeof a.path==="string"||s(o,{path:r+".path",expected:"string",value:a.path}),typeof a.expected==="string"||s(o,{path:r+".expected",expected:"string",value:a.expected}),typeof a.value==="string"||s(o,{path:r+".value",expected:"string",value:a.value})].every((f)=>f),T=(a,r,o=!0)=>[typeof a.executeId==="string"||s(o,{path:r+".executeId",expected:"string",value:a.executeId}),a.success===!0||s(o,{path:r+".success",expected:"true",value:a.success}),(typeof a.data==="object"&&a.data!==null||s(o,{path:r+".data",expected:"RecursiveObjectXToString<__object, bigint | RegExp | Date | URL | Uint8Array | ArrayBuffer>",value:a.data}))&&e(a.data,r+".data",o)||s(o,{path:r+".data",expected:"RecursiveObjectXToString<__object, bigint | RegExp | Date | URL | Uint8Array | ArrayBuffer>",value:a.data})].every((f)=>f),e=(a,r,o=!0)=>[typeof a.youSay==="string"||s(o,{path:r+".youSay",expected:"string",value:a.youSay})].every((f)=>f),g=(a,r,o=!0)=>(()=>{if(a.success===!1)return n(a,r,o);else if(a.success===!0)return T(a,r,o);else return s(o,{path:r,expected:"(RecursiveObjectXToString<ExecuteResultFail, bigint | RegExp | Date | URL | Uint8Array | ArrayBuffer> | RecursiveObjectXToString<ExecuteResultSuccess<__object>, bigint | RegExp | Date | URL | Uint8Array | ArrayBuffer>)",value:a})})();return(typeof y==="object"&&y!==null||s(!0,{path:c+"",expected:"(RecursiveObjectXToString<ExecuteResultFail, bigint | RegExp | Date | URL | Uint8Array | ArrayBuffer> | RecursiveObjectXToString<ExecuteResultSuccess<__object>, bigint | RegExp | Date | URL | Uint8Array | ArrayBuffer>)",value:y}))&&g(y,c+"",!0)||s(!0,{path:c+"",expected:"(RecursiveObjectXToString<ExecuteResultFail, bigint | RegExp | Date | URL | Uint8Array | ArrayBuffer> | RecursiveObjectXToString<ExecuteResultSuccess<__object>, bigint | RegExp | Date | URL | Uint8Array | ArrayBuffer>)",value:y})})(l,"$input",!0)}const E=i.length===0;return{success:E,errors:i,data:E?l:void 0}})(u)),((l)=>{const i=(e)=>typeof e.executeId==="string"&&e.success===!1&&(typeof e.fail==="object"&&e.fail!==null&&b(e.fail)),b=(e)=>(e.code==="NETWORK_ERROR"||e.code==="INTERNAL_SERVER_ERROR"||e.code==="NOT_FOUND"||e.code==="NOT_ALLOW_METHOD"||e.code==="TYPE_SAFE_ERROR"||e.code==="BUSINESS_FAIL")&&typeof e.message==="string"&&(e.data===void 0||typeof e.data==="object"&&e.data!==null&&E(e.data)),E=(e)=>typeof e.path==="string"&&typeof e.expected==="string"&&typeof e.value==="string",s=(e)=>typeof e.executeId==="string"&&e.success===!0&&(typeof e.data==="object"&&e.data!==null&&y(e.data)),y=(e)=>typeof e.youSay==="string",c=O.default.json.stringify.string,d=O.default.json.stringify.throws,n=(e)=>`{"executeId":${c(e.executeId)},"success":${e.success},"fail":${R(e.fail)}}`,R=(e)=>`{${e.data===void 0?"":`"data":${e.data!==void 0?`{"path":${c(e.data.path)},"expected":${c(e.data.expected)},"value":${c(e.data.value)}}`:void 0},`}"code":${(()=>{if(typeof e.code==="string")return c(e.code);if(typeof e.code==="string")return"\""+e.code+"\"";d({expected:"(\"BUSINESS_FAIL\" | \"INTERNAL_SERVER_ERROR\" | \"NETWORK_ERROR\" | \"NOT_ALLOW_METHOD\" | \"NOT_FOUND\" | \"TYPE_SAFE_ERROR\")",value:e.code})})()},"message":${c(e.message)}}`,t=(e)=>`{"executeId":${c(e.executeId)},"success":${e.success},"data":${`{"youSay":${c(e.data.youSay)}}`}}`;return((e)=>(()=>{if(e.success===!1)return n(e);else if(e.success===!0)return t(e);else d({expected:"(RecursiveObjectXToString<ExecuteResultFail, bigint | RegExp | Date | URL | Uint8Array | ArrayBuffer> | RecursiveObjectXToString<ExecuteResultSuccess<__object>, bigint | RegExp | Date | URL | Uint8Array | ArrayBuffer>)",value:e})})())(l)})(u)},$=async()=>((u)=>{const l=O.default.random.generator;return((b=!1,E=0)=>({by:(u?.customs??l.customs)?.string?.([{name:"MinLength<2>",kind:"minLength",value:2},{name:"MaxLength<16>",kind:"maxLength",value:16}])??(u?.string??l.string)((u?.integer??l.integer)(2,16))}))()})();export{A as validateResults,N as validateParams,$ as randParams};

//# debugId=42FA730A93C9391464756e2164756e21
//# sourceMappingURL=data:application/json;base64,
