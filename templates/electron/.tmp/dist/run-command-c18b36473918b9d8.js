import{k as J} from"./run-command-e3e49c92a10f73b5.js";var LO=J((DJ,nO)=>{nO.exports={ROOT:0,GROUP:1,POSITION:2,SET:3,RANGE:4,REPETITION:5,REFERENCE:6,CHAR:7}});var hO=J((N4)=>{var F=LO(),bO=()=>[{type:F.RANGE,from:48,to:57}],iO=()=>{return[{type:F.CHAR,value:95},{type:F.RANGE,from:97,to:122},{type:F.RANGE,from:65,to:90}].concat(bO())},pO=()=>{return[{type:F.CHAR,value:9},{type:F.CHAR,value:10},{type:F.CHAR,value:11},{type:F.CHAR,value:12},{type:F.CHAR,value:13},{type:F.CHAR,value:32},{type:F.CHAR,value:160},{type:F.CHAR,value:5760},{type:F.RANGE,from:8192,to:8202},{type:F.CHAR,value:8232},{type:F.CHAR,value:8233},{type:F.CHAR,value:8239},{type:F.CHAR,value:8287},{type:F.CHAR,value:12288},{type:F.CHAR,value:65279}]},f4=()=>{return[{type:F.CHAR,value:10},{type:F.CHAR,value:13},{type:F.CHAR,value:8232},{type:F.CHAR,value:8233}]};N4.words=()=>({type:F.SET,set:iO(),not:!1});N4.notWords=()=>({type:F.SET,set:iO(),not:!0});N4.ints=()=>({type:F.SET,set:bO(),not:!1});N4.notInts=()=>({type:F.SET,set:bO(),not:!0});N4.whitespace=()=>({type:F.SET,set:pO(),not:!1});N4.notWhitespace=()=>({type:F.SET,set:pO(),not:!0});N4.anyChar=()=>({type:F.SET,set:f4(),not:!0})});var aO=J((d4)=>{var oO=LO(),BO=hO(),c4={"0":0,t:9,n:10,v:11,f:12,r:13};d4.strToChars=function(O){var H=/(\[\\b\])|(\\)?\\(?:u([A-F0-9]{4})|x([A-F0-9]{2})|(0?[0-7]{2})|c([@A-Z[\\\]^?])|([0tnvfr]))/g;return O=O.replace(H,function(K,Z,Y,A,Q,G,h,N){if(Y)return K;var KO=Z?8:A?parseInt(A,16):Q?parseInt(Q,16):G?parseInt(G,8):h?"@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^ ?".indexOf(h):c4[N],t=String.fromCharCode(KO);if(/[[\]{}^$.|?*+()]/.test(t))t="\\"+t;return t}),O};d4.tokenizeClass=(O,H)=>{var K=[],Z=/\\(?:(w)|(d)|(s)|(W)|(D)|(S))|((?:(?:\\)(.)|([^\]\\]))-(?:\\)?([^\]]))|(\])|(?:\\)?([^])/g,Y,A;while((Y=Z.exec(O))!=null)if(Y[1])K.push(BO.words());else if(Y[2])K.push(BO.ints());else if(Y[3])K.push(BO.whitespace());else if(Y[4])K.push(BO.notWords());else if(Y[5])K.push(BO.notInts());else if(Y[6])K.push(BO.notWhitespace());else if(Y[7])K.push({type:oO.RANGE,from:(Y[8]||Y[9]).charCodeAt(0),to:Y[10].charCodeAt(0)});else if(A=Y[12])K.push({type:oO.CHAR,value:A.charCodeAt(0)});else return[K,Z.lastIndex];d4.error(H,"Unterminated character class")};d4.error=(O,H)=>{throw new SyntaxError("Invalid regular expression: /"+O+"/: "+H)}});var sO=J((u4)=>{var $O=LO();u4.wordBoundary=()=>({type:$O.POSITION,value:"b"});u4.nonWordBoundary=()=>({type:$O.POSITION,value:"B"});u4.begin=()=>({type:$O.POSITION,value:"^"});u4.end=()=>({type:$O.POSITION,value:"$"})});var tO=J((yJ,PO)=>{var zO=aO(),v=LO(),QO=hO(),SO=sO();PO.exports=(O)=>{var H=0,K,Z,Y={type:v.ROOT,stack:[]},A=Y,Q=Y.stack,G=[],h=(R4)=>{zO.error(O,`Nothing to repeat at column ${R4-1}`)},N=zO.strToChars(O);K=N.length;while(H<K)switch(Z=N[H++],Z){case"\\":switch(Z=N[H++],Z){case"b":Q.push(SO.wordBoundary());break;case"B":Q.push(SO.nonWordBoundary());break;case"w":Q.push(QO.words());break;case"W":Q.push(QO.notWords());break;case"d":Q.push(QO.ints());break;case"D":Q.push(QO.notInts());break;case"s":Q.push(QO.whitespace());break;case"S":Q.push(QO.notWhitespace());break;default:if(/\d/.test(Z))Q.push({type:v.REFERENCE,value:parseInt(Z,10)});else Q.push({type:v.CHAR,value:Z.charCodeAt(0)})}break;case"^":Q.push(SO.begin());break;case"$":Q.push(SO.end());break;case"[":var KO;if(N[H]==="^")KO=!0,H++;else KO=!1;var t=zO.tokenizeClass(N.slice(H),O);H+=t[1],Q.push({type:v.SET,set:t[0],not:KO});break;case".":Q.push(QO.anyChar());break;case"(":var ZO={type:v.GROUP,stack:[],remember:!0};if(Z=N[H],Z==="?"){if(Z=N[H+1],H+=2,Z==="=")ZO.followedBy=!0;else if(Z==="!")ZO.notFollowedBy=!0;else if(Z!==":")zO.error(O,`Invalid group, character '${Z}'`+` after '?' at column ${H-1}`);ZO.remember=!1}Q.push(ZO),G.push(A),A=ZO,Q=ZO.stack;break;case")":if(G.length===0)zO.error(O,`Unmatched ) at column ${H-1}`);A=G.pop(),Q=A.options?A.options[A.options.length-1]:A.stack;break;case"|":if(!A.options)A.options=[A.stack],delete A.stack;var UO=[];A.options.push(UO),Q=UO;break;case"{":var k=/^(\d+)(,(\d+)?)?\}/.exec(N.slice(H)),jO,uO;if(k!==null){if(Q.length===0)h(H);jO=parseInt(k[1],10),uO=k[2]?k[3]?parseInt(k[3],10):Infinity:jO,H+=k[0].length,Q.push({type:v.REPETITION,min:jO,max:uO,value:Q.pop()})}else Q.push({type:v.CHAR,value:123});break;case"?":if(Q.length===0)h(H);Q.push({type:v.REPETITION,min:0,max:1,value:Q.pop()});break;case"+":if(Q.length===0)h(H);Q.push({type:v.REPETITION,min:1,max:Infinity,value:Q.pop()});break;case"*":if(Q.length===0)h(H);Q.push({type:v.REPETITION,min:0,max:Infinity,value:Q.pop()});break;default:Q.push({type:v.CHAR,value:Z.charCodeAt(0)})}if(G.length!==0)zO.error(O,"Unterminated group");return Y};PO.exports.types=v});var eO=J((MJ,rO)=>{class c{constructor(O,H){this.low=O,this.high=H,this.length=1+H-O}overlaps(O){return!(this.high<O.low||this.low>O.high)}touches(O){return!(this.high+1<O.low||this.low-1>O.high)}add(O){return new c(Math.min(this.low,O.low),Math.max(this.high,O.high))}subtract(O){if(O.low<=this.low&&O.high>=this.high)return[];else if(O.low>this.low&&O.high<this.high)return[new c(this.low,O.low-1),new c(O.high+1,this.high)];else if(O.low<=this.low)return[new c(O.high+1,this.high)];else return[new c(this.low,O.low-1)]}toString(){return this.low==this.high?this.low.toString():this.low+"-"+this.high}}class IO{constructor(O,H){if(this.ranges=[],this.length=0,O!=null)this.add(O,H)}_update_length(){this.length=this.ranges.reduce((O,H)=>{return O+H.length},0)}add(O,H){var K=(Z)=>{var Y=0;while(Y<this.ranges.length&&!Z.touches(this.ranges[Y]))Y++;var A=this.ranges.slice(0,Y);while(Y<this.ranges.length&&Z.touches(this.ranges[Y]))Z=Z.add(this.ranges[Y]),Y++;A.push(Z),this.ranges=A.concat(this.ranges.slice(Y)),this._update_length()};if(O instanceof IO)O.ranges.forEach(K);else{if(H==null)H=O;K(new c(O,H))}return this}subtract(O,H){var K=(Z)=>{var Y=0;while(Y<this.ranges.length&&!Z.overlaps(this.ranges[Y]))Y++;var A=this.ranges.slice(0,Y);while(Y<this.ranges.length&&Z.overlaps(this.ranges[Y]))A=A.concat(this.ranges[Y].subtract(Z)),Y++;this.ranges=A.concat(this.ranges.slice(Y)),this._update_length()};if(O instanceof IO)O.ranges.forEach(K);else{if(H==null)H=O;K(new c(O,H))}return this}intersect(O,H){var K=[],Z=(Y)=>{var A=0;while(A<this.ranges.length&&!Y.overlaps(this.ranges[A]))A++;while(A<this.ranges.length&&Y.overlaps(this.ranges[A])){var Q=Math.max(this.ranges[A].low,Y.low),G=Math.min(this.ranges[A].high,Y.high);K.push(new c(Q,G)),A++}};if(O instanceof IO)O.ranges.forEach(Z);else{if(H==null)H=O;Z(new c(O,H))}return this.ranges=K,this._update_length(),this}index(O){var H=0;while(H<this.ranges.length&&this.ranges[H].length<=O)O-=this.ranges[H].length,H++;return this.ranges[H].low+O}toString(){return"[ "+this.ranges.join(", ")+" ]"}clone(){return new IO(this)}numbers(){return this.ranges.reduce((O,H)=>{var K=H.low;while(K<=H.high)O.push(K),K++;return O},[])}subranges(){return this.ranges.map((O)=>({low:O.low,high:O.high,length:1+O.high-O.low}))}}rO.exports=IO});var H0=J(($J,O0)=>{var RO=tO(),yO=eO(),WO=RO.types;O0.exports=class O{constructor(H,K){if(this._setDefaults(H),H instanceof RegExp)this.ignoreCase=H.ignoreCase,this.multiline=H.multiline,H=H.source;else if(typeof H==="string")this.ignoreCase=K&&K.indexOf("i")!==-1,this.multiline=K&&K.indexOf("m")!==-1;else throw new Error("Expected a regexp or string");this.tokens=RO(H)}_setDefaults(H){if(this.max=H.max!=null?H.max:O.prototype.max!=null?O.prototype.max:100,this.defaultRange=H.defaultRange?H.defaultRange:this.defaultRange.clone(),H.randInt)this.randInt=H.randInt}gen(){return this._gen(this.tokens,[])}_gen(H,K){var Z,Y,A,Q,G;switch(H.type){case WO.ROOT:case WO.GROUP:if(H.followedBy||H.notFollowedBy)return"";if(H.remember&&H.groupNumber===void 0)H.groupNumber=K.push(null)-1;Z=H.options?this._randSelect(H.options):H.stack,Y="";for(Q=0,G=Z.length;Q<G;Q++)Y+=this._gen(Z[Q],K);if(H.remember)K[H.groupNumber]=Y;return Y;case WO.POSITION:return"";case WO.SET:var h=this._expand(H);if(!h.length)return"";return String.fromCharCode(this._randSelect(h));case WO.REPETITION:A=this.randInt(H.min,H.max===Infinity?H.min+this.max:H.max),Y="";for(Q=0;Q<A;Q++)Y+=this._gen(H.value,K);return Y;case WO.REFERENCE:return K[H.value-1]||"";case WO.CHAR:var N=this.ignoreCase&&this._randBool()?this._toOtherCase(H.value):H.value;return String.fromCharCode(N)}}_toOtherCase(H){return H+(97<=H&&H<=122?-32:65<=H&&H<=90?32:0)}_randBool(){return!this.randInt(0,1)}_randSelect(H){if(H instanceof yO)return H.index(this.randInt(0,H.length-1));return H[this.randInt(0,H.length-1)]}_expand(H){if(H.type===RO.types.CHAR)return new yO(H.value);else if(H.type===RO.types.RANGE)return new yO(H.from,H.to);else{let K=new yO;for(let Z=0;Z<H.set.length;Z++){let Y=this._expand(H.set[Z]);if(K.add(Y),this.ignoreCase)for(let A=0;A<Y.length;A++){let Q=Y.index(A),G=this._toOtherCase(Q);if(Q!==G)K.add(G)}}if(H.not)return this.defaultRange.clone().subtract(K);else return this.defaultRange.clone().intersect(K)}}randInt(H,K){return H+Math.floor(Math.random()*(1+K-H))}get defaultRange(){return this._range=this._range||new yO(32,126)}set defaultRange(H){this._range=H}static randexp(H,K){var Z;if(typeof H==="string")H=new RegExp(H,K);if(H._randexp===void 0)Z=new O(H,K),H._randexp=Z;else Z=H._randexp,Z._setDefaults(H);return Z.gen()}static sugar(){RegExp.prototype.gen=function(){return O.randexp(this)}}}});var X0=J((X)=>{var K0=X&&X.__read||function(O,H){var K=typeof Symbol==="function"&&O[Symbol.iterator];if(!K)return O;var Z=K.call(O),Y,A=[],Q;try{while((H===void 0||H-- >0)&&!(Y=Z.next()).done)A.push(Y.value)}catch(G){Q={error:G}}finally{try{if(Y&&!Y.done&&(K=Z.return))K.call(Z)}finally{if(Q)throw Q.error}}return A},a4=X&&X.__importDefault||function(O){return O&&O.__esModule?O:{default:O}};Object.defineProperty(X,"__esModule",{value:!0});X.relativeJsonPointer=X.jsonPointer=X.duration=X.time=X.date=X.datetime=X.url=X.uriTemplate=X.uriReference=X.uri=X.ipv6=X.ipv4=X.iriReference=X.iri=X.idnHostname=X.idnEmail=X.hostname=X.email=X.uuid=X.regex=X.password=X.byte=X.pattern=X.length=X.pick=X.array=X.string=X.number=X.bigint=X.integer=X.boolean=void 0;var s4=a4(H0()),Z0="abcdefghijklmnopqrstuvwxyz",t4=function(){return Math.random()<0.5};X.boolean=t4;var r4=function(O,H){return O!==null&&O!==void 0||(O=0),H!==null&&H!==void 0||(H=100),Math.floor(Math.random()*(H-O+1))+O};X.integer=r4;var e4=function(O,H){return BigInt(X.integer(Number(O!==null&&O!==void 0?O:BigInt(0)),Number(H!==null&&H!==void 0?H:BigInt(100))))};X.bigint=e4;var OH=function(O,H){return O!==null&&O!==void 0||(O=0),H!==null&&H!==void 0||(H=100),Math.random()*(H-O)+O};X.number=OH;var HH=function(O){return new Array(O!==null&&O!==void 0?O:X.integer(5,10)).fill(0).map(function(){return Z0[X.integer(0,Z0.length-1)]}).join("")};X.string=HH;var KH=function(O,H){return new Array(H!==null&&H!==void 0?H:X.length()).fill(0).map(function(K,Z){return O(Z)})};X.array=KH;var ZH=function(O){return O[X.integer(0,O.length-1)]};X.pick=ZH;var YH=function(){return X.integer(0,3)};X.length=YH;var XH=function(O){var H=new s4.default(O);for(var K=0;K<10;++K){var Z=H.gen();if(O.test(Z))return Z}return H.gen()};X.pattern=XH;var JH=function(){return"vt7ekz4lIoNTTS9sDQYdWKharxIFAR54+z/umIxSgUM="};X.byte=JH;var AH=function(){return X.string(X.integer(4,16))};X.password=AH;var QH=function(){return"/^(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)$/"};X.regex=QH;var WH=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(O){var H=Math.random()*16|0,K=O==="x"?H:H&3|8;return K.toString(16)})};X.uuid=WH;var TH=function(){return"".concat(X.string(10),"@").concat(X.string(10),".").concat(X.string(3))};X.email=TH;var BH=function(){return"".concat(X.string(10),".").concat(X.string(3))};X.hostname=BH;var zH=function(){return X.email()};X.idnEmail=zH;var IH=function(){return X.hostname()};X.idnHostname=IH;var CH=function(){return X.url()};X.iri=CH;var VH=function(){return X.url()};X.iriReference=VH;var wH=function(){return X.array(function(){return X.integer(0,255)},4).join(".")};X.ipv4=wH;var qH=function(){return X.array(function(){return X.integer(0,65535).toString(16)},8).join(":")};X.ipv6=qH;var GH=function(){return X.url()};X.uri=GH;var FH=function(){return X.url()};X.uriReference=FH;var EH=function(){return X.url()};X.uriTemplate=EH;var DH=function(){return"https://".concat(X.string(10),".").concat(X.string(3))};X.url=DH;var UH=function(O,H){return new Date(X.number(O!==null&&O!==void 0?O:Date.now()-30*vO,H!==null&&H!==void 0?H:Date.now()+7*vO)).toISOString()};X.datetime=UH;var jH=function(O,H){return new Date(X.number(O!==null&&O!==void 0?O:0,H!==null&&H!==void 0?H:Date.now()*2)).toISOString().substring(0,10)};X.date=jH;var LH=function(){return new Date(X.number(0,vO)).toISOString().substring(11)};X.time=LH;var yH=function(){var O=Y0([["Y",X.integer(0,100)],["M",X.integer(0,12)],["D",X.integer(0,31)]]),H=Y0([["H",X.integer(0,24)],["M",X.integer(0,60)],["S",X.integer(0,60)]]);if(O.length+H.length===0)return"PT0S";return"P".concat(O).concat(H.length?"T":"").concat(H)};X.duration=yH;var MH=function(){return"/components/schemas/".concat(X.string(10))};X.jsonPointer=MH;var $H=function(){return"".concat(X.integer(0,10),"#")};X.relativeJsonPointer=$H;var vO=86400000,Y0=function(O){return O.filter(function(H){var K=K0(H,2),Z=K[0],Y=K[1];return Y!==0}).map(function(H){var K=K0(H,2),Z=K[0],Y=K[1];return"".concat(Y).concat(Z)}).join("")}});var J0=J((d)=>{var SH=d&&d.__createBinding||(Object.create?function(O,H,K,Z){if(Z===void 0)Z=K;var Y=Object.getOwnPropertyDescriptor(H,K);if(!Y||("get"in Y?!H.__esModule:Y.writable||Y.configurable))Y={enumerable:!0,get:function(){return H[K]}};Object.defineProperty(O,Z,Y)}:function(O,H,K,Z){if(Z===void 0)Z=K;O[Z]=H[K]}),RH=d&&d.__setModuleDefault||(Object.create?function(O,H){Object.defineProperty(O,"default",{enumerable:!0,value:H})}:function(O,H){O.default=H}),fH=d&&d.__importStar||function(O){if(O&&O.__esModule)return O;var H={};if(O!=null){for(var K in O)if(K!=="default"&&Object.prototype.hasOwnProperty.call(O,K))SH(H,O,K)}return RH(H,O),H};Object.defineProperty(d,"__esModule",{value:!0});d.RandomGenerator=void 0;d.RandomGenerator=fH(X0())});var W0=J((A0)=>{Object.defineProperty(A0,"__esModule",{value:!0});A0.$every=void 0;var NH=function(O,H){var K=null;for(var Z=0;Z<O.length;++Z)if((K=H(O[Z],Z))!==null)return K;return null};A0.$every=NH});var TO=J((CO)=>{var bH=CO&&CO.__extends||function(){var O=function(H,K){return O=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(Z,Y){Z.__proto__=Y}||function(Z,Y){for(var A in Y)if(Object.prototype.hasOwnProperty.call(Y,A))Z[A]=Y[A]},O(H,K)};return function(H,K){if(typeof K!=="function"&&K!==null)throw new TypeError("Class extends value "+String(K)+" is not a constructor or null");O(H,K);function Z(){this.constructor=H}H.prototype=K===null?Object.create(K):(Z.prototype=K.prototype,new Z)}}();Object.defineProperty(CO,"__esModule",{value:!0});CO.TypeGuardError=void 0;var hH=function(O){bH(H,O);function H(K){var Z=this.constructor,Y=O.call(this,K.message||"Error on ".concat(K.method,"(): invalid type").concat(K.path?" on ".concat(K.path):"",", expect to be ").concat(K.expected))||this,A=Z.prototype;if(Object.setPrototypeOf)Object.setPrototypeOf(Y,A);else Y.__proto__=A;return Y.method=K.method,Y.path=K.path,Y.expected=K.expected,Y.value=K.value,Y}return H}(Error);CO.TypeGuardError=hH});var z0=J((T0)=>{Object.defineProperty(T0,"__esModule",{value:!0});T0.$guard=void 0;var PH=TO(),vH=function(O){return function(H,K,Z){if(H===!0)throw(Z!==null&&Z!==void 0?Z:function(Y){return new PH.TypeGuardError(Y)})({method:O,path:K.path,expected:K.expected,value:K.value});return!1}};T0.$guard=vH});var V0=J((I0)=>{Object.defineProperty(I0,"__esModule",{value:!0});I0.$join=void 0;var _H=function(O){return gH(O)?".".concat(O):"[".concat(JSON.stringify(O),"]")};I0.$join=_H;var gH=function(O){return kH(O)===!1&&/^[a-zA-Z_$][a-zA-Z_$0-9]*$/g.test(O)},kH=function(O){return cH.has(O)},cH=new Set(["break","case","catch","class","const","continue","debugger","default","delete","do","else","enum","export","extends","false","finally","for","function","if","import","in","instanceof","new","null","return","super","switch","this","throw","true","try","typeof","var","void","while","with"])});var G0=J((w0)=>{Object.defineProperty(w0,"__esModule",{value:!0});w0.$report=void 0;var dH=function(O){var H=function(K){if(O.length===0)return!0;var Z=O[O.length-1].path;return K.length>Z.length||Z.substring(0,K.length)!==K};return function(K,Z){if(K&&H(Z.path))O.push(Z);return!1}};w0.$report=dH});var D0=J((F0)=>{Object.defineProperty(F0,"__esModule",{value:!0});F0.$is_between=void 0;var lH=function(O,H,K){return H<=O&&O<=K};F0.$is_between=lH});var L0=J((U0)=>{Object.defineProperty(U0,"__esModule",{value:!0});U0.$is_bigint_string=void 0;var xH=function(O){try{return BigInt(O),!0}catch(H){return!1}};U0.$is_bigint_string=xH});var VO=J((y0)=>{Object.defineProperty(y0,"__esModule",{value:!0});y0.is=void 0;var mH=D0(),uH=L0(),nH=function(){return{is_between:mH.$is_between,is_bigint_string:uH.$is_bigint_string}};y0.is=nH});var R0=J(($0)=>{Object.defineProperty($0,"__esModule",{value:!0});$0.functionalAssert=void 0;var iH=TO(),pH=function(){return{errorFactory:function(O){return new iH.TypeGuardError(O)}}};$0.functionalAssert=pH});var b0=J((f0)=>{Object.defineProperty(f0,"__esModule",{value:!0});f0.$number=void 0;var oH=TO(),aH=function(O){if(isFinite(O)===!1)throw new oH.TypeGuardError({method:"typia.json.stringify",expected:"number",value:O,message:"Error on typia.json.stringify(): infinite or not a number."});return O};f0.$number=aH});var v0=J((h0)=>{Object.defineProperty(h0,"__esModule",{value:!0});h0.$rest=void 0;var sH=function(O){return O.length===2?"":","+O.substring(1,O.length-1)};h0.$rest=sH});var k0=J((_0)=>{Object.defineProperty(_0,"__esModule",{value:!0});_0.$string=void 0;var tH=function(O){var H=O.length,K="",Z=-1,Y=255;for(var A=0;A<H;A++){if(Y=O.charCodeAt(A),Y<32)return JSON.stringify(O);if(Y>=55296&&Y<=57343)return JSON.stringify(O);if(Y===34||Y===92)Z===-1&&(Z=0),K+=O.slice(Z,A)+"\\",Z=A}return Z===-1&&'"'+O+'"'||'"'+K+O.slice(Z)+'"'};_0.$string=tH});var l0=J((c0)=>{Object.defineProperty(c0,"__esModule",{value:!0});c0.$tail=void 0;var rH=function(O){return O[O.length-1]===","?O.substring(0,O.length-1):O};c0.$tail=rH});var MO=J((wO)=>{var fO=wO&&wO.__assign||function(){return fO=Object.assign||function(O){for(var H,K=1,Z=arguments.length;K<Z;K++){H=arguments[K];for(var Y in H)if(Object.prototype.hasOwnProperty.call(H,Y))O[Y]=H[Y]}return O},fO.apply(this,arguments)};Object.defineProperty(wO,"__esModule",{value:!0});wO.$throws=void 0;var eH=TO(),OK=function(O){return function(H){throw new eH.TypeGuardError(fO(fO({},H),{method:"typia.".concat(O)}))}};wO.$throws=OK});var x0=J((qO)=>{var NO=qO&&qO.__assign||function(){return NO=Object.assign||function(O){for(var H,K=1,Z=arguments.length;K<Z;K++){H=arguments[K];for(var Y in H)if(Object.prototype.hasOwnProperty.call(H,Y))O[Y]=H[Y]}return O},NO.apply(this,arguments)};Object.defineProperty(qO,"__esModule",{value:!0});qO.stringify=void 0;var HK=b0(),KK=v0(),ZK=k0(),YK=l0(),XK=MO(),JK=VO(),AK=function(O){return NO(NO({},JK.is()),{number:HK.$number,string:ZK.$string,tail:YK.$tail,rest:KK.$rest,throws:XK.$throws("json.".concat(O))})};qO.stringify=AK});var n0=J((m0)=>{Object.defineProperty(m0,"__esModule",{value:!0});m0.file=m0.blob=m0.array=m0.string=m0.bigint=m0.number=m0.boolean=void 0;var QK=function(O){return O instanceof File?O:O===null?void 0:O==="null"?null:O.length===0?!0:O==="true"||O==="1"?!0:O==="false"||O==="0"?!1:O};m0.boolean=QK;var WK=function(O){return O instanceof File?O:(O===null||O===void 0?void 0:O.length)?O==="null"?null:VK(O):void 0};m0.number=WK;var TK=function(O){return O instanceof File?O:(O===null||O===void 0?void 0:O.length)?O==="null"?null:wK(O):void 0};m0.bigint=TK;var BK=function(O){return O instanceof File?O:O===null?void 0:O==="null"?null:O};m0.string=BK;var zK=function(O,H){return O.length?O:H};m0.array=zK;var IK=function(O){return O instanceof Blob?O:O===null?void 0:O==="null"?null:O};m0.blob=IK;var CK=function(O){return O instanceof File?O:O===null?void 0:O==="null"?null:O};m0.file=CK;var VK=function(O){var H=Number(O);return isNaN(H)?O:H},wK=function(O){try{return BigInt(O)}catch(H){return O}}});var i0=J((l)=>{var jK=l&&l.__createBinding||(Object.create?function(O,H,K,Z){if(Z===void 0)Z=K;var Y=Object.getOwnPropertyDescriptor(H,K);if(!Y||("get"in Y?!H.__esModule:Y.writable||Y.configurable))Y={enumerable:!0,get:function(){return H[K]}};Object.defineProperty(O,Z,Y)}:function(O,H,K,Z){if(Z===void 0)Z=K;O[Z]=H[K]}),LK=l&&l.__setModuleDefault||(Object.create?function(O,H){Object.defineProperty(O,"default",{enumerable:!0,value:H})}:function(O,H){O.default=H}),yK=l&&l.__importStar||function(O){if(O&&O.__esModule)return O;var H={};if(O!=null){for(var K in O)if(K!=="default"&&Object.prototype.hasOwnProperty.call(O,K))jK(H,O,K)}return LK(H,O),H};Object.defineProperty(l,"__esModule",{value:!0});l.$FormDataReader=void 0;l.$FormDataReader=yK(n0())});var a0=J((p0)=>{Object.defineProperty(p0,"__esModule",{value:!0});p0.string=p0.number=p0.bigint=p0.boolean=void 0;var MK=function(O){return O!==void 0?O==="true"?!0:O==="false"?!1:O:void 0};p0.boolean=MK;var $K=function(O){return O!==void 0?fK(O):void 0};p0.bigint=$K;var SK=function(O){return O!==void 0?NK(O):void 0};p0.number=SK;var RK=function(O){return O};p0.string=RK;var fK=function(O){try{return BigInt(O)}catch(H){return O}},NK=function(O){var H=Number(O);return isNaN(H)?O:H}});var s0=J((x)=>{var vK=x&&x.__createBinding||(Object.create?function(O,H,K,Z){if(Z===void 0)Z=K;var Y=Object.getOwnPropertyDescriptor(H,K);if(!Y||("get"in Y?!H.__esModule:Y.writable||Y.configurable))Y={enumerable:!0,get:function(){return H[K]}};Object.defineProperty(O,Z,Y)}:function(O,H,K,Z){if(Z===void 0)Z=K;O[Z]=H[K]}),_K=x&&x.__setModuleDefault||(Object.create?function(O,H){Object.defineProperty(O,"default",{enumerable:!0,value:H})}:function(O,H){O.default=H}),gK=x&&x.__importStar||function(O){if(O&&O.__esModule)return O;var H={};if(O!=null){for(var K in O)if(K!=="default"&&Object.prototype.hasOwnProperty.call(O,K))vK(H,O,K)}return _K(H,O),H};Object.defineProperty(x,"__esModule",{value:!0});x.$HeadersReader=void 0;x.$HeadersReader=gK(a0())});var e0=J((t0)=>{Object.defineProperty(t0,"__esModule",{value:!0});t0.string=t0.number=t0.bigint=t0.boolean=void 0;var kK=function(O){return O!=="null"?O==="true"||O==="1"?!0:O==="false"||O==="0"?!1:O:null};t0.boolean=kK;var cK=function(O){return O!=="null"?mK(O):null};t0.bigint=cK;var dK=function(O){return O!=="null"?xK(O):null};t0.number=dK;var lK=function(O){return O!=="null"?O:null};t0.string=lK;var xK=function(O){var H=Number(O);return isNaN(H)?O:H},mK=function(O){try{return BigInt(O)}catch(H){return O}}});var O5=J((m)=>{var pK=m&&m.__createBinding||(Object.create?function(O,H,K,Z){if(Z===void 0)Z=K;var Y=Object.getOwnPropertyDescriptor(H,K);if(!Y||("get"in Y?!H.__esModule:Y.writable||Y.configurable))Y={enumerable:!0,get:function(){return H[K]}};Object.defineProperty(O,Z,Y)}:function(O,H,K,Z){if(Z===void 0)Z=K;O[Z]=H[K]}),oK=m&&m.__setModuleDefault||(Object.create?function(O,H){Object.defineProperty(O,"default",{enumerable:!0,value:H})}:function(O,H){O.default=H}),aK=m&&m.__importStar||function(O){if(O&&O.__esModule)return O;var H={};if(O!=null){for(var K in O)if(K!=="default"&&Object.prototype.hasOwnProperty.call(O,K))pK(H,O,K)}return oK(H,O),H};Object.defineProperty(m,"__esModule",{value:!0});m.$ParameterReader=void 0;m.$ParameterReader=aK(e0())});var Z5=J((H5)=>{Object.defineProperty(H5,"__esModule",{value:!0});H5.array=H5.params=H5.string=H5.bigint=H5.number=H5.boolean=void 0;var sK=function(O){return O===null?void 0:O==="null"?null:O.length===0?!0:O==="true"||O==="1"?!0:O==="false"||O==="0"?!1:O};H5.boolean=sK;var tK=function(O){return(O===null||O===void 0?void 0:O.length)?O==="null"?null:KZ(O):void 0};H5.number=tK;var rK=function(O){return(O===null||O===void 0?void 0:O.length)?O==="null"?null:ZZ(O):void 0};H5.bigint=rK;var eK=function(O){return O===null?void 0:O==="null"?null:O};H5.string=eK;var OZ=function(O){if(typeof O==="string"){var H=O.indexOf("?");return O=H===-1?"":O.substring(H+1),new URLSearchParams(O)}return O};H5.params=OZ;var HZ=function(O,H){return O.length?O:H};H5.array=HZ;var KZ=function(O){var H=Number(O);return isNaN(H)?O:H},ZZ=function(O){try{return BigInt(O)}catch(H){return O}}});var Y5=J((u)=>{var WZ=u&&u.__createBinding||(Object.create?function(O,H,K,Z){if(Z===void 0)Z=K;var Y=Object.getOwnPropertyDescriptor(H,K);if(!Y||("get"in Y?!H.__esModule:Y.writable||Y.configurable))Y={enumerable:!0,get:function(){return H[K]}};Object.defineProperty(O,Z,Y)}:function(O,H,K,Z){if(Z===void 0)Z=K;O[Z]=H[K]}),TZ=u&&u.__setModuleDefault||(Object.create?function(O,H){Object.defineProperty(O,"default",{enumerable:!0,value:H})}:function(O,H){O.default=H}),BZ=u&&u.__importStar||function(O){if(O&&O.__esModule)return O;var H={};if(O!=null){for(var K in O)if(K!=="default"&&Object.prototype.hasOwnProperty.call(O,K))WZ(H,O,K)}return TZ(H,O),H};Object.defineProperty(u,"__esModule",{value:!0});u.$QueryReader=void 0;u.$QueryReader=BZ(Z5())});var A5=J((X5)=>{Object.defineProperty(X5,"__esModule",{value:!0});X5.query=X5.parameter=X5.headers=X5.formData=void 0;var zZ=i0(),IZ=s0(),CZ=O5(),VZ=Y5(),wZ=function(){return zZ.$FormDataReader};X5.formData=wZ;var qZ=function(){return IZ.$HeadersReader};X5.headers=qZ;var GZ=function(){return CZ.$ParameterReader};X5.parameter=GZ;var FZ=function(){return VZ.$QueryReader};X5.query=FZ});var W5=J((Q5)=>{Object.defineProperty(Q5,"__esModule",{value:!0});Q5.escapeDuplicate=Q5.capitalize=void 0;var jZ=function(O){return O.length?O[0].toUpperCase()+O.slice(1):O};Q5.capitalize=jZ;var LZ=function(O){return function(H){return O.includes(H)?Q5.escapeDuplicate(O)("_".concat(H)):H}};Q5.escapeDuplicate=LZ});var T5=J((n)=>{var MZ=n&&n.__createBinding||(Object.create?function(O,H,K,Z){if(Z===void 0)Z=K;var Y=Object.getOwnPropertyDescriptor(H,K);if(!Y||("get"in Y?!H.__esModule:Y.writable||Y.configurable))Y={enumerable:!0,get:function(){return H[K]}};Object.defineProperty(O,Z,Y)}:function(O,H,K,Z){if(Z===void 0)Z=K;O[Z]=H[K]}),$Z=n&&n.__setModuleDefault||(Object.create?function(O,H){Object.defineProperty(O,"default",{enumerable:!0,value:H})}:function(O,H){O.default=H}),SZ=n&&n.__importStar||function(O){if(O&&O.__esModule)return O;var H={};if(O!=null){for(var K in O)if(K!=="default"&&Object.prototype.hasOwnProperty.call(O,K))MZ(H,O,K)}return $Z(H,O),H};Object.defineProperty(n,"__esModule",{value:!0});n.StringUtil=void 0;n.StringUtil=SZ(W5())});var C5=J((i)=>{var RZ=function(O){var H=[];for(var K=0;K<O.length;K++){var Z=O.charCodeAt(K);if(65<=Z&&Z<=90)H.push(K)}for(var K=H.length-1;K>0;--K){var Y=H[K],A=H[K-1];if(Y-A===1)H.splice(K,1)}if(H.length!==0&&H[0]===0)H.splice(0,1);if(H.length===0)return O.toLowerCase();var Q="";for(var K=0;K<H.length;K++){var G=K===0?0:H[K-1],h=H[K];Q+=O.substring(G,h).toLowerCase(),Q+="_"}return Q+=O.substring(H[H.length-1]).toLowerCase(),Q},fZ=function(O){return I5(function(H){if(H.length===0)return H;else if(H[0]===H[0].toUpperCase())return H[0].toLowerCase()+H.substring(1);else return H})(O)},NZ=function(O){return I5(function(H){if(H.length===0)return H;else if(H[0]===H[0].toLowerCase())return H[0].toUpperCase()+H.substring(1);else return H})(O)},B5=i&&i.__read||function(O,H){var K=typeof Symbol==="function"&&O[Symbol.iterator];if(!K)return O;var Z=K.call(O),Y,A=[],Q;try{while((H===void 0||H-- >0)&&!(Y=Z.next()).done)A.push(Y.value)}catch(G){Q={error:G}}finally{try{if(Y&&!Y.done&&(K=Z.return))K.call(Z)}finally{if(Q)throw Q.error}}return A};Object.defineProperty(i,"__esModule",{value:!0});i.pascal=i.camel=i.snake=void 0;var z5=T5();i.snake=RZ;i.camel=fZ;i.pascal=NZ;var I5=function(O){return function(H){var K="";for(var Z=0;Z<H.length;Z++)if(H[Z]==="_")K+="_";else break;if(K.length!==0)H=H.substring(K.length);var Y=[];for(var Z=0;Z<H.length;Z++){var A=H[Z];if(A!=="_")continue;var Q=Y[Y.length-1];if(Q===void 0||Q[0]+Q[1]!==Z)Y.push([Z,1]);else++Q[1]}if(Y.length===0)return K+O(H);var G="";for(var Z=0;Z<Y.length;Z++){var h=B5(Y[Z],1),N=h[0];if(Z===0)if(N===0)G+="_";else G+=H.substring(0,N);else{var KO=B5(Y[Z-1],2),t=KO[0],ZO=KO[1],UO=H.substring(t+ZO,N);if(UO.length)G+=z5.StringUtil.capitalize(UO)}}var k=Y[Y.length-1],jO=H.substring(k[0]+k[1]);if(k.length)G+=z5.StringUtil.capitalize(jO);return K+O(G)}}});var V5=J((p)=>{var bZ=p&&p.__createBinding||(Object.create?function(O,H,K,Z){if(Z===void 0)Z=K;var Y=Object.getOwnPropertyDescriptor(H,K);if(!Y||("get"in Y?!H.__esModule:Y.writable||Y.configurable))Y={enumerable:!0,get:function(){return H[K]}};Object.defineProperty(O,Z,Y)}:function(O,H,K,Z){if(Z===void 0)Z=K;O[Z]=H[K]}),hZ=p&&p.__setModuleDefault||(Object.create?function(O,H){Object.defineProperty(O,"default",{enumerable:!0,value:H})}:function(O,H){O.default=H}),PZ=p&&p.__importStar||function(O){if(O&&O.__esModule)return O;var H={};if(O!=null){for(var K in O)if(K!=="default"&&Object.prototype.hasOwnProperty.call(O,K))bZ(H,O,K)}return hZ(H,O),H};Object.defineProperty(p,"__esModule",{value:!0});p.NamingConvention=void 0;p.NamingConvention=PZ(C5())});var w5=J((GO)=>{var vZ=GO&&GO.__read||function(O,H){var K=typeof Symbol==="function"&&O[Symbol.iterator];if(!K)return O;var Z=K.call(O),Y,A=[],Q;try{while((H===void 0||H-- >0)&&!(Y=Z.next()).done)A.push(Y.value)}catch(G){Q={error:G}}finally{try{if(Y&&!Y.done&&(K=Z.return))K.call(Z)}finally{if(Q)throw Q.error}}return A};Object.defineProperty(GO,"__esModule",{value:!0});GO.$convention=void 0;var _Z=function(O){var H=function(Z){if(typeof Z==="object")if(Z===null)return null;else if(Array.isArray(Z))return Z.map(H);else if(Z instanceof Boolean||Z instanceof BigInt||Z instanceof Number||Z instanceof String)return Z.valueOf();else if(Z instanceof Date)return new Date(Z);else if(Z instanceof Uint8Array||Z instanceof Uint8ClampedArray||Z instanceof Uint16Array||Z instanceof Uint32Array||Z instanceof BigUint64Array||Z instanceof Int8Array||Z instanceof Int16Array||Z instanceof Int32Array||Z instanceof BigInt64Array||Z instanceof Float32Array||Z instanceof Float64Array||Z instanceof DataView)return Z;else return K(Z);return Z},K=function(Z){return Object.fromEntries(Object.entries(Z).map(function(Y){var A=vZ(Y,2),Q=A[0],G=A[1];return[O(Q),H(G)]}))};return H};GO.$convention=_Z});var q5=J((o)=>{var a=o&&o.__assign||function(){return a=Object.assign||function(O){for(var H,K=1,Z=arguments.length;K<Z;K++){H=arguments[K];for(var Y in H)if(Object.prototype.hasOwnProperty.call(H,Y))O[Y]=H[Y]}return O},a.apply(this,arguments)};Object.defineProperty(o,"__esModule",{value:!0});o.snake=o.pascal=o.camel=void 0;var gO=V5(),kO=w5(),gZ=MO(),kZ=VO(),cZ=function(O){return a(a({},cO(O)),{any:kO.$convention(gO.NamingConvention.camel)})};o.camel=cZ;var dZ=function(O){return a(a({},cO(O)),{any:kO.$convention(gO.NamingConvention.pascal)})};o.pascal=dZ;var lZ=function(O){return a(a({},cO(O)),{any:kO.$convention(gO.NamingConvention.snake)})};o.snake=lZ;var cO=function(O){return a(a({},kZ.is()),{throws:gZ.$throws("notations.".concat(O))})}});var E5=J((G5)=>{Object.defineProperty(G5,"__esModule",{value:!0});G5.$clone=void 0;var xZ=function(O){return JSON.parse(JSON.stringify(O))};G5.$clone=xZ});var j5=J((D5)=>{Object.defineProperty(D5,"__esModule",{value:!0});D5.$any=void 0;var mZ=E5(),uZ=function(O){return O!==void 0?mZ.$clone(O):void 0};D5.$any=uZ});var M5=J((YO)=>{var FO=YO&&YO.__assign||function(){return FO=Object.assign||function(O){for(var H,K=1,Z=arguments.length;K<Z;K++){H=arguments[K];for(var Y in H)if(Object.prototype.hasOwnProperty.call(H,Y))O[Y]=H[Y]}return O},FO.apply(this,arguments)};Object.defineProperty(YO,"__esModule",{value:!0});YO.prune=YO.clone=void 0;var nZ=j5(),L5=MO(),y5=VO(),iZ=function(O){return FO(FO({},y5.is()),{throws:L5.$throws("misc.".concat(O)),any:nZ.$any})};YO.clone=iZ;var pZ=function(O){return FO(FO({},y5.is()),{throws:L5.$throws("misc.".concat(O))})};YO.prune=pZ});var R5=J(($5)=>{Object.defineProperty($5,"__esModule",{value:!0});$5.$ProtobufReader=void 0;var oZ=function(){function O(H){this.buf=H,this.ptr=0,this.view=new DataView(H.buffer,H.byteOffset,H.byteLength)}return O.prototype.index=function(){return this.ptr},O.prototype.size=function(){return this.buf.length},O.prototype.uint32=function(){return this.varint32()},O.prototype.int32=function(){return this.varint32()},O.prototype.sint32=function(){var H=this.varint32();return H>>>1^-(H&1)},O.prototype.uint64=function(){return this.varint64()},O.prototype.int64=function(){return this.varint64()},O.prototype.sint64=function(){var H=this.varint64();return H>>dO^-(H&dO)},O.prototype.bool=function(){return this.varint32()!==0},O.prototype.float=function(){var H=this.view.getFloat32(this.ptr,!0);return this.ptr+=4,H},O.prototype.double=function(){var H=this.view.getFloat64(this.ptr,!0);return this.ptr+=8,H},O.prototype.bytes=function(){var H=this.uint32(),K=this.ptr;return this.ptr+=H,this.buf.subarray(K,K+H)},O.prototype.string=function(){return aZ.decode(this.bytes())},O.prototype.skip=function(H){if(H===0)while(this.u8()&128);else{if(this.index()+H>this.size())throw new Error("Error on typia.protobuf.decode(): buffer overflow.");this.ptr+=H}},O.prototype.skipType=function(H){switch(H){case 0:this.skip(0);break;case 1:this.skip(8);break;case 2:this.skip(this.uint32());break;case 3:while((H=this.uint32()&7)!==4)this.skipType(H);break;case 5:this.skip(4);break;default:throw new Error("Invalid wire type ".concat(H," at offset ").concat(this.ptr,"."))}},O.prototype.varint32=function(){var H,K;if(K=(H=this.u8())&127,H<128)return K;if(K|=((H=this.u8())&127)<<7,H<128)return K;if(K|=((H=this.u8())&127)<<14,H<128)return K;if(K|=((H=this.u8())&127)<<21,H<128)return K;if(K|=((H=this.u8())&15)<<28,H<128)return K;if(this.u8()<128)return K;if(this.u8()<128)return K;if(this.u8()<128)return K;if(this.u8()<128)return K;if(this.u8()<128)return K;return K},O.prototype.varint64=function(){var H,K;if(K=(H=this.u8n())&r,H<e)return K;if(K|=((H=this.u8n())&r)<<BigInt(7),H<e)return K;if(K|=((H=this.u8n())&r)<<BigInt(14),H<e)return K;if(K|=((H=this.u8n())&r)<<BigInt(21),H<e)return K;if(K|=((H=this.u8n())&r)<<BigInt(28),H<e)return K;if(K|=((H=this.u8n())&r)<<BigInt(35),H<e)return K;if(K|=((H=this.u8n())&r)<<BigInt(42),H<e)return K;if(K|=((H=this.u8n())&r)<<BigInt(49),H<e)return K;if(K|=((H=this.u8n())&r)<<BigInt(56),H<e)return K;return K|=(this.u8n()&dO)<<BigInt(63),BigInt.asIntN(64,K)},O.prototype.u8=function(){return this.view.getUint8(this.ptr++)},O.prototype.u8n=function(){return BigInt(this.u8())},O}();$5.$ProtobufReader=oZ;var aZ=new TextDecoder,dO=BigInt(1),r=BigInt(127),e=BigInt(128)});var lO=J((f5)=>{Object.defineProperty(f5,"__esModule",{value:!0});f5.$strlen=void 0;var sZ=function(O){var H,K,Z;for(H=K=0;Z=O.charCodeAt(K++);H+=Z>>11?3:Z>>7?2:1);return H};f5.$strlen=sZ});var P5=J((b5)=>{Object.defineProperty(b5,"__esModule",{value:!0});b5.$ProtobufSizer=void 0;var tZ=lO(),rZ=function(){function O(H){if(H===void 0)H=0;this.len=H,this.pos=[],this.varlen=[],this.varlenidx=[]}return O.prototype.bool=function(){this.len+=1},O.prototype.int32=function(H){if(H<0)this.len+=10;else this.varint32(H)},O.prototype.sint32=function(H){this.varint32(H<<1^H>>31)},O.prototype.uint32=function(H){this.varint32(H)},O.prototype.int64=function(H){this.varint64(typeof H==="number"?BigInt(H):H)},O.prototype.sint64=function(H){if(typeof H==="number")H=BigInt(H);this.varint64(H<<BigInt(1)^H>>BigInt(63))},O.prototype.uint64=function(H){this.varint64(typeof H==="number"?BigInt(H):H)},O.prototype.float=function(H){this.len+=4},O.prototype.double=function(H){this.len+=8},O.prototype.bytes=function(H){this.uint32(H.byteLength),this.len+=H.byteLength},O.prototype.string=function(H){var K=tZ.$strlen(H);this.varlen.push(K),this.uint32(K),this.len+=K},O.prototype.fork=function(){this.pos.push(this.len),this.varlenidx.push(this.varlen.length),this.varlen.push(0)},O.prototype.ldelim=function(){if(!(this.pos.length&&this.varlenidx.length))throw new Error("Error on typia.protobuf.encode(): missing fork() before ldelim() call.");var H=this.len,K=this.pos.pop(),Z=this.varlenidx.pop(),Y=H-K;this.varlen[Z]=Y,this.uint32(Y)},O.prototype.reset=function(){this.len=0,this.pos.length=0,this.varlen.length=0,this.varlenidx.length=0},O.prototype.varint32=function(H){this.len+=H<0?10:H<128?1:H<16384?2:H<2097152?3:H<268435456?4:5},O.prototype.varint64=function(H){H=BigInt.asUintN(64,H);while(H>O1)++this.len,H=H>>eZ;++this.len},O}();b5.$ProtobufSizer=rZ;var eZ=BigInt(7),O1=BigInt(127)});var k5=J((_5)=>{Object.defineProperty(_5,"__esModule",{value:!0});_5.$ProtobufWriter=void 0;var H1=function(){function O(H){this.sizer=H,this.buf=new Uint8Array(H.len),this.view=new DataView(this.buf.buffer),this.ptr=0,this.varlenidx=0}return O.prototype.buffer=function(){return this.buf},O.prototype.bool=function(H){this.byte(H?1:0)},O.prototype.byte=function(H){this.buf[this.ptr++]=H&255},O.prototype.int32=function(H){if(H<0)this.int64(H);else this.variant32(H>>>0)},O.prototype.sint32=function(H){this.variant32(H<<1^H>>31)},O.prototype.uint32=function(H){this.variant32(H)},O.prototype.sint64=function(H){H=BigInt(H),this.variant64(H<<Z1^H>>X1)},O.prototype.int64=function(H){this.variant64(BigInt(H))},O.prototype.uint64=function(H){this.variant64(BigInt(H))},O.prototype.float=function(H){this.view.setFloat32(this.ptr,H,!0),this.ptr+=4},O.prototype.double=function(H){this.view.setFloat64(this.ptr,H,!0),this.ptr+=8},O.prototype.bytes=function(H){this.uint32(H.byteLength);for(var K=0;K<H.byteLength;K++)this.buf[this.ptr++]=H[K]},O.prototype.string=function(H){var K=this.varlen();this.uint32(K);var Z=K1.encode(H);for(var Y=0;Y<Z.byteLength;Y++)this.buf[this.ptr++]=Z[Y]},O.prototype.fork=function(){this.uint32(this.varlen())},O.prototype.ldelim=function(){},O.prototype.finish=function(){return this.buf},O.prototype.reset=function(){this.buf=new Uint8Array(this.sizer.len),this.view=new DataView(this.buf.buffer),this.ptr=0,this.varlenidx=0},O.prototype.variant32=function(H){while(H>127)this.buf[this.ptr++]=H&127|128,H=H>>>7;this.buf[this.ptr++]=H},O.prototype.variant64=function(H){H=BigInt.asUintN(64,H);while(H>v5)this.buf[this.ptr++]=Number(H&v5|J1),H=H>>Y1;this.buf[this.ptr++]=Number(H)},O.prototype.varlen=function(){return this.varlenidx>=this.sizer.varlen.length?0:this.sizer.varlen[this.varlenidx++]},O}();_5.$ProtobufWriter=H1;var K1=new TextEncoder,Z1=BigInt(1),Y1=BigInt(7),X1=BigInt(63),v5=BigInt(127),J1=BigInt(128)});var l5=J((XO)=>{var EO=XO&&XO.__assign||function(){return EO=Object.assign||function(O){for(var H,K=1,Z=arguments.length;K<Z;K++){H=arguments[K];for(var Y in H)if(Object.prototype.hasOwnProperty.call(H,Y))O[Y]=H[Y]}return O},EO.apply(this,arguments)};Object.defineProperty(XO,"__esModule",{value:!0});XO.encode=XO.decode=void 0;var A1=R5(),Q1=P5(),W1=k5(),T1=lO(),c5=MO(),d5=VO(),B1=function(O){return EO(EO({},d5.is()),{Reader:A1.$ProtobufReader,throws:c5.$throws("protobuf.".concat(O))})};XO.decode=B1;var z1=function(O){return EO(EO({},d5.is()),{Sizer:Q1.$ProtobufSizer,Writer:W1.$ProtobufWriter,strlen:T1.$strlen,throws:c5.$throws(O)})};XO.encode=z1});var AO=J((E)=>{var JO=E&&E.__assign||function(){return JO=Object.assign||function(O){for(var H,K=1,Z=arguments.length;K<Z;K++){H=arguments[K];for(var Y in H)if(Object.prototype.hasOwnProperty.call(H,Y))O[Y]=H[Y]}return O},JO.apply(this,arguments)},I1=E&&E.__createBinding||(Object.create?function(O,H,K,Z){if(Z===void 0)Z=K;var Y=Object.getOwnPropertyDescriptor(H,K);if(!Y||("get"in Y?!H.__esModule:Y.writable||Y.configurable))Y={enumerable:!0,get:function(){return H[K]}};Object.defineProperty(O,Z,Y)}:function(O,H,K,Z){if(Z===void 0)Z=K;O[Z]=H[K]}),C1=E&&E.__setModuleDefault||(Object.create?function(O,H){Object.defineProperty(O,"default",{enumerable:!0,value:H})}:function(O,H){O.default=H}),DO=E&&E.__importStar||function(O){if(O&&O.__esModule)return O;var H={};if(O!=null){for(var K in O)if(K!=="default"&&Object.prototype.hasOwnProperty.call(O,K))I1(H,O,K)}return C1(H,O),H};Object.defineProperty(E,"__esModule",{value:!0});E.random=E.validate=E.assert=E.is=E.protobuf=E.misc=E.notations=E.http=E.json=E.functional=void 0;var x5=J0(),V1=W0(),w1=z0(),m5=V0(),q1=G0(),G1=TO(),xO=VO();Object.defineProperty(E,"is",{enumerable:!0,get:function(){return xO.is}});E.functional=DO(R0());E.json=DO(x0());E.http=DO(A5());E.notations=DO(q5());E.misc=DO(M5());E.protobuf=DO(l5());var F1=function(O){return JO(JO({},xO.is()),{join:m5.$join,every:V1.$every,guard:w1.$guard("typia.".concat(O)),predicate:function(H,K,Z){if(H===!1&&K===!0)throw new G1.TypeGuardError(JO(JO({},Z()),{method:"typia.".concat(O)}));return H}})};E.assert=F1;var E1=function(){return JO(JO({},xO.is()),{join:m5.$join,report:q1.$report,predicate:function(O){return function(H,K,Z){if(H===!1&&K===!0)(function(){O.success&&(O.success=!1);var Y=O.errors,A=Z();if(Y.length){var Q=Y[Y.length-1].path;if(Q.length>=A.path.length&&Q.substring(0,A.path.length)===A.path)return}Y.push(A);return})();return H}}})};E.validate=E1;var D1=function(){return{generator:x5.RandomGenerator,pick:x5.RandomGenerator.pick}};E.random=D1});var n5=J((I)=>{var u5=function(){S("assertFunction")},$1=function(){S("assertReturn")},R1=function(){S("assertEqualsFunction")},N1=function(){S("assertEqualsParameters")},h1=function(){S("assertEqualsReturn")},v1=function(){S("isFunction")},g1=function(){S("isParameters")},c1=function(){S("isReturn")},l1=function(){S("equalsFunction")},m1=function(){S("equalsParameters")},n1=function(){S("equalsReturn")},p1=function(){S("validateFunction")},a1=function(){S("validateReturn")},t1=function(){S("validateReturn")},e1=function(){S("validateEqualsFunction")},HY=function(){S("validateEqualsParameters")},ZY=function(){S("validateEqualsReturn")},S=function(O){throw new Error("Error on typia.functional.".concat(O,"(): no transform has been configured. Read and follow https://typia.io/docs/setup please."))},U1=I&&I.__createBinding||(Object.create?function(O,H,K,Z){if(Z===void 0)Z=K;var Y=Object.getOwnPropertyDescriptor(H,K);if(!Y||("get"in Y?!H.__esModule:Y.writable||Y.configurable))Y={enumerable:!0,get:function(){return H[K]}};Object.defineProperty(O,Z,Y)}:function(O,H,K,Z){if(Z===void 0)Z=K;O[Z]=H[K]}),j1=I&&I.__setModuleDefault||(Object.create?function(O,H){Object.defineProperty(O,"default",{enumerable:!0,value:H})}:function(O,H){O.default=H}),L1=I&&I.__importStar||function(O){if(O&&O.__esModule)return O;var H={};if(O!=null){for(var K in O)if(K!=="default"&&Object.prototype.hasOwnProperty.call(O,K))U1(H,O,K)}return j1(H,O),H};Object.defineProperty(I,"__esModule",{value:!0});I.validateEqualsReturn=I.validateEqualsParameters=I.validateEqualsFunction=I.validateReturn=I.validateParameters=I.validateFunction=I.equalsReturn=I.equalsParameters=I.equalsFunction=I.isReturn=I.isParameters=I.isFunction=I.assertEqualsReturn=I.assertEqualsParameters=I.assertEqualsFunction=I.assertReturn=I.assertParameters=I.assertFunction=void 0;var j=L1(AO()),y1=Object.assign(u5,j.assert("functional.assertFunction"),j.functional.functionalAssert());I.assertFunction=y1;var M1=Object.assign(u5,j.assert("functional.assertFunction"),j.functional.functionalAssert());I.assertParameters=M1;var S1=Object.assign($1,j.assert("functional.assertReturn"),j.functional.functionalAssert());I.assertReturn=S1;var f1=Object.assign(R1,j.assert("functional.assertEqualsFunction"),j.functional.functionalAssert());I.assertEqualsFunction=f1;var b1=Object.assign(N1,j.assert("functional.assertEqualsParameters"),j.functional.functionalAssert());I.assertEqualsParameters=b1;var P1=Object.assign(h1,j.assert("functional.assertEqualsReturn"),j.functional.functionalAssert());I.assertEqualsReturn=P1;var _1=Object.assign(v1,j.is());I.isFunction=_1;var k1=Object.assign(g1,j.is());I.isParameters=k1;var d1=Object.assign(c1,j.is());I.isReturn=d1;var x1=Object.assign(l1,j.is());I.equalsFunction=x1;var u1=Object.assign(m1,j.is());I.equalsParameters=u1;var i1=Object.assign(n1,j.is());I.equalsReturn=i1;var o1=Object.assign(p1,j.validate());I.validateFunction=o1;var s1=Object.assign(a1,j.validate());I.validateParameters=s1;var r1=Object.assign(t1,j.validate());I.validateReturn=r1;var OY=Object.assign(e1,j.validate());I.validateEqualsFunction=OY;var KY=Object.assign(HY,j.validate());I.validateEqualsParameters=KY;var YY=Object.assign(ZY,j.validate());I.validateEqualsReturn=YY});var i5=J((T)=>{var QY=function(){U("formData")},TY=function(){U("assertFormData")},zY=function(){U("isFormData")},CY=function(){U("validateFormData")},wY=function(){U("query")},GY=function(){U("assertQuery")},EY=function(){U("isQuery")},UY=function(){U("validateQuery")},LY=function(){U("headers")},MY=function(){U("assertHeaders")},SY=function(){U("isHeaders")},fY=function(){U("validateHeaders")},bY=function(){U("parameter")},PY=function(){U("createFormData")},_Y=function(){U("createAssertFormData")},kY=function(){U("createIsFormData")},dY=function(){U("createValidateFormData")},xY=function(){U("createQuery")},uY=function(){U("createAssertQuery")},iY=function(){U("createIsQuery")},oY=function(){U("createValidateQuery")},sY=function(){U("createHeaders")},rY=function(){U("createAssertHeaders")},O8=function(){U("createIsHeaders")},K8=function(){U("createValidateHeaders")},Y8=function(){U("createParameter")},U=function(O){throw new Error("Error on typia.http.".concat(O,"(): no transform has been configured. Read and follow https://typia.io/docs/setup please."))},XY=T&&T.__createBinding||(Object.create?function(O,H,K,Z){if(Z===void 0)Z=K;var Y=Object.getOwnPropertyDescriptor(H,K);if(!Y||("get"in Y?!H.__esModule:Y.writable||Y.configurable))Y={enumerable:!0,get:function(){return H[K]}};Object.defineProperty(O,Z,Y)}:function(O,H,K,Z){if(Z===void 0)Z=K;O[Z]=H[K]}),JY=T&&T.__setModuleDefault||(Object.create?function(O,H){Object.defineProperty(O,"default",{enumerable:!0,value:H})}:function(O,H){O.default=H}),AY=T&&T.__importStar||function(O){if(O&&O.__esModule)return O;var H={};if(O!=null){for(var K in O)if(K!=="default"&&Object.prototype.hasOwnProperty.call(O,K))XY(H,O,K)}return JY(H,O),H};Object.defineProperty(T,"__esModule",{value:!0});T.createParameter=T.createValidateHeaders=T.createIsHeaders=T.createAssertHeaders=T.createHeaders=T.createValidateQuery=T.createIsQuery=T.createAssertQuery=T.createQuery=T.createValidateFormData=T.createIsFormData=T.createAssertFormData=T.createFormData=T.parameter=T.validateHeaders=T.isHeaders=T.assertHeaders=T.headers=T.validateQuery=T.isQuery=T.assertQuery=T.query=T.validateFormData=T.isFormData=T.assertFormData=T.formData=void 0;var z=AY(AO()),WY=Object.assign(QY,z.http.formData());T.formData=WY;var BY=Object.assign(TY,z.http.formData(),z.assert("http.assertFormData"));T.assertFormData=BY;var IY=Object.assign(zY,z.http.formData(),z.is());T.isFormData=IY;var VY=Object.assign(CY,z.http.formData(),z.validate());T.validateFormData=VY;var qY=Object.assign(wY,z.http.query());T.query=qY;var FY=Object.assign(GY,z.http.query(),z.assert("http.assertQuery"));T.assertQuery=FY;var DY=Object.assign(EY,z.http.query(),z.is());T.isQuery=DY;var jY=Object.assign(UY,z.http.query(),z.validate());T.validateQuery=jY;var yY=Object.assign(LY,z.http.headers());T.headers=yY;var $Y=Object.assign(MY,z.http.headers(),z.assert("http.assertHeaders"));T.assertHeaders=$Y;var RY=Object.assign(SY,z.http.headers(),z.is());T.isHeaders=RY;var NY=Object.assign(fY,z.http.headers(),z.validate());T.validateHeaders=NY;var hY=Object.assign(bY,z.http.parameter(),z.assert("http.parameter"));T.parameter=hY;var vY=Object.assign(PY,z.http.formData());T.createFormData=vY;var gY=Object.assign(_Y,z.http.formData(),z.assert("http.createAssertFormData"));T.createAssertFormData=gY;var cY=Object.assign(kY,z.http.formData(),z.is());T.createIsFormData=cY;var lY=Object.assign(dY,z.http.formData(),z.validate());T.createValidateFormData=lY;var mY=Object.assign(xY,z.http.query());T.createQuery=mY;var nY=Object.assign(uY,z.http.query(),z.assert("http.createAssertQuery"));T.createAssertQuery=nY;var pY=Object.assign(iY,z.http.query(),z.is());T.createIsQuery=pY;var aY=Object.assign(oY,z.http.query(),z.validate());T.createValidateQuery=aY;var tY=Object.assign(sY,z.http.headers());T.createHeaders=tY;var eY=Object.assign(rY,z.http.headers(),z.assert("http.createAssertHeaders"));T.createAssertHeaders=eY;var H8=Object.assign(O8,z.http.headers(),z.is());T.createIsHeaders=H8;var Z8=Object.assign(K8,z.http.headers(),z.validate());T.createValidateHeaders=Z8;var X8=Object.assign(Y8,z.http.parameter(),z.assert("http.createParameter"));T.createParameter=X8});var O6=J((q)=>{var W8=function(){b("application")},T8=function(){b("assertParse")},B8=function(){b("isParse")},z8=function(){b("validateParse")},I8=function(){b("stringify")},C8=function(){b("assertStringify")},V8=function(){b("isStringify")},w8=function(){b("validateStringify")},q8=function(){b("createIsParse")},F8=function(){b("createAssertParse")},D8=function(){b("createValidateParse")},j8=function(){b("createStringify")},y8=function(){b("createAssertStringify")},$8=function(){b("createIsStringify")},R8=function(){b("createValidateStringify")},b=function(O){throw new Error("Error on typia.json.".concat(O,"(): no transform has been configured. Read and follow https://typia.io/docs/setup please."))},J8=q&&q.__createBinding||(Object.create?function(O,H,K,Z){if(Z===void 0)Z=K;var Y=Object.getOwnPropertyDescriptor(H,K);if(!Y||("get"in Y?!H.__esModule:Y.writable||Y.configurable))Y={enumerable:!0,get:function(){return H[K]}};Object.defineProperty(O,Z,Y)}:function(O,H,K,Z){if(Z===void 0)Z=K;O[Z]=H[K]}),A8=q&&q.__setModuleDefault||(Object.create?function(O,H){Object.defineProperty(O,"default",{enumerable:!0,value:H})}:function(O,H){O.default=H}),Q8=q&&q.__importStar||function(O){if(O&&O.__esModule)return O;var H={};if(O!=null){for(var K in O)if(K!=="default"&&Object.prototype.hasOwnProperty.call(O,K))J8(H,O,K)}return A8(H,O),H};Object.defineProperty(q,"__esModule",{value:!0});q.createValidateStringify=q.createIsStringify=q.createAssertStringify=q.createStringify=q.createValidateParse=q.createAssertParse=q.createIsParse=q.validateStringify=q.isStringify=q.assertStringify=q.stringify=q.validateParse=q.isParse=q.assertParse=q.application=void 0;var s=Q8(AO());q.application=W8;var p5=Object.assign(T8,s.assert("json.assertParse"));q.assertParse=p5;var o5=Object.assign(B8,s.is());q.isParse=o5;var a5=Object.assign(z8,s.validate());q.validateParse=a5;var s5=Object.assign(I8,s.json.stringify("stringify"));q.stringify=s5;var t5=Object.assign(C8,s.assert("json.assertStringify"),s.json.stringify("assertStringify"));q.assertStringify=t5;var r5=Object.assign(V8,s.is(),s.json.stringify("isStringify"));q.isStringify=r5;var e5=Object.assign(w8,s.validate(),s.json.stringify("validateStringify"));q.validateStringify=e5;var G8=Object.assign(q8,o5);q.createIsParse=G8;var E8=Object.assign(F8,p5);q.createAssertParse=E8;var U8=Object.assign(D8,a5);q.createValidateParse=U8;var L8=Object.assign(j8,s5);q.createStringify=L8;var M8=Object.assign(y8,t5);q.createAssertStringify=M8;var S8=Object.assign($8,r5);q.createIsStringify=S8;var f8=Object.assign(R8,e5);q.createValidateStringify=f8});var W6=J((C)=>{var P8=function(){R("literals")},v8=function(){R("clone")},_8=function(){R("assertClone")},g8=function(){R("isClone")},k8=function(){R("validateClone")},c8=function(){R("prune")},d8=function(){R("assertPrune")},l8=function(){R("isPrune")},x8=function(){R("validatePrune")},m8=function(){R("createClone")},n8=function(){R("createAssertClone")},p8=function(){R("createIsClone")},a8=function(){R("createValidateClone")},t8=function(){R("createPrune")},e8=function(){R("createAssertPrune")},HX=function(){R("createIsPrune")},ZX=function(){R("createValidatePrune")},R=function(O){throw new Error("Error on typia.misc.".concat(O,"(): no transform has been configured. Read and follow https://typia.io/docs/setup please."))},N8=C&&C.__createBinding||(Object.create?function(O,H,K,Z){if(Z===void 0)Z=K;var Y=Object.getOwnPropertyDescriptor(H,K);if(!Y||("get"in Y?!H.__esModule:Y.writable||Y.configurable))Y={enumerable:!0,get:function(){return H[K]}};Object.defineProperty(O,Z,Y)}:function(O,H,K,Z){if(Z===void 0)Z=K;O[Z]=H[K]}),b8=C&&C.__setModuleDefault||(Object.create?function(O,H){Object.defineProperty(O,"default",{enumerable:!0,value:H})}:function(O,H){O.default=H}),h8=C&&C.__importStar||function(O){if(O&&O.__esModule)return O;var H={};if(O!=null){for(var K in O)if(K!=="default"&&Object.prototype.hasOwnProperty.call(O,K))N8(H,O,K)}return b8(H,O),H};Object.defineProperty(C,"__esModule",{value:!0});C.createValidatePrune=C.createIsPrune=C.createAssertPrune=C.createPrune=C.createValidateClone=C.createIsClone=C.createAssertClone=C.createClone=C.validatePrune=C.isPrune=C.assertPrune=C.prune=C.validateClone=C.isClone=C.assertClone=C.clone=C.literals=void 0;var P=h8(AO());C.literals=P8;var H6=Object.assign(v8,P.misc.clone("clone"));C.clone=H6;var K6=Object.assign(_8,P.assert("misc.assertClone"),P.misc.clone("assertClone"));C.assertClone=K6;var Z6=Object.assign(g8,P.is(),P.misc.clone("isClone"));C.isClone=Z6;var Y6=Object.assign(k8,P.validate(),P.misc.clone("validateClone"));C.validateClone=Y6;var X6=Object.assign(c8,P.misc.prune("prune"));C.prune=X6;var J6=Object.assign(d8,P.assert("misc.assertPrune"),P.misc.prune("assertPrune"));C.assertPrune=J6;var A6=Object.assign(l8,P.is(),P.misc.prune("isPrune"));C.isPrune=A6;var Q6=Object.assign(x8,P.misc.prune("validatePrune"),P.validate());C.validatePrune=Q6;var u8=Object.assign(m8,H6);C.createClone=u8;var i8=Object.assign(n8,K6);C.createAssertClone=i8;var o8=Object.assign(p8,Z6);C.createIsClone=o8;var s8=Object.assign(a8,Y6);C.createValidateClone=s8;var r8=Object.assign(t8,X6);C.createPrune=r8;var OX=Object.assign(e8,J6);C.createAssertPrune=OX;var KX=Object.assign(HX,A6);C.createIsPrune=KX;var YX=Object.assign(ZX,Q6);C.createValidatePrune=YX});var T6=J((B)=>{var QX=function(){return L("camel")},TX=function(){return L("assertCamel")},zX=function(){return L("isCamel")},CX=function(){return L("validateCamel")},wX=function(){return L("pascal")},GX=function(){return L("assertPascal")},EX=function(){return L("isPascal")},UX=function(){return L("validatePascal")},LX=function(){return L("snake")},MX=function(){return L("assertSnake")},SX=function(){return L("isSnake")},fX=function(){return L("validateSnake")},bX=function(){L("createCamel")},PX=function(){L("createAssertCamel")},_X=function(){L("createIsCamel")},kX=function(){L("createValidateCamel")},dX=function(){L("createPascal")},xX=function(){L("createAssertPascal")},uX=function(){L("createIsPascal")},iX=function(){L("createValidatePascal")},oX=function(){L("createSnake")},sX=function(){L("createAssertSnake")},rX=function(){L("createIsSnake")},O7=function(){L("createValidateSnake")},L=function(O){throw new Error("Error on typia.notations.".concat(O,"(): no transform has been configured. Read and follow https://typia.io/docs/setup please."))},XX=B&&B.__createBinding||(Object.create?function(O,H,K,Z){if(Z===void 0)Z=K;var Y=Object.getOwnPropertyDescriptor(H,K);if(!Y||("get"in Y?!H.__esModule:Y.writable||Y.configurable))Y={enumerable:!0,get:function(){return H[K]}};Object.defineProperty(O,Z,Y)}:function(O,H,K,Z){if(Z===void 0)Z=K;O[Z]=H[K]}),JX=B&&B.__setModuleDefault||(Object.create?function(O,H){Object.defineProperty(O,"default",{enumerable:!0,value:H})}:function(O,H){O.default=H}),AX=B&&B.__importStar||function(O){if(O&&O.__esModule)return O;var H={};if(O!=null){for(var K in O)if(K!=="default"&&Object.prototype.hasOwnProperty.call(O,K))XX(H,O,K)}return JX(H,O),H};Object.defineProperty(B,"__esModule",{value:!0});B.createValidateSnake=B.createIsSnake=B.createAssertSnake=B.createSnake=B.createValidatePascal=B.createIsPascal=B.createAssertPascal=B.createPascal=B.createValidateCamel=B.createIsCamel=B.createAssertCamel=B.createCamel=B.validateSnake=B.isSnake=B.assertSnake=B.snake=B.validatePascal=B.isPascal=B.assertPascal=B.pascal=B.validateCamel=B.isCamel=B.assertCamel=B.camel=void 0;var V=AX(AO()),WX=Object.assign(QX,V.notations.camel("camel"));B.camel=WX;var BX=Object.assign(TX,V.notations.camel("assertCamel"),V.assert("notations.assertCamel"));B.assertCamel=BX;var IX=Object.assign(zX,V.notations.camel("isCamel"),V.is());B.isCamel=IX;var VX=Object.assign(CX,V.notations.camel("validateCamel"),V.validate());B.validateCamel=VX;var qX=Object.assign(wX,V.notations.pascal("pascal"));B.pascal=qX;var FX=Object.assign(GX,V.notations.pascal("assertPascal"),V.assert("notations.assertPascal"));B.assertPascal=FX;var DX=Object.assign(EX,V.notations.pascal("isPascal"),V.is());B.isPascal=DX;var jX=Object.assign(UX,V.notations.pascal("validatePascal"),V.validate());B.validatePascal=jX;var yX=Object.assign(LX,V.notations.snake("snake"));B.snake=yX;var $X=Object.assign(MX,V.notations.snake("assertSnake"),V.assert("notations.assertSnake"));B.assertSnake=$X;var RX=Object.assign(SX,V.notations.snake("isSnake"),V.is());B.isSnake=RX;var NX=Object.assign(fX,V.notations.snake("validateSnake"),V.validate());B.validateSnake=NX;var hX=Object.assign(bX,V.notations.camel("createCamel"));B.createCamel=hX;var vX=Object.assign(PX,V.notations.camel("createAssertCamel"),V.assert("notations.createAssertCamel"));B.createAssertCamel=vX;var gX=Object.assign(_X,V.notations.camel("createIsCamel"),V.is());B.createIsCamel=gX;var cX=Object.assign(kX,V.notations.camel("createValidateCamel"),V.validate());B.createValidateCamel=cX;var lX=Object.assign(dX,V.notations.pascal("createPascal"));B.createPascal=lX;var mX=Object.assign(xX,V.notations.pascal("createAssertPascal"),V.assert("notations.createAssertPascal"));B.createAssertPascal=mX;var nX=Object.assign(uX,V.notations.pascal("createIsPascal"),V.is());B.createIsPascal=nX;var pX=Object.assign(iX,V.notations.pascal("createValidatePascal"),V.validate());B.createValidatePascal=pX;var aX=Object.assign(oX,V.notations.snake("createSnake"));B.createSnake=aX;var tX=Object.assign(sX,V.notations.snake("createAssertSnake"),V.assert("notations.createAssertSnake"));B.createAssertSnake=tX;var eX=Object.assign(rX,V.notations.snake("createIsSnake"),V.is());B.createIsSnake=eX;var H7=Object.assign(O7,V.notations.snake("createValidateSnake"),V.validate());B.createValidateSnake=H7});var B6=J((w)=>{var X7=function(){f("message")},J7=function(){f("decode")},Q7=function(){f("assertDecode")},T7=function(){f("isDecode")},z7=function(){f("validateDecode")},C7=function(){f("encode")},w7=function(){f("assertEncode")},G7=function(){f("isEncode")},E7=function(){f("validateEncode")},U7=function(){f("createDecode")},L7=function(){f("createIsDecode")},M7=function(){f("createAssertDecode")},S7=function(){f("createValidateDecode")},f7=function(){f("createEncode")},b7=function(){f("createIsEncode")},P7=function(){f("createAssertEncode")},_7=function(){f("createValidateEncode")},f=function(O){throw new Error("Error on typia.protobuf.".concat(O,"(): no transform has been configured. Read and follow https://typia.io/docs/setup please."))},K7=w&&w.__createBinding||(Object.create?function(O,H,K,Z){if(Z===void 0)Z=K;var Y=Object.getOwnPropertyDescriptor(H,K);if(!Y||("get"in Y?!H.__esModule:Y.writable||Y.configurable))Y={enumerable:!0,get:function(){return H[K]}};Object.defineProperty(O,Z,Y)}:function(O,H,K,Z){if(Z===void 0)Z=K;O[Z]=H[K]}),Z7=w&&w.__setModuleDefault||(Object.create?function(O,H){Object.defineProperty(O,"default",{enumerable:!0,value:H})}:function(O,H){O.default=H}),Y7=w&&w.__importStar||function(O){if(O&&O.__esModule)return O;var H={};if(O!=null){for(var K in O)if(K!=="default"&&Object.prototype.hasOwnProperty.call(O,K))K7(H,O,K)}return Z7(H,O),H};Object.defineProperty(w,"__esModule",{value:!0});w.createValidateEncode=w.createAssertEncode=w.createIsEncode=w.createEncode=w.createValidateDecode=w.createAssertDecode=w.createIsDecode=w.createDecode=w.validateEncode=w.isEncode=w.assertEncode=w.encode=w.validateDecode=w.isDecode=w.assertDecode=w.decode=w.message=void 0;var D=Y7(AO());w.message=X7;var A7=Object.assign(J7,D.protobuf.decode("decode"));w.decode=A7;var W7=Object.assign(Q7,D.assert("protobuf.assertDecode"),D.protobuf.decode("assertDecode"));w.assertDecode=W7;var B7=Object.assign(T7,D.is(),D.protobuf.decode("isDecode"));w.isDecode=B7;var I7=Object.assign(z7,D.validate(),D.protobuf.decode("validateDecode"));w.validateDecode=I7;var V7=Object.assign(C7,D.protobuf.encode("encode"));w.encode=V7;var q7=Object.assign(w7,D.assert("protobuf.assertEncode"),D.protobuf.encode("assertEncode"));w.assertEncode=q7;var F7=Object.assign(G7,D.is(),D.protobuf.encode("isEncode"));w.isEncode=F7;var D7=Object.assign(E7,D.validate(),D.protobuf.encode("validateEncode"));w.validateEncode=D7;var j7=Object.assign(U7,D.protobuf.decode("createDecode"));w.createDecode=j7;var y7=Object.assign(L7,D.is(),D.protobuf.decode("createIsDecode"));w.createIsDecode=y7;var $7=Object.assign(M7,D.assert("protobuf.createAssertDecode"),D.protobuf.decode("createAssertDecode"));w.createAssertDecode=$7;var R7=Object.assign(S7,D.validate(),D.protobuf.decode("createValidateDecode"));w.createValidateDecode=R7;var N7=Object.assign(f7,D.protobuf.encode("createEncode"));w.createEncode=N7;var h7=Object.assign(b7,D.is(),D.protobuf.encode("createIsEncode"));w.createIsEncode=h7;var v7=Object.assign(P7,D.assert("protobuf.createAssertEncode"),D.protobuf.encode("createAssertEncode"));w.createAssertEncode=v7;var g7=Object.assign(_7,D.validate(),D.protobuf.encode("createValidateEncode"));w.createValidateEncode=g7});var C6=J((z6)=>{var k7=function(){d7("metadata")},d7=function(O){throw new Error("Error on typia.reflect.".concat(O,"(): no transform has been configured. Read and follow https://typia.io/docs/setup please."))};Object.defineProperty(z6,"__esModule",{value:!0});z6.metadata=void 0;var c7=Object.assign(k7,{from:function(O){return O}});z6.metadata=c7});var w6=J((V6)=>{Object.defineProperty(V6,"__esModule",{value:!0})});var G6=J((q6)=>{Object.defineProperty(q6,"__esModule",{value:!0})});var E6=J((F6)=>{Object.defineProperty(F6,"__esModule",{value:!0})});var U6=J((D6)=>{Object.defineProperty(D6,"__esModule",{value:!0})});var L6=J((j6)=>{Object.defineProperty(j6,"__esModule",{value:!0})});var M6=J((y6)=>{Object.defineProperty(y6,"__esModule",{value:!0})});var S6=J(($6)=>{Object.defineProperty($6,"__esModule",{value:!0})});var f6=J((R6)=>{Object.defineProperty(R6,"__esModule",{value:!0})});var b6=J((N6)=>{Object.defineProperty(N6,"__esModule",{value:!0})});var P6=J((h6)=>{Object.defineProperty(h6,"__esModule",{value:!0})});var _6=J((v6)=>{Object.defineProperty(v6,"__esModule",{value:!0})});var k6=J((g6)=>{Object.defineProperty(g6,"__esModule",{value:!0})});var d6=J((c6)=>{Object.defineProperty(c6,"__esModule",{value:!0})});var x6=J((l6)=>{Object.defineProperty(l6,"__esModule",{value:!0})});var u6=J((m6)=>{Object.defineProperty(m6,"__esModule",{value:!0})});var i6=J((n6)=>{Object.defineProperty(n6,"__esModule",{value:!0})});var o6=J((p6)=>{Object.defineProperty(p6,"__esModule",{value:!0})});var s6=J((a6)=>{Object.defineProperty(a6,"__esModule",{value:!0})});var t6=J((y)=>{var l7=y&&y.__createBinding||(Object.create?function(O,H,K,Z){if(Z===void 0)Z=K;var Y=Object.getOwnPropertyDescriptor(H,K);if(!Y||("get"in Y?!H.__esModule:Y.writable||Y.configurable))Y={enumerable:!0,get:function(){return H[K]}};Object.defineProperty(O,Z,Y)}:function(O,H,K,Z){if(Z===void 0)Z=K;O[Z]=H[K]}),M=y&&y.__exportStar||function(O,H){for(var K in O)if(K!=="default"&&!Object.prototype.hasOwnProperty.call(H,K))l7(H,O,K)};Object.defineProperty(y,"__esModule",{value:!0});M(w6(),y);M(G6(),y);M(E6(),y);M(U6(),y);M(L6(),y);M(M6(),y);M(S6(),y);M(f6(),y);M(b6(),y);M(P6(),y);M(_6(),y);M(k6(),y);M(d6(),y);M(x6(),y);M(u6(),y);M(i6(),y);M(o6(),y);M(s6(),y)});var e6=J((r6)=>{Object.defineProperty(r6,"__esModule",{value:!0})});var H4=J((O4)=>{Object.defineProperty(O4,"__esModule",{value:!0})});var Z4=J((K4)=>{Object.defineProperty(K4,"__esModule",{value:!0})});var X4=J((Y4)=>{Object.defineProperty(Y4,"__esModule",{value:!0})});var A4=J((J4)=>{Object.defineProperty(J4,"__esModule",{value:!0})});var W4=J((Q4)=>{Object.defineProperty(Q4,"__esModule",{value:!0})});var B4=J((T4)=>{Object.defineProperty(T4,"__esModule",{value:!0})});var I4=J((z4)=>{Object.defineProperty(z4,"__esModule",{value:!0})});var V4=J((C4)=>{Object.defineProperty(C4,"__esModule",{value:!0})});var q4=J((w4)=>{Object.defineProperty(w4,"__esModule",{value:!0})});var mO=J((W)=>{var m7=function(){$("assert")},u7=function(){$("assertGuard")},n7=function(){$("is")},i7=function(){$("validate")},p7=function(){$("assertEquals")},o7=function(){$("assertGuardEquals")},a7=function(){$("equals")},s7=function(){$("validateEquals")},t7=function(){$("random")},r7=function(){$("createAssert")},OJ=function(){$("createAssertGuard")},KJ=function(){$("createIs")},YJ=function(){$("createValidate")},JJ=function(){$("createAssertEquals")},QJ=function(){$("createAssertGuardEquals")},TJ=function(){$("createEquals")},zJ=function(){$("createValidateEquals")},CJ=function(){$("createRandom")},$=function(O){throw new Error("Error on typia.".concat(O,"(): no transform has been configured. Read and follow https://typia.io/docs/setup please."))},G4=W&&W.__createBinding||(Object.create?function(O,H,K,Z){if(Z===void 0)Z=K;var Y=Object.getOwnPropertyDescriptor(H,K);if(!Y||("get"in Y?!H.__esModule:Y.writable||Y.configurable))Y={enumerable:!0,get:function(){return H[K]}};Object.defineProperty(O,Z,Y)}:function(O,H,K,Z){if(Z===void 0)Z=K;O[Z]=H[K]}),x7=W&&W.__setModuleDefault||(Object.create?function(O,H){Object.defineProperty(O,"default",{enumerable:!0,value:H})}:function(O,H){O.default=H}),OO=W&&W.__importStar||function(O){if(O&&O.__esModule)return O;var H={};if(O!=null){for(var K in O)if(K!=="default"&&Object.prototype.hasOwnProperty.call(O,K))G4(H,O,K)}return x7(H,O),H},g=W&&W.__exportStar||function(O,H){for(var K in O)if(K!=="default"&&!Object.prototype.hasOwnProperty.call(H,K))G4(H,O,K)};Object.defineProperty(W,"__esModule",{value:!0});W.createRandom=W.createValidateEquals=W.createEquals=W.createAssertGuardEquals=W.createAssertEquals=W.createValidate=W.createIs=W.createAssertGuard=W.createAssert=W.random=W.validateEquals=W.equals=W.assertGuardEquals=W.assertEquals=W.validate=W.is=W.assertGuard=W.assert=W.tags=W.reflect=W.protobuf=W.notations=W.misc=W.json=W.http=W.functional=void 0;var HO=OO(AO());W.functional=OO(n5());W.http=OO(i5());W.json=OO(O6());W.misc=OO(W6());W.notations=OO(T6());W.protobuf=OO(B6());W.reflect=OO(C6());W.tags=OO(t6());g(e6(),W);g(H4(),W);g(Z4(),W);g(X4(),W);g(A4(),W);g(TO(),W);g(W4(),W);g(B4(),W);g(I4(),W);g(V4(),W);g(q4(),W);var F4=Object.assign(m7,HO.assert("assert"));W.assert=F4;var E4=Object.assign(u7,HO.assert("assertGuard"));W.assertGuard=E4;var D4=Object.assign(n7,HO.assert("is"));W.is=D4;var U4=Object.assign(i7,HO.validate());W.validate=U4;var j4=Object.assign(p7,HO.assert("assertEquals"));W.assertEquals=j4;var L4=Object.assign(o7,HO.assert("assertGuardEquals"));W.assertGuardEquals=L4;var y4=Object.assign(a7,HO.is());W.equals=y4;var M4=Object.assign(s7,HO.validate());W.validateEquals=M4;var $4=Object.assign(t7,HO.random());W.random=$4;var e7=Object.assign(r7,F4);W.createAssert=e7;var HJ=Object.assign(OJ,E4);W.createAssertGuard=HJ;var ZJ=Object.assign(KJ,D4);W.createIs=ZJ;var XJ=Object.assign(YJ,U4);W.createValidate=XJ;var AJ=Object.assign(JJ,j4);W.createAssertEquals=AJ;var WJ=Object.assign(QJ,L4);W.createAssertGuardEquals=WJ;var BJ=Object.assign(TJ,y4);W.createEquals=BJ;var IJ=Object.assign(zJ,M4);W.createValidateEquals=IJ;var VJ=Object.assign(CJ,$4);W.createRandom=VJ});var EJ=J((_)=>{var S4=_&&_.__createBinding||(Object.create?function(O,H,K,Z){if(Z===void 0)Z=K;var Y=Object.getOwnPropertyDescriptor(H,K);if(!Y||("get"in Y?!H.__esModule:Y.writable||Y.configurable))Y={enumerable:!0,get:function(){return H[K]}};Object.defineProperty(O,Z,Y)}:function(O,H,K,Z){if(Z===void 0)Z=K;O[Z]=H[K]}),wJ=_&&_.__setModuleDefault||(Object.create?function(O,H){Object.defineProperty(O,"default",{enumerable:!0,value:H})}:function(O,H){O.default=H}),qJ=_&&_.__importStar||function(O){if(O&&O.__esModule)return O;var H={};if(O!=null){for(var K in O)if(K!=="default"&&Object.prototype.hasOwnProperty.call(O,K))S4(H,O,K)}return wJ(H,O),H},GJ=_&&_.__exportStar||function(O,H){for(var K in O)if(K!=="default"&&!Object.prototype.hasOwnProperty.call(H,K))S4(H,O,K)};Object.defineProperty(_,"__esModule",{value:!0});var FJ=qJ(mO());_.default=FJ;GJ(mO(),_)});
export{EJ as a};

//# debugId=C18B36473918B9D864756e2164756e21
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vbm9kZV9tb2R1bGVzL3JldC9saWIvdHlwZXMuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3JldC9saWIvc2V0cy5qcyIsICIuLi9ub2RlX21vZHVsZXMvcmV0L2xpYi91dGlsLmpzIiwgIi4uL25vZGVfbW9kdWxlcy9yZXQvbGliL3Bvc2l0aW9ucy5qcyIsICIuLi9ub2RlX21vZHVsZXMvcmV0L2xpYi9pbmRleC5qcyIsICIuLi9ub2RlX21vZHVsZXMvZHJhbmdlL2xpYi9pbmRleC5qcyIsICIuLi9ub2RlX21vZHVsZXMvcmFuZGV4cC9saWIvcmFuZGV4cC5qcyIsICIuLi9ub2RlX21vZHVsZXMvdHlwaWEvbGliL3V0aWxzL1JhbmRvbUdlbmVyYXRvci9SYW5kb21HZW5lcmF0b3IuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3R5cGlhL2xpYi91dGlscy9SYW5kb21HZW5lcmF0b3IvaW5kZXguanMiLCAiLi4vbm9kZV9tb2R1bGVzL3R5cGlhL2xpYi9mdW5jdGlvbmFsLyRldmVyeS5qcyIsICIuLi9ub2RlX21vZHVsZXMvdHlwaWEvbGliL1R5cGVHdWFyZEVycm9yLmpzIiwgIi4uL25vZGVfbW9kdWxlcy90eXBpYS9saWIvZnVuY3Rpb25hbC8kZ3VhcmQuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3R5cGlhL2xpYi9mdW5jdGlvbmFsLyRqb2luLmpzIiwgIi4uL25vZGVfbW9kdWxlcy90eXBpYS9saWIvZnVuY3Rpb25hbC8kcmVwb3J0LmpzIiwgIi4uL25vZGVfbW9kdWxlcy90eXBpYS9saWIvZnVuY3Rpb25hbC8kaXNfYmV0d2Vlbi5qcyIsICIuLi9ub2RlX21vZHVsZXMvdHlwaWEvbGliL2Z1bmN0aW9uYWwvJHN0b2xsLmpzIiwgIi4uL25vZGVfbW9kdWxlcy90eXBpYS9saWIvZnVuY3Rpb25hbC9pcy5qcyIsICIuLi9ub2RlX21vZHVsZXMvdHlwaWEvbGliL2Z1bmN0aW9uYWwvTmFtZXNwYWNlL2Z1bmN0aW9uYWwuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3R5cGlhL2xpYi9mdW5jdGlvbmFsLyRudW1iZXIuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3R5cGlhL2xpYi9mdW5jdGlvbmFsLyRyZXN0LmpzIiwgIi4uL25vZGVfbW9kdWxlcy90eXBpYS9saWIvZnVuY3Rpb25hbC8kc3RyaW5nLmpzIiwgIi4uL25vZGVfbW9kdWxlcy90eXBpYS9saWIvZnVuY3Rpb25hbC8kdGFpbC5qcyIsICIuLi9ub2RlX21vZHVsZXMvdHlwaWEvbGliL2Z1bmN0aW9uYWwvJHRocm93cy5qcyIsICIuLi9ub2RlX21vZHVsZXMvdHlwaWEvbGliL2Z1bmN0aW9uYWwvTmFtZXNwYWNlL2pzb24uanMiLCAiLi4vbm9kZV9tb2R1bGVzL3R5cGlhL2xpYi9mdW5jdGlvbmFsLyRGb3JtRGF0YVJlYWRlci8kRm9ybURhdGFSZWFkZXIuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3R5cGlhL2xpYi9mdW5jdGlvbmFsLyRGb3JtRGF0YVJlYWRlci9pbmRleC5qcyIsICIuLi9ub2RlX21vZHVsZXMvdHlwaWEvbGliL2Z1bmN0aW9uYWwvJEhlYWRlcnNSZWFkZXIvJEhlYWRlcnNSZWFkZXIuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3R5cGlhL2xpYi9mdW5jdGlvbmFsLyRIZWFkZXJzUmVhZGVyL2luZGV4LmpzIiwgIi4uL25vZGVfbW9kdWxlcy90eXBpYS9saWIvZnVuY3Rpb25hbC8kUGFyYW1ldGVyUmVhZGVyLyRQYXJhbWV0ZXJSZWFkZXIuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3R5cGlhL2xpYi9mdW5jdGlvbmFsLyRQYXJhbWV0ZXJSZWFkZXIvaW5kZXguanMiLCAiLi4vbm9kZV9tb2R1bGVzL3R5cGlhL2xpYi9mdW5jdGlvbmFsLyRRdWVyeVJlYWRlci8kUXVlcnlSZWFkZXIuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3R5cGlhL2xpYi9mdW5jdGlvbmFsLyRRdWVyeVJlYWRlci9pbmRleC5qcyIsICIuLi9ub2RlX21vZHVsZXMvdHlwaWEvbGliL2Z1bmN0aW9uYWwvTmFtZXNwYWNlL2h0dHAuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3R5cGlhL2xpYi91dGlscy9TdHJpbmdVdGlsL1N0cmluZ1V0aWwuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3R5cGlhL2xpYi91dGlscy9TdHJpbmdVdGlsL2luZGV4LmpzIiwgIi4uL25vZGVfbW9kdWxlcy90eXBpYS9saWIvdXRpbHMvTmFtaW5nQ29udmVudGlvbi9OYW1pbmdDb252ZW50aW9uLmpzIiwgIi4uL25vZGVfbW9kdWxlcy90eXBpYS9saWIvdXRpbHMvTmFtaW5nQ29udmVudGlvbi9pbmRleC5qcyIsICIuLi9ub2RlX21vZHVsZXMvdHlwaWEvbGliL2Z1bmN0aW9uYWwvJGNvbnZlbnRpb24uanMiLCAiLi4vbm9kZV9tb2R1bGVzL3R5cGlhL2xpYi9mdW5jdGlvbmFsL05hbWVzcGFjZS9ub3RhdGlvbnMuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3R5cGlhL2xpYi9mdW5jdGlvbmFsLyRjbG9uZS5qcyIsICIuLi9ub2RlX21vZHVsZXMvdHlwaWEvbGliL2Z1bmN0aW9uYWwvJGFueS5qcyIsICIuLi9ub2RlX21vZHVsZXMvdHlwaWEvbGliL2Z1bmN0aW9uYWwvTmFtZXNwYWNlL21pc2MuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3R5cGlhL2xpYi9mdW5jdGlvbmFsLyRQcm90b2J1ZlJlYWRlci5qcyIsICIuLi9ub2RlX21vZHVsZXMvdHlwaWEvbGliL2Z1bmN0aW9uYWwvJHN0cmxlbi5qcyIsICIuLi9ub2RlX21vZHVsZXMvdHlwaWEvbGliL2Z1bmN0aW9uYWwvJFByb3RvYnVmU2l6ZXIuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3R5cGlhL2xpYi9mdW5jdGlvbmFsLyRQcm90b2J1ZldyaXRlci5qcyIsICIuLi9ub2RlX21vZHVsZXMvdHlwaWEvbGliL2Z1bmN0aW9uYWwvTmFtZXNwYWNlL3Byb3RvYnVmLmpzIiwgIi4uL25vZGVfbW9kdWxlcy90eXBpYS9saWIvZnVuY3Rpb25hbC9OYW1lc3BhY2UvaW5kZXguanMiLCAiLi4vbm9kZV9tb2R1bGVzL3R5cGlhL2xpYi9mdW5jdGlvbmFsLmpzIiwgIi4uL25vZGVfbW9kdWxlcy90eXBpYS9saWIvaHR0cC5qcyIsICIuLi9ub2RlX21vZHVsZXMvdHlwaWEvbGliL2pzb24uanMiLCAiLi4vbm9kZV9tb2R1bGVzL3R5cGlhL2xpYi9taXNjLmpzIiwgIi4uL25vZGVfbW9kdWxlcy90eXBpYS9saWIvbm90YXRpb25zLmpzIiwgIi4uL25vZGVfbW9kdWxlcy90eXBpYS9saWIvcHJvdG9idWYuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3R5cGlhL2xpYi9yZWZsZWN0LmpzIiwgIi4uL25vZGVfbW9kdWxlcy90eXBpYS9saWIvdGFncy9Db25zdGFudC5qcyIsICIuLi9ub2RlX21vZHVsZXMvdHlwaWEvbGliL3RhZ3MvQ29udGVudE1lZGlhVHlwZS5qcyIsICIuLi9ub2RlX21vZHVsZXMvdHlwaWEvbGliL3RhZ3MvRGVmYXVsdC5qcyIsICIuLi9ub2RlX21vZHVsZXMvdHlwaWEvbGliL3RhZ3MvRXhjbHVzaXZlTWF4aW11bS5qcyIsICIuLi9ub2RlX21vZHVsZXMvdHlwaWEvbGliL3RhZ3MvRXhjbHVzaXZlTWluaW11bS5qcyIsICIuLi9ub2RlX21vZHVsZXMvdHlwaWEvbGliL3RhZ3MvRm9ybWF0LmpzIiwgIi4uL25vZGVfbW9kdWxlcy90eXBpYS9saWIvdGFncy9Kc29uU2NoZW1hUGx1Z2luLmpzIiwgIi4uL25vZGVfbW9kdWxlcy90eXBpYS9saWIvdGFncy9NYXhpbXVtLmpzIiwgIi4uL25vZGVfbW9kdWxlcy90eXBpYS9saWIvdGFncy9NYXhJdGVtcy5qcyIsICIuLi9ub2RlX21vZHVsZXMvdHlwaWEvbGliL3RhZ3MvTWF4TGVuZ3RoLmpzIiwgIi4uL25vZGVfbW9kdWxlcy90eXBpYS9saWIvdGFncy9NaW5pbXVtLmpzIiwgIi4uL25vZGVfbW9kdWxlcy90eXBpYS9saWIvdGFncy9NaW5JdGVtcy5qcyIsICIuLi9ub2RlX21vZHVsZXMvdHlwaWEvbGliL3RhZ3MvTWluTGVuZ3RoLmpzIiwgIi4uL25vZGVfbW9kdWxlcy90eXBpYS9saWIvdGFncy9NdWx0aXBsZU9mLmpzIiwgIi4uL25vZGVfbW9kdWxlcy90eXBpYS9saWIvdGFncy9QYXR0ZXJuLmpzIiwgIi4uL25vZGVfbW9kdWxlcy90eXBpYS9saWIvdGFncy9UYWdCYXNlLmpzIiwgIi4uL25vZGVfbW9kdWxlcy90eXBpYS9saWIvdGFncy9UeXBlLmpzIiwgIi4uL25vZGVfbW9kdWxlcy90eXBpYS9saWIvdGFncy9VbmlxdWVJdGVtcy5qcyIsICIuLi9ub2RlX21vZHVsZXMvdHlwaWEvbGliL3RhZ3MvaW5kZXguanMiLCAiLi4vbm9kZV9tb2R1bGVzL3R5cGlhL2xpYi9zY2hlbWFzL21ldGFkYXRhL0lKc0RvY1RhZ0luZm8uanMiLCAiLi4vbm9kZV9tb2R1bGVzL3R5cGlhL2xpYi9zY2hlbWFzL2pzb24vSUpzb25BcHBsaWNhdGlvbi5qcyIsICIuLi9ub2RlX21vZHVsZXMvdHlwaWEvbGliL0Fzc2VydGlvbkd1YXJkLmpzIiwgIi4uL25vZGVfbW9kdWxlcy90eXBpYS9saWIvSVJhbmRvbUdlbmVyYXRvci5qcyIsICIuLi9ub2RlX21vZHVsZXMvdHlwaWEvbGliL0lWYWxpZGF0aW9uLmpzIiwgIi4uL25vZGVfbW9kdWxlcy90eXBpYS9saWIvUHJpbWl0aXZlLmpzIiwgIi4uL25vZGVfbW9kdWxlcy90eXBpYS9saWIvUmVzb2x2ZWQuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3R5cGlhL2xpYi9DYW1lbENhc2UuanMiLCAiLi4vbm9kZV9tb2R1bGVzL3R5cGlhL2xpYi9QYXNjYWxDYXNlLmpzIiwgIi4uL25vZGVfbW9kdWxlcy90eXBpYS9saWIvU25ha2VDYXNlLmpzIiwgIi4uL25vZGVfbW9kdWxlcy90eXBpYS9saWIvbW9kdWxlLmpzIiwgIi4uL25vZGVfbW9kdWxlcy90eXBpYS9saWIvaW5kZXguanMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbCiAgICAibW9kdWxlLmV4cG9ydHMgPSB7XG4gIFJPT1QgICAgICAgOiAwLFxuICBHUk9VUCAgICAgIDogMSxcbiAgUE9TSVRJT04gICA6IDIsXG4gIFNFVCAgICAgICAgOiAzLFxuICBSQU5HRSAgICAgIDogNCxcbiAgUkVQRVRJVElPTiA6IDUsXG4gIFJFRkVSRU5DRSAgOiA2LFxuICBDSEFSICAgICAgIDogNyxcbn07XG4iLAogICAgImNvbnN0IHR5cGVzID0gcmVxdWlyZSgnLi90eXBlcycpO1xuXG5jb25zdCBJTlRTID0gKCkgPT4gW3sgdHlwZTogdHlwZXMuUkFOR0UgLCBmcm9tOiA0OCwgdG86IDU3IH1dO1xuXG5jb25zdCBXT1JEUyA9ICgpID0+IHtcbiAgcmV0dXJuIFtcbiAgICB7IHR5cGU6IHR5cGVzLkNIQVIsIHZhbHVlOiA5NSB9LFxuICAgIHsgdHlwZTogdHlwZXMuUkFOR0UsIGZyb206IDk3LCB0bzogMTIyIH0sXG4gICAgeyB0eXBlOiB0eXBlcy5SQU5HRSwgZnJvbTogNjUsIHRvOiA5MCB9XG4gIF0uY29uY2F0KElOVFMoKSk7XG59O1xuXG5jb25zdCBXSElURVNQQUNFID0gKCkgPT4ge1xuICByZXR1cm4gW1xuICAgIHsgdHlwZTogdHlwZXMuQ0hBUiwgdmFsdWU6IDkgfSxcbiAgICB7IHR5cGU6IHR5cGVzLkNIQVIsIHZhbHVlOiAxMCB9LFxuICAgIHsgdHlwZTogdHlwZXMuQ0hBUiwgdmFsdWU6IDExIH0sXG4gICAgeyB0eXBlOiB0eXBlcy5DSEFSLCB2YWx1ZTogMTIgfSxcbiAgICB7IHR5cGU6IHR5cGVzLkNIQVIsIHZhbHVlOiAxMyB9LFxuICAgIHsgdHlwZTogdHlwZXMuQ0hBUiwgdmFsdWU6IDMyIH0sXG4gICAgeyB0eXBlOiB0eXBlcy5DSEFSLCB2YWx1ZTogMTYwIH0sXG4gICAgeyB0eXBlOiB0eXBlcy5DSEFSLCB2YWx1ZTogNTc2MCB9LFxuICAgIHsgdHlwZTogdHlwZXMuUkFOR0UsIGZyb206IDgxOTIsIHRvOiA4MjAyIH0sXG4gICAgeyB0eXBlOiB0eXBlcy5DSEFSLCB2YWx1ZTogODIzMiB9LFxuICAgIHsgdHlwZTogdHlwZXMuQ0hBUiwgdmFsdWU6IDgyMzMgfSxcbiAgICB7IHR5cGU6IHR5cGVzLkNIQVIsIHZhbHVlOiA4MjM5IH0sXG4gICAgeyB0eXBlOiB0eXBlcy5DSEFSLCB2YWx1ZTogODI4NyB9LFxuICAgIHsgdHlwZTogdHlwZXMuQ0hBUiwgdmFsdWU6IDEyMjg4IH0sXG4gICAgeyB0eXBlOiB0eXBlcy5DSEFSLCB2YWx1ZTogNjUyNzkgfVxuICBdO1xufTtcblxuY29uc3QgTk9UQU5ZQ0hBUiA9ICgpID0+IHtcbiAgcmV0dXJuIFtcbiAgICB7IHR5cGU6IHR5cGVzLkNIQVIsIHZhbHVlOiAxMCB9LFxuICAgIHsgdHlwZTogdHlwZXMuQ0hBUiwgdmFsdWU6IDEzIH0sXG4gICAgeyB0eXBlOiB0eXBlcy5DSEFSLCB2YWx1ZTogODIzMiB9LFxuICAgIHsgdHlwZTogdHlwZXMuQ0hBUiwgdmFsdWU6IDgyMzMgfSxcbiAgXTtcbn07XG5cbi8vIFByZWRlZmluZWQgY2xhc3Mgb2JqZWN0cy5cbmV4cG9ydHMud29yZHMgPSAoKSA9PiAoeyB0eXBlOiB0eXBlcy5TRVQsIHNldDogV09SRFMoKSwgbm90OiBmYWxzZSB9KTtcbmV4cG9ydHMubm90V29yZHMgPSAoKSA9PiAoeyB0eXBlOiB0eXBlcy5TRVQsIHNldDogV09SRFMoKSwgbm90OiB0cnVlIH0pO1xuZXhwb3J0cy5pbnRzID0gKCkgPT4gKHsgdHlwZTogdHlwZXMuU0VULCBzZXQ6IElOVFMoKSwgbm90OiBmYWxzZSB9KTtcbmV4cG9ydHMubm90SW50cyA9ICgpID0+ICh7IHR5cGU6IHR5cGVzLlNFVCwgc2V0OiBJTlRTKCksIG5vdDogdHJ1ZSB9KTtcbmV4cG9ydHMud2hpdGVzcGFjZSA9ICgpID0+ICh7IHR5cGU6IHR5cGVzLlNFVCwgc2V0OiBXSElURVNQQUNFKCksIG5vdDogZmFsc2UgfSk7XG5leHBvcnRzLm5vdFdoaXRlc3BhY2UgPSAoKSA9PiAoeyB0eXBlOiB0eXBlcy5TRVQsIHNldDogV0hJVEVTUEFDRSgpLCBub3Q6IHRydWUgfSk7XG5leHBvcnRzLmFueUNoYXIgPSAoKSA9PiAoeyB0eXBlOiB0eXBlcy5TRVQsIHNldDogTk9UQU5ZQ0hBUigpLCBub3Q6IHRydWUgfSk7XG4iLAogICAgImNvbnN0IHR5cGVzID0gcmVxdWlyZSgnLi90eXBlcycpO1xuY29uc3Qgc2V0cyAgPSByZXF1aXJlKCcuL3NldHMnKTtcblxuXG5jb25zdCBDVFJMID0gJ0BBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWltcXFxcXV4gPyc7XG5jb25zdCBTTFNIID0geyAnMCc6IDAsICd0JzogOSwgJ24nOiAxMCwgJ3YnOiAxMSwgJ2YnOiAxMiwgJ3InOiAxMyB9O1xuXG4vKipcbiAqIEZpbmRzIGNoYXJhY3RlciByZXByZXNlbnRhdGlvbnMgaW4gc3RyIGFuZCBjb252ZXJ0IGFsbCB0b1xuICogdGhlaXIgcmVzcGVjdGl2ZSBjaGFyYWN0ZXJzXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7U3RyaW5nfVxuICovXG5leHBvcnRzLnN0clRvQ2hhcnMgPSBmdW5jdGlvbihzdHIpIHtcbiAgLyoganNoaW50IG1heGxlbjogZmFsc2UgKi9cbiAgdmFyIGNoYXJzX3JlZ2V4ID0gLyhcXFtcXFxcYlxcXSl8KFxcXFwpP1xcXFwoPzp1KFtBLUYwLTldezR9KXx4KFtBLUYwLTldezJ9KXwoMD9bMC03XXsyfSl8YyhbQEEtWltcXFxcXFxdXj9dKXwoWzB0bnZmcl0pKS9nO1xuICBzdHIgPSBzdHIucmVwbGFjZShjaGFyc19yZWdleCwgZnVuY3Rpb24ocywgYiwgbGJzLCBhMTYsIGIxNiwgYzgsIGRjdHJsLCBlc2xzaCkge1xuICAgIGlmIChsYnMpIHtcbiAgICAgIHJldHVybiBzO1xuICAgIH1cblxuICAgIHZhciBjb2RlID0gYiA/IDggOlxuICAgICAgYTE2ICAgPyBwYXJzZUludChhMTYsIDE2KSA6XG4gICAgICBiMTYgICA/IHBhcnNlSW50KGIxNiwgMTYpIDpcbiAgICAgIGM4ICAgID8gcGFyc2VJbnQoYzgsICAgOCkgOlxuICAgICAgZGN0cmwgPyBDVFJMLmluZGV4T2YoZGN0cmwpIDpcbiAgICAgIFNMU0hbZXNsc2hdO1xuXG4gICAgdmFyIGMgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpO1xuXG4gICAgLy8gRXNjYXBlIHNwZWNpYWwgcmVnZXggY2hhcmFjdGVycy5cbiAgICBpZiAoL1tbXFxde31eJC58PyorKCldLy50ZXN0KGMpKSB7XG4gICAgICBjID0gJ1xcXFwnICsgYztcbiAgICB9XG5cbiAgICByZXR1cm4gYztcbiAgfSk7XG5cbiAgcmV0dXJuIHN0cjtcbn07XG5cblxuLyoqXG4gKiB0dXJucyBjbGFzcyBpbnRvIHRva2Vuc1xuICogcmVhZHMgc3RyIHVudGlsIGl0IGVuY291bnRlcnMgYSBdIG5vdCBwcmVjZWVkZWQgYnkgYSBcXFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEBwYXJhbSB7U3RyaW5nfSByZWdleHBTdHJcbiAqIEByZXR1cm4ge0FycmF5LjxBcnJheS48T2JqZWN0PiwgTnVtYmVyPn1cbiAqL1xuZXhwb3J0cy50b2tlbml6ZUNsYXNzID0gKHN0ciwgcmVnZXhwU3RyKSA9PiB7XG4gIC8qIGpzaGludCBtYXhsZW46IGZhbHNlICovXG4gIHZhciB0b2tlbnMgPSBbXTtcbiAgdmFyIHJlZ2V4cCA9IC9cXFxcKD86KHcpfChkKXwocyl8KFcpfChEKXwoUykpfCgoPzooPzpcXFxcKSguKXwoW15cXF1cXFxcXSkpLSg/OlxcXFwpPyhbXlxcXV0pKXwoXFxdKXwoPzpcXFxcKT8oW15dKS9nO1xuICB2YXIgcnMsIGM7XG5cblxuICB3aGlsZSAoKHJzID0gcmVnZXhwLmV4ZWMoc3RyKSkgIT0gbnVsbCkge1xuICAgIGlmIChyc1sxXSkge1xuICAgICAgdG9rZW5zLnB1c2goc2V0cy53b3JkcygpKTtcblxuICAgIH0gZWxzZSBpZiAocnNbMl0pIHtcbiAgICAgIHRva2Vucy5wdXNoKHNldHMuaW50cygpKTtcblxuICAgIH0gZWxzZSBpZiAocnNbM10pIHtcbiAgICAgIHRva2Vucy5wdXNoKHNldHMud2hpdGVzcGFjZSgpKTtcblxuICAgIH0gZWxzZSBpZiAocnNbNF0pIHtcbiAgICAgIHRva2Vucy5wdXNoKHNldHMubm90V29yZHMoKSk7XG5cbiAgICB9IGVsc2UgaWYgKHJzWzVdKSB7XG4gICAgICB0b2tlbnMucHVzaChzZXRzLm5vdEludHMoKSk7XG5cbiAgICB9IGVsc2UgaWYgKHJzWzZdKSB7XG4gICAgICB0b2tlbnMucHVzaChzZXRzLm5vdFdoaXRlc3BhY2UoKSk7XG5cbiAgICB9IGVsc2UgaWYgKHJzWzddKSB7XG4gICAgICB0b2tlbnMucHVzaCh7XG4gICAgICAgIHR5cGU6IHR5cGVzLlJBTkdFLFxuICAgICAgICBmcm9tOiAocnNbOF0gfHwgcnNbOV0pLmNoYXJDb2RlQXQoMCksXG4gICAgICAgIHRvOiByc1sxMF0uY2hhckNvZGVBdCgwKSxcbiAgICAgIH0pO1xuXG4gICAgfSBlbHNlIGlmICgoYyA9IHJzWzEyXSkpIHtcbiAgICAgIHRva2Vucy5wdXNoKHtcbiAgICAgICAgdHlwZTogdHlwZXMuQ0hBUixcbiAgICAgICAgdmFsdWU6IGMuY2hhckNvZGVBdCgwKSxcbiAgICAgIH0pO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBbdG9rZW5zLCByZWdleHAubGFzdEluZGV4XTtcbiAgICB9XG4gIH1cblxuICBleHBvcnRzLmVycm9yKHJlZ2V4cFN0ciwgJ1VudGVybWluYXRlZCBjaGFyYWN0ZXIgY2xhc3MnKTtcbn07XG5cblxuLyoqXG4gKiBTaG9ydGN1dCB0byB0aHJvdyBlcnJvcnMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHJlZ2V4cFxuICogQHBhcmFtIHtTdHJpbmd9IG1zZ1xuICovXG5leHBvcnRzLmVycm9yID0gKHJlZ2V4cCwgbXNnKSA9PiB7XG4gIHRocm93IG5ldyBTeW50YXhFcnJvcignSW52YWxpZCByZWd1bGFyIGV4cHJlc3Npb246IC8nICsgcmVnZXhwICsgJy86ICcgKyBtc2cpO1xufTtcbiIsCiAgICAiY29uc3QgdHlwZXMgPSByZXF1aXJlKCcuL3R5cGVzJyk7XG5leHBvcnRzLndvcmRCb3VuZGFyeSA9ICgpID0+ICh7IHR5cGU6IHR5cGVzLlBPU0lUSU9OLCB2YWx1ZTogJ2InIH0pO1xuZXhwb3J0cy5ub25Xb3JkQm91bmRhcnkgPSAoKSA9PiAoeyB0eXBlOiB0eXBlcy5QT1NJVElPTiwgdmFsdWU6ICdCJyB9KTtcbmV4cG9ydHMuYmVnaW4gPSAoKSA9PiAoeyB0eXBlOiB0eXBlcy5QT1NJVElPTiwgdmFsdWU6ICdeJyB9KTtcbmV4cG9ydHMuZW5kID0gKCkgPT4gKHsgdHlwZTogdHlwZXMuUE9TSVRJT04sIHZhbHVlOiAnJCcgfSk7XG4iLAogICAgImNvbnN0IHV0aWwgICAgICA9IHJlcXVpcmUoJy4vdXRpbCcpO1xuY29uc3QgdHlwZXMgICAgID0gcmVxdWlyZSgnLi90eXBlcycpO1xuY29uc3Qgc2V0cyAgICAgID0gcmVxdWlyZSgnLi9zZXRzJyk7XG5jb25zdCBwb3NpdGlvbnMgPSByZXF1aXJlKCcuL3Bvc2l0aW9ucycpO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gKHJlZ2V4cFN0cikgPT4ge1xuICB2YXIgaSA9IDAsIGwsIGMsXG4gICAgc3RhcnQgPSB7IHR5cGU6IHR5cGVzLlJPT1QsIHN0YWNrOiBbXX0sXG5cbiAgICAvLyBLZWVwIHRyYWNrIG9mIGxhc3QgY2xhdXNlL2dyb3VwIGFuZCBzdGFjay5cbiAgICBsYXN0R3JvdXAgPSBzdGFydCxcbiAgICBsYXN0ID0gc3RhcnQuc3RhY2ssXG4gICAgZ3JvdXBTdGFjayA9IFtdO1xuXG5cbiAgdmFyIHJlcGVhdEVyciA9IChpKSA9PiB7XG4gICAgdXRpbC5lcnJvcihyZWdleHBTdHIsIGBOb3RoaW5nIHRvIHJlcGVhdCBhdCBjb2x1bW4gJHtpIC0gMX1gKTtcbiAgfTtcblxuICAvLyBEZWNvZGUgYSBmZXcgZXNjYXBlZCBjaGFyYWN0ZXJzLlxuICB2YXIgc3RyID0gdXRpbC5zdHJUb0NoYXJzKHJlZ2V4cFN0cik7XG4gIGwgPSBzdHIubGVuZ3RoO1xuXG4gIC8vIEl0ZXJhdGUgdGhyb3VnaCBlYWNoIGNoYXJhY3RlciBpbiBzdHJpbmcuXG4gIHdoaWxlIChpIDwgbCkge1xuICAgIGMgPSBzdHJbaSsrXTtcblxuICAgIHN3aXRjaCAoYykge1xuICAgICAgLy8gSGFuZGxlIGVzY2FwZWQgY2hhcmFjdGVycywgaW5jbHVlcyBhIGZldyBzZXRzLlxuICAgICAgY2FzZSAnXFxcXCc6XG4gICAgICAgIGMgPSBzdHJbaSsrXTtcblxuICAgICAgICBzd2l0Y2ggKGMpIHtcbiAgICAgICAgICBjYXNlICdiJzpcbiAgICAgICAgICAgIGxhc3QucHVzaChwb3NpdGlvbnMud29yZEJvdW5kYXJ5KCkpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICdCJzpcbiAgICAgICAgICAgIGxhc3QucHVzaChwb3NpdGlvbnMubm9uV29yZEJvdW5kYXJ5KCkpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICd3JzpcbiAgICAgICAgICAgIGxhc3QucHVzaChzZXRzLndvcmRzKCkpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICdXJzpcbiAgICAgICAgICAgIGxhc3QucHVzaChzZXRzLm5vdFdvcmRzKCkpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgIGxhc3QucHVzaChzZXRzLmludHMoKSk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgICAgbGFzdC5wdXNoKHNldHMubm90SW50cygpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAncyc6XG4gICAgICAgICAgICBsYXN0LnB1c2goc2V0cy53aGl0ZXNwYWNlKCkpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICdTJzpcbiAgICAgICAgICAgIGxhc3QucHVzaChzZXRzLm5vdFdoaXRlc3BhY2UoKSk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAvLyBDaGVjayBpZiBjIGlzIGludGVnZXIuXG4gICAgICAgICAgICAvLyBJbiB3aGljaCBjYXNlIGl0J3MgYSByZWZlcmVuY2UuXG4gICAgICAgICAgICBpZiAoL1xcZC8udGVzdChjKSkge1xuICAgICAgICAgICAgICBsYXN0LnB1c2goeyB0eXBlOiB0eXBlcy5SRUZFUkVOQ0UsIHZhbHVlOiBwYXJzZUludChjLCAxMCkgfSk7XG5cbiAgICAgICAgICAgIC8vIEVzY2FwZWQgY2hhcmFjdGVyLlxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbGFzdC5wdXNoKHsgdHlwZTogdHlwZXMuQ0hBUiwgdmFsdWU6IGMuY2hhckNvZGVBdCgwKSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuXG5cbiAgICAgIC8vIFBvc2l0aW9uYWxzLlxuICAgICAgY2FzZSAnXic6XG4gICAgICAgIGxhc3QucHVzaChwb3NpdGlvbnMuYmVnaW4oKSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICckJzpcbiAgICAgICAgbGFzdC5wdXNoKHBvc2l0aW9ucy5lbmQoKSk7XG4gICAgICAgIGJyZWFrO1xuXG5cbiAgICAgIC8vIEhhbmRsZSBjdXN0b20gc2V0cy5cbiAgICAgIGNhc2UgJ1snOlxuICAgICAgICAvLyBDaGVjayBpZiB0aGlzIGNsYXNzIGlzICdhbnRpJyBpLmUuIFteYWJjXS5cbiAgICAgICAgdmFyIG5vdDtcbiAgICAgICAgaWYgKHN0cltpXSA9PT0gJ14nKSB7XG4gICAgICAgICAgbm90ID0gdHJ1ZTtcbiAgICAgICAgICBpKys7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbm90ID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBHZXQgYWxsIHRoZSBjaGFyYWN0ZXJzIGluIGNsYXNzLlxuICAgICAgICB2YXIgY2xhc3NUb2tlbnMgPSB1dGlsLnRva2VuaXplQ2xhc3Moc3RyLnNsaWNlKGkpLCByZWdleHBTdHIpO1xuXG4gICAgICAgIC8vIEluY3JlYXNlIGluZGV4IGJ5IGxlbmd0aCBvZiBjbGFzcy5cbiAgICAgICAgaSArPSBjbGFzc1Rva2Vuc1sxXTtcbiAgICAgICAgbGFzdC5wdXNoKHtcbiAgICAgICAgICB0eXBlOiB0eXBlcy5TRVQsXG4gICAgICAgICAgc2V0OiBjbGFzc1Rva2Vuc1swXSxcbiAgICAgICAgICBub3QsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGJyZWFrO1xuXG5cbiAgICAgIC8vIENsYXNzIG9mIGFueSBjaGFyYWN0ZXIgZXhjZXB0IFxcbi5cbiAgICAgIGNhc2UgJy4nOlxuICAgICAgICBsYXN0LnB1c2goc2V0cy5hbnlDaGFyKCkpO1xuICAgICAgICBicmVhaztcblxuXG4gICAgICAvLyBQdXNoIGdyb3VwIG9udG8gc3RhY2suXG4gICAgICBjYXNlICcoJzpcbiAgICAgICAgLy8gQ3JlYXRlIGdyb3VwLlxuICAgICAgICB2YXIgZ3JvdXAgPSB7XG4gICAgICAgICAgdHlwZTogdHlwZXMuR1JPVVAsXG4gICAgICAgICAgc3RhY2s6IFtdLFxuICAgICAgICAgIHJlbWVtYmVyOiB0cnVlLFxuICAgICAgICB9O1xuXG4gICAgICAgIGMgPSBzdHJbaV07XG5cbiAgICAgICAgLy8gSWYgaWYgdGhpcyBpcyBhIHNwZWNpYWwga2luZCBvZiBncm91cC5cbiAgICAgICAgaWYgKGMgPT09ICc/Jykge1xuICAgICAgICAgIGMgPSBzdHJbaSArIDFdO1xuICAgICAgICAgIGkgKz0gMjtcblxuICAgICAgICAgIC8vIE1hdGNoIGlmIGZvbGxvd2VkIGJ5LlxuICAgICAgICAgIGlmIChjID09PSAnPScpIHtcbiAgICAgICAgICAgIGdyb3VwLmZvbGxvd2VkQnkgPSB0cnVlO1xuXG4gICAgICAgICAgLy8gTWF0Y2ggaWYgbm90IGZvbGxvd2VkIGJ5LlxuICAgICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gJyEnKSB7XG4gICAgICAgICAgICBncm91cC5ub3RGb2xsb3dlZEJ5ID0gdHJ1ZTtcblxuICAgICAgICAgIH0gZWxzZSBpZiAoYyAhPT0gJzonKSB7XG4gICAgICAgICAgICB1dGlsLmVycm9yKHJlZ2V4cFN0cixcbiAgICAgICAgICAgICAgYEludmFsaWQgZ3JvdXAsIGNoYXJhY3RlciAnJHtjfSdgICtcbiAgICAgICAgICAgICAgYCBhZnRlciAnPycgYXQgY29sdW1uICR7aSAtIDF9YCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZ3JvdXAucmVtZW1iZXIgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEluc2VydCBzdWJncm91cCBpbnRvIGN1cnJlbnQgZ3JvdXAgc3RhY2suXG4gICAgICAgIGxhc3QucHVzaChncm91cCk7XG5cbiAgICAgICAgLy8gUmVtZW1iZXIgdGhlIGN1cnJlbnQgZ3JvdXAgZm9yIHdoZW4gdGhlIGdyb3VwIGNsb3Nlcy5cbiAgICAgICAgZ3JvdXBTdGFjay5wdXNoKGxhc3RHcm91cCk7XG5cbiAgICAgICAgLy8gTWFrZSB0aGlzIG5ldyBncm91cCB0aGUgY3VycmVudCBncm91cC5cbiAgICAgICAgbGFzdEdyb3VwID0gZ3JvdXA7XG4gICAgICAgIGxhc3QgPSBncm91cC5zdGFjaztcbiAgICAgICAgYnJlYWs7XG5cblxuICAgICAgLy8gUG9wIGdyb3VwIG91dCBvZiBzdGFjay5cbiAgICAgIGNhc2UgJyknOlxuICAgICAgICBpZiAoZ3JvdXBTdGFjay5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICB1dGlsLmVycm9yKHJlZ2V4cFN0ciwgYFVubWF0Y2hlZCApIGF0IGNvbHVtbiAke2kgLSAxfWApO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RHcm91cCA9IGdyb3VwU3RhY2sucG9wKCk7XG5cbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhpcyBncm91cCBoYXMgYSBQSVBFLlxuICAgICAgICAvLyBUbyBnZXQgYmFjayB0aGUgY29ycmVjdCBsYXN0IHN0YWNrLlxuICAgICAgICBsYXN0ID0gbGFzdEdyb3VwLm9wdGlvbnMgP1xuICAgICAgICAgIGxhc3RHcm91cC5vcHRpb25zW2xhc3RHcm91cC5vcHRpb25zLmxlbmd0aCAtIDFdIDogbGFzdEdyb3VwLnN0YWNrO1xuICAgICAgICBicmVhaztcblxuXG4gICAgICAvLyBVc2UgcGlwZSBjaGFyYWN0ZXIgdG8gZ2l2ZSBtb3JlIGNob2ljZXMuXG4gICAgICBjYXNlICd8JzpcbiAgICAgICAgLy8gQ3JlYXRlIGFycmF5IHdoZXJlIG9wdGlvbnMgYXJlIGlmIHRoaXMgaXMgdGhlIGZpcnN0IFBJUEVcbiAgICAgICAgLy8gaW4gdGhpcyBjbGF1c2UuXG4gICAgICAgIGlmICghbGFzdEdyb3VwLm9wdGlvbnMpIHtcbiAgICAgICAgICBsYXN0R3JvdXAub3B0aW9ucyA9IFtsYXN0R3JvdXAuc3RhY2tdO1xuICAgICAgICAgIGRlbGV0ZSBsYXN0R3JvdXAuc3RhY2s7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDcmVhdGUgYSBuZXcgc3RhY2sgYW5kIGFkZCB0byBvcHRpb25zIGZvciByZXN0IG9mIGNsYXVzZS5cbiAgICAgICAgdmFyIHN0YWNrID0gW107XG4gICAgICAgIGxhc3RHcm91cC5vcHRpb25zLnB1c2goc3RhY2spO1xuICAgICAgICBsYXN0ID0gc3RhY2s7XG4gICAgICAgIGJyZWFrO1xuXG5cbiAgICAgIC8vIFJlcGV0aXRpb24uXG4gICAgICAvLyBGb3IgZXZlcnkgcmVwZXRpdGlvbiwgcmVtb3ZlIGxhc3QgZWxlbWVudCBmcm9tIGxhc3Qgc3RhY2tcbiAgICAgIC8vIHRoZW4gaW5zZXJ0IGJhY2sgYSBSQU5HRSBvYmplY3QuXG4gICAgICAvLyBUaGlzIGRlc2lnbiBpcyBjaG9zZW4gYmVjYXVzZSB0aGVyZSBjb3VsZCBiZSBtb3JlIHRoYW5cbiAgICAgIC8vIG9uZSByZXBldGl0aW9uIHN5bWJvbHMgaW4gYSByZWdleCBpLmUuIGBhPyt7MiwzfWAuXG4gICAgICBjYXNlICd7JzpcbiAgICAgICAgdmFyIHJzID0gL14oXFxkKykoLChcXGQrKT8pP1xcfS8uZXhlYyhzdHIuc2xpY2UoaSkpLCBtaW4sIG1heDtcbiAgICAgICAgaWYgKHJzICE9PSBudWxsKSB7XG4gICAgICAgICAgaWYgKGxhc3QubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXBlYXRFcnIoaSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG1pbiA9IHBhcnNlSW50KHJzWzFdLCAxMCk7XG4gICAgICAgICAgbWF4ID0gcnNbMl0gPyByc1szXSA/IHBhcnNlSW50KHJzWzNdLCAxMCkgOiBJbmZpbml0eSA6IG1pbjtcbiAgICAgICAgICBpICs9IHJzWzBdLmxlbmd0aDtcblxuICAgICAgICAgIGxhc3QucHVzaCh7XG4gICAgICAgICAgICB0eXBlOiB0eXBlcy5SRVBFVElUSU9OLFxuICAgICAgICAgICAgbWluLFxuICAgICAgICAgICAgbWF4LFxuICAgICAgICAgICAgdmFsdWU6IGxhc3QucG9wKCksXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGFzdC5wdXNoKHtcbiAgICAgICAgICAgIHR5cGU6IHR5cGVzLkNIQVIsXG4gICAgICAgICAgICB2YWx1ZTogMTIzLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICc/JzpcbiAgICAgICAgaWYgKGxhc3QubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgcmVwZWF0RXJyKGkpO1xuICAgICAgICB9XG4gICAgICAgIGxhc3QucHVzaCh7XG4gICAgICAgICAgdHlwZTogdHlwZXMuUkVQRVRJVElPTixcbiAgICAgICAgICBtaW46IDAsXG4gICAgICAgICAgbWF4OiAxLFxuICAgICAgICAgIHZhbHVlOiBsYXN0LnBvcCgpLFxuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJysnOlxuICAgICAgICBpZiAobGFzdC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICByZXBlYXRFcnIoaSk7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdC5wdXNoKHtcbiAgICAgICAgICB0eXBlOiB0eXBlcy5SRVBFVElUSU9OLFxuICAgICAgICAgIG1pbjogMSxcbiAgICAgICAgICBtYXg6IEluZmluaXR5LFxuICAgICAgICAgIHZhbHVlOiBsYXN0LnBvcCgpLFxuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJyonOlxuICAgICAgICBpZiAobGFzdC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICByZXBlYXRFcnIoaSk7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdC5wdXNoKHtcbiAgICAgICAgICB0eXBlOiB0eXBlcy5SRVBFVElUSU9OLFxuICAgICAgICAgIG1pbjogMCxcbiAgICAgICAgICBtYXg6IEluZmluaXR5LFxuICAgICAgICAgIHZhbHVlOiBsYXN0LnBvcCgpLFxuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG5cblxuICAgICAgLy8gRGVmYXVsdCBpcyBhIGNoYXJhY3RlciB0aGF0IGlzIG5vdCBgXFxbXSgpe30/KypeJGAuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBsYXN0LnB1c2goe1xuICAgICAgICAgIHR5cGU6IHR5cGVzLkNIQVIsXG4gICAgICAgICAgdmFsdWU6IGMuY2hhckNvZGVBdCgwKSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gIH1cblxuICAvLyBDaGVjayBpZiBhbnkgZ3JvdXBzIGhhdmUgbm90IGJlZW4gY2xvc2VkLlxuICBpZiAoZ3JvdXBTdGFjay5sZW5ndGggIT09IDApIHtcbiAgICB1dGlsLmVycm9yKHJlZ2V4cFN0ciwgJ1VudGVybWluYXRlZCBncm91cCcpO1xuICB9XG5cbiAgcmV0dXJuIHN0YXJ0O1xufTtcblxubW9kdWxlLmV4cG9ydHMudHlwZXMgPSB0eXBlcztcbiIsCiAgICAiJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50IGluZGVudDogNCAqL1xuXG5cbi8vIFByaXZhdGUgaGVscGVyIGNsYXNzXG5jbGFzcyBTdWJSYW5nZSB7XG4gICAgY29uc3RydWN0b3IobG93LCBoaWdoKSB7XG4gICAgICAgIHRoaXMubG93ID0gbG93O1xuICAgICAgICB0aGlzLmhpZ2ggPSBoaWdoO1xuICAgICAgICB0aGlzLmxlbmd0aCA9IDEgKyBoaWdoIC0gbG93O1xuICAgIH1cblxuICAgIG92ZXJsYXBzKHJhbmdlKSB7XG4gICAgICAgIHJldHVybiAhKHRoaXMuaGlnaCA8IHJhbmdlLmxvdyB8fCB0aGlzLmxvdyA+IHJhbmdlLmhpZ2gpO1xuICAgIH1cblxuICAgIHRvdWNoZXMocmFuZ2UpIHtcbiAgICAgICAgcmV0dXJuICEodGhpcy5oaWdoICsgMSA8IHJhbmdlLmxvdyB8fCB0aGlzLmxvdyAtIDEgPiByYW5nZS5oaWdoKTtcbiAgICB9XG5cbiAgICAvLyBSZXR1cm5zIGluY2x1c2l2ZSBjb21iaW5hdGlvbiBvZiBTdWJSYW5nZXMgYXMgYSBTdWJSYW5nZS5cbiAgICBhZGQocmFuZ2UpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTdWJSYW5nZShcbiAgICAgICAgICAgIE1hdGgubWluKHRoaXMubG93LCByYW5nZS5sb3cpLFxuICAgICAgICAgICAgTWF0aC5tYXgodGhpcy5oaWdoLCByYW5nZS5oaWdoKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8vIFJldHVybnMgc3VidHJhY3Rpb24gb2YgU3ViUmFuZ2VzIGFzIGFuIGFycmF5IG9mIFN1YlJhbmdlcy5cbiAgICAvLyAoVGhlcmUncyBhIGNhc2Ugd2hlcmUgc3VidHJhY3Rpb24gZGl2aWRlcyBpdCBpbiAyKVxuICAgIHN1YnRyYWN0KHJhbmdlKSB7XG4gICAgICAgIGlmIChyYW5nZS5sb3cgPD0gdGhpcy5sb3cgJiYgcmFuZ2UuaGlnaCA+PSB0aGlzLmhpZ2gpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfSBlbHNlIGlmIChyYW5nZS5sb3cgPiB0aGlzLmxvdyAmJiByYW5nZS5oaWdoIDwgdGhpcy5oaWdoKSB7XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIG5ldyBTdWJSYW5nZSh0aGlzLmxvdywgcmFuZ2UubG93IC0gMSksXG4gICAgICAgICAgICAgICAgbmV3IFN1YlJhbmdlKHJhbmdlLmhpZ2ggKyAxLCB0aGlzLmhpZ2gpXG4gICAgICAgICAgICBdO1xuICAgICAgICB9IGVsc2UgaWYgKHJhbmdlLmxvdyA8PSB0aGlzLmxvdykge1xuICAgICAgICAgICAgcmV0dXJuIFtuZXcgU3ViUmFuZ2UocmFuZ2UuaGlnaCArIDEsIHRoaXMuaGlnaCldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFtuZXcgU3ViUmFuZ2UodGhpcy5sb3csIHJhbmdlLmxvdyAtIDEpXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb3cgPT0gdGhpcy5oaWdoID9cbiAgICAgICAgICAgIHRoaXMubG93LnRvU3RyaW5nKCkgOiB0aGlzLmxvdyArICctJyArIHRoaXMuaGlnaDtcbiAgICB9XG59XG5cblxuY2xhc3MgRFJhbmdlIHtcbiAgICBjb25zdHJ1Y3RvcihhLCBiKSB7XG4gICAgICAgIHRoaXMucmFuZ2VzID0gW107XG4gICAgICAgIHRoaXMubGVuZ3RoID0gMDtcbiAgICAgICAgaWYgKGEgIT0gbnVsbCkgdGhpcy5hZGQoYSwgYik7XG4gICAgfVxuXG4gICAgX3VwZGF0ZV9sZW5ndGgoKSB7XG4gICAgICAgIHRoaXMubGVuZ3RoID0gdGhpcy5yYW5nZXMucmVkdWNlKChwcmV2aW91cywgcmFuZ2UpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBwcmV2aW91cyArIHJhbmdlLmxlbmd0aDtcbiAgICAgICAgfSwgMCk7XG4gICAgfVxuXG4gICAgYWRkKGEsIGIpIHtcbiAgICAgICAgdmFyIF9hZGQgPSAoc3VicmFuZ2UpID0+IHtcbiAgICAgICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgICAgIHdoaWxlIChpIDwgdGhpcy5yYW5nZXMubGVuZ3RoICYmICFzdWJyYW5nZS50b3VjaGVzKHRoaXMucmFuZ2VzW2ldKSkge1xuICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBuZXdSYW5nZXMgPSB0aGlzLnJhbmdlcy5zbGljZSgwLCBpKTtcbiAgICAgICAgICAgIHdoaWxlIChpIDwgdGhpcy5yYW5nZXMubGVuZ3RoICYmIHN1YnJhbmdlLnRvdWNoZXModGhpcy5yYW5nZXNbaV0pKSB7XG4gICAgICAgICAgICAgICAgc3VicmFuZ2UgPSBzdWJyYW5nZS5hZGQodGhpcy5yYW5nZXNbaV0pO1xuICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5ld1Jhbmdlcy5wdXNoKHN1YnJhbmdlKTtcbiAgICAgICAgICAgIHRoaXMucmFuZ2VzID0gbmV3UmFuZ2VzLmNvbmNhdCh0aGlzLnJhbmdlcy5zbGljZShpKSk7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVfbGVuZ3RoKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYSBpbnN0YW5jZW9mIERSYW5nZSkge1xuICAgICAgICAgICAgYS5yYW5nZXMuZm9yRWFjaChfYWRkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChiID09IG51bGwpIGIgPSBhO1xuICAgICAgICAgICAgX2FkZChuZXcgU3ViUmFuZ2UoYSwgYikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHN1YnRyYWN0KGEsIGIpIHtcbiAgICAgICAgdmFyIF9zdWJ0cmFjdCA9IChzdWJyYW5nZSkgPT4ge1xuICAgICAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICAgICAgd2hpbGUgKGkgPCB0aGlzLnJhbmdlcy5sZW5ndGggJiYgIXN1YnJhbmdlLm92ZXJsYXBzKHRoaXMucmFuZ2VzW2ldKSkge1xuICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBuZXdSYW5nZXMgPSB0aGlzLnJhbmdlcy5zbGljZSgwLCBpKTtcbiAgICAgICAgICAgIHdoaWxlIChpIDwgdGhpcy5yYW5nZXMubGVuZ3RoICYmIHN1YnJhbmdlLm92ZXJsYXBzKHRoaXMucmFuZ2VzW2ldKSkge1xuICAgICAgICAgICAgICAgIG5ld1JhbmdlcyA9IG5ld1Jhbmdlcy5jb25jYXQodGhpcy5yYW5nZXNbaV0uc3VidHJhY3Qoc3VicmFuZ2UpKTtcbiAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnJhbmdlcyA9IG5ld1Jhbmdlcy5jb25jYXQodGhpcy5yYW5nZXMuc2xpY2UoaSkpO1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlX2xlbmd0aCgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChhIGluc3RhbmNlb2YgRFJhbmdlKSB7XG4gICAgICAgICAgICBhLnJhbmdlcy5mb3JFYWNoKF9zdWJ0cmFjdCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoYiA9PSBudWxsKSBiID0gYTtcbiAgICAgICAgICAgIF9zdWJ0cmFjdChuZXcgU3ViUmFuZ2UoYSwgYikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGludGVyc2VjdChhLCBiKSB7XG4gICAgICAgIHZhciBuZXdSYW5nZXMgPSBbXTtcbiAgICAgICAgdmFyIF9pbnRlcnNlY3QgPSAoc3VicmFuZ2UpID0+IHtcbiAgICAgICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgICAgIHdoaWxlIChpIDwgdGhpcy5yYW5nZXMubGVuZ3RoICYmICFzdWJyYW5nZS5vdmVybGFwcyh0aGlzLnJhbmdlc1tpXSkpIHtcbiAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aGlsZSAoaSA8IHRoaXMucmFuZ2VzLmxlbmd0aCAmJiBzdWJyYW5nZS5vdmVybGFwcyh0aGlzLnJhbmdlc1tpXSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgbG93ID0gTWF0aC5tYXgodGhpcy5yYW5nZXNbaV0ubG93LCBzdWJyYW5nZS5sb3cpO1xuICAgICAgICAgICAgICAgIHZhciBoaWdoID0gTWF0aC5taW4odGhpcy5yYW5nZXNbaV0uaGlnaCwgc3VicmFuZ2UuaGlnaCk7XG4gICAgICAgICAgICAgICAgbmV3UmFuZ2VzLnB1c2gobmV3IFN1YlJhbmdlKGxvdywgaGlnaCkpO1xuICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoYSBpbnN0YW5jZW9mIERSYW5nZSkge1xuICAgICAgICAgICAgYS5yYW5nZXMuZm9yRWFjaChfaW50ZXJzZWN0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChiID09IG51bGwpIGIgPSBhO1xuICAgICAgICAgICAgX2ludGVyc2VjdChuZXcgU3ViUmFuZ2UoYSwgYikpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmFuZ2VzID0gbmV3UmFuZ2VzO1xuICAgICAgICB0aGlzLl91cGRhdGVfbGVuZ3RoKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGluZGV4KGluZGV4KSB7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgd2hpbGUgKGkgPCB0aGlzLnJhbmdlcy5sZW5ndGggJiYgdGhpcy5yYW5nZXNbaV0ubGVuZ3RoIDw9IGluZGV4KSB7XG4gICAgICAgICAgICBpbmRleCAtPSB0aGlzLnJhbmdlc1tpXS5sZW5ndGg7XG4gICAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMucmFuZ2VzW2ldLmxvdyArIGluZGV4O1xuICAgIH1cblxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gJ1sgJyArIHRoaXMucmFuZ2VzLmpvaW4oJywgJykgKyAnIF0nO1xuICAgIH1cblxuICAgIGNsb25lKCkge1xuICAgICAgICByZXR1cm4gbmV3IERSYW5nZSh0aGlzKTtcbiAgICB9XG5cbiAgICBudW1iZXJzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yYW5nZXMucmVkdWNlKChyZXN1bHQsIHN1YnJhbmdlKSA9PiB7XG4gICAgICAgICAgICB2YXIgaSA9IHN1YnJhbmdlLmxvdztcbiAgICAgICAgICAgIHdoaWxlIChpIDw9IHN1YnJhbmdlLmhpZ2gpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChpKTtcbiAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9LCBbXSk7XG4gICAgfVxuXG4gICAgc3VicmFuZ2VzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yYW5nZXMubWFwKChzdWJyYW5nZSkgPT4gKHtcbiAgICAgICAgICAgIGxvdzogc3VicmFuZ2UubG93LFxuICAgICAgICAgICAgaGlnaDogc3VicmFuZ2UuaGlnaCxcbiAgICAgICAgICAgIGxlbmd0aDogMSArIHN1YnJhbmdlLmhpZ2ggLSBzdWJyYW5nZS5sb3dcbiAgICAgICAgfSkpO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBEUmFuZ2U7XG4iLAogICAgImNvbnN0IHJldCAgICA9IHJlcXVpcmUoJ3JldCcpO1xuY29uc3QgRFJhbmdlID0gcmVxdWlyZSgnZHJhbmdlJyk7XG5jb25zdCB0eXBlcyAgPSByZXQudHlwZXM7XG5cblxubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBSYW5kRXhwIHtcbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0ge1JlZ0V4cHxTdHJpbmd9IHJlZ2V4cFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbVxuICAgKi9cbiAgY29uc3RydWN0b3IocmVnZXhwLCBtKSB7XG4gICAgdGhpcy5fc2V0RGVmYXVsdHMocmVnZXhwKTtcbiAgICBpZiAocmVnZXhwIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICB0aGlzLmlnbm9yZUNhc2UgPSByZWdleHAuaWdub3JlQ2FzZTtcbiAgICAgIHRoaXMubXVsdGlsaW5lID0gcmVnZXhwLm11bHRpbGluZTtcbiAgICAgIHJlZ2V4cCA9IHJlZ2V4cC5zb3VyY2U7XG5cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiByZWdleHAgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLmlnbm9yZUNhc2UgPSBtICYmIG0uaW5kZXhPZignaScpICE9PSAtMTtcbiAgICAgIHRoaXMubXVsdGlsaW5lID0gbSAmJiBtLmluZGV4T2YoJ20nKSAhPT0gLTE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgYSByZWdleHAgb3Igc3RyaW5nJyk7XG4gICAgfVxuXG4gICAgdGhpcy50b2tlbnMgPSByZXQocmVnZXhwKTtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBzb21lIGN1c3RvbSBwcm9wZXJ0aWVzIGhhdmUgYmVlbiBzZXQgZm9yIHRoaXMgcmVnZXhwLlxuICAgKlxuICAgKiBAcGFyYW0ge1JhbmRFeHB9IHJhbmRleHBcbiAgICogQHBhcmFtIHtSZWdFeHB9IHJlZ2V4cFxuICAgKi9cbiAgX3NldERlZmF1bHRzKHJlZ2V4cCkge1xuICAgIC8vIFdoZW4gYSByZXBldGl0aW9uYWwgdG9rZW4gaGFzIGl0cyBtYXggc2V0IHRvIEluZmluaXRlLFxuICAgIC8vIHJhbmRleHAgd29uJ3QgYWN0dWFsbHkgZ2VuZXJhdGUgYSByYW5kb20gYW1vdW50IGJldHdlZW4gbWluIGFuZCBJbmZpbml0ZVxuICAgIC8vIGluc3RlYWQgaXQgd2lsbCBzZWUgSW5maW5pdGUgYXMgbWluICsgMTAwLlxuICAgIHRoaXMubWF4ID0gcmVnZXhwLm1heCAhPSBudWxsID8gcmVnZXhwLm1heCA6XG4gICAgICBSYW5kRXhwLnByb3RvdHlwZS5tYXggIT0gbnVsbCA/IFJhbmRFeHAucHJvdG90eXBlLm1heCA6IDEwMDtcblxuICAgIC8vIFRoaXMgYWxsb3dzIGV4cGFuZGluZyB0byBpbmNsdWRlIGFkZGl0aW9uYWwgY2hhcmFjdGVyc1xuICAgIC8vIGZvciBpbnN0YW5jZTogUmFuZEV4cC5kZWZhdWx0UmFuZ2UuYWRkKDAsIDY1NTM1KTtcbiAgICB0aGlzLmRlZmF1bHRSYW5nZSA9IHJlZ2V4cC5kZWZhdWx0UmFuZ2UgP1xuICAgICAgcmVnZXhwLmRlZmF1bHRSYW5nZSA6IHRoaXMuZGVmYXVsdFJhbmdlLmNsb25lKCk7XG5cbiAgICBpZiAocmVnZXhwLnJhbmRJbnQpIHtcbiAgICAgIHRoaXMucmFuZEludCA9IHJlZ2V4cC5yYW5kSW50O1xuICAgIH1cbiAgfVxuXG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyB0aGUgcmFuZG9tIHN0cmluZy5cbiAgICpcbiAgICogQHJldHVybiB7U3RyaW5nfVxuICAgKi9cbiAgZ2VuKCkge1xuICAgIHJldHVybiB0aGlzLl9nZW4odGhpcy50b2tlbnMsIFtdKTtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIHJhbmRvbSBzdHJpbmcgbW9kZWxlZCBhZnRlciBnaXZlbiB0b2tlbnMuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSB0b2tlblxuICAgKiBAcGFyYW0ge0FycmF5LjxTdHJpbmc+fSBncm91cHNcbiAgICogQHJldHVybiB7U3RyaW5nfVxuICAgKi9cbiAgX2dlbih0b2tlbiwgZ3JvdXBzKSB7XG4gICAgdmFyIHN0YWNrLCBzdHIsIG4sIGksIGw7XG5cbiAgICBzd2l0Y2ggKHRva2VuLnR5cGUpIHtcbiAgICAgIGNhc2UgdHlwZXMuUk9PVDpcbiAgICAgIGNhc2UgdHlwZXMuR1JPVVA6XG4gICAgICAgIC8vIElnbm9yZSBsb29rYWhlYWRzIGZvciBub3cuXG4gICAgICAgIGlmICh0b2tlbi5mb2xsb3dlZEJ5IHx8IHRva2VuLm5vdEZvbGxvd2VkQnkpIHsgcmV0dXJuICcnOyB9XG5cbiAgICAgICAgLy8gSW5zZXJ0IHBsYWNlaG9sZGVyIHVudGlsIGdyb3VwIHN0cmluZyBpcyBnZW5lcmF0ZWQuXG4gICAgICAgIGlmICh0b2tlbi5yZW1lbWJlciAmJiB0b2tlbi5ncm91cE51bWJlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdG9rZW4uZ3JvdXBOdW1iZXIgPSBncm91cHMucHVzaChudWxsKSAtIDE7XG4gICAgICAgIH1cblxuICAgICAgICBzdGFjayA9IHRva2VuLm9wdGlvbnMgP1xuICAgICAgICAgIHRoaXMuX3JhbmRTZWxlY3QodG9rZW4ub3B0aW9ucykgOiB0b2tlbi5zdGFjaztcblxuICAgICAgICBzdHIgPSAnJztcbiAgICAgICAgZm9yIChpID0gMCwgbCA9IHN0YWNrLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgIHN0ciArPSB0aGlzLl9nZW4oc3RhY2tbaV0sIGdyb3Vwcyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodG9rZW4ucmVtZW1iZXIpIHtcbiAgICAgICAgICBncm91cHNbdG9rZW4uZ3JvdXBOdW1iZXJdID0gc3RyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdHI7XG5cbiAgICAgIGNhc2UgdHlwZXMuUE9TSVRJT046XG4gICAgICAgIC8vIERvIG5vdGhpbmcgZm9yIG5vdy5cbiAgICAgICAgcmV0dXJuICcnO1xuXG4gICAgICBjYXNlIHR5cGVzLlNFVDpcbiAgICAgICAgdmFyIGV4cGFuZGVkU2V0ID0gdGhpcy5fZXhwYW5kKHRva2VuKTtcbiAgICAgICAgaWYgKCFleHBhbmRlZFNldC5sZW5ndGgpIHsgcmV0dXJuICcnOyB9XG4gICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKHRoaXMuX3JhbmRTZWxlY3QoZXhwYW5kZWRTZXQpKTtcblxuICAgICAgY2FzZSB0eXBlcy5SRVBFVElUSU9OOlxuICAgICAgICAvLyBSYW5kb21seSBnZW5lcmF0ZSBudW1iZXIgYmV0d2VlbiBtaW4gYW5kIG1heC5cbiAgICAgICAgbiA9IHRoaXMucmFuZEludCh0b2tlbi5taW4sXG4gICAgICAgICAgdG9rZW4ubWF4ID09PSBJbmZpbml0eSA/IHRva2VuLm1pbiArIHRoaXMubWF4IDogdG9rZW4ubWF4KTtcblxuICAgICAgICBzdHIgPSAnJztcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgICAgIHN0ciArPSB0aGlzLl9nZW4odG9rZW4udmFsdWUsIGdyb3Vwcyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc3RyO1xuXG4gICAgICBjYXNlIHR5cGVzLlJFRkVSRU5DRTpcbiAgICAgICAgcmV0dXJuIGdyb3Vwc1t0b2tlbi52YWx1ZSAtIDFdIHx8ICcnO1xuXG4gICAgICBjYXNlIHR5cGVzLkNIQVI6XG4gICAgICAgIHZhciBjb2RlID0gdGhpcy5pZ25vcmVDYXNlICYmIHRoaXMuX3JhbmRCb29sKCkgP1xuICAgICAgICAgIHRoaXMuX3RvT3RoZXJDYXNlKHRva2VuLnZhbHVlKSA6IHRva2VuLnZhbHVlO1xuICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKTtcbiAgICB9XG4gIH1cblxuXG4gIC8qKlxuICAgKiBJZiBjb2RlIGlzIGFscGhhYmV0aWMsIGNvbnZlcnRzIHRvIG90aGVyIGNhc2UuXG4gICAqIElmIG5vdCBhbHBoYWJldGljLCByZXR1cm5zIGJhY2sgY29kZS5cbiAgICpcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGNvZGVcbiAgICogQHJldHVybiB7TnVtYmVyfVxuICAgKi9cbiAgX3RvT3RoZXJDYXNlKGNvZGUpIHtcbiAgICByZXR1cm4gY29kZSArICg5NyA8PSBjb2RlICYmIGNvZGUgPD0gMTIyID8gLTMyIDpcbiAgICAgIDY1IDw9IGNvZGUgJiYgY29kZSA8PSA5MCAgPyAgMzIgOiAwKTtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIFJhbmRvbWx5IHJldHVybnMgYSB0cnVlIG9yIGZhbHNlIHZhbHVlLlxuICAgKlxuICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgKi9cbiAgX3JhbmRCb29sKCkge1xuICAgIHJldHVybiAhdGhpcy5yYW5kSW50KDAsIDEpO1xuICB9XG5cblxuICAvKipcbiAgICogUmFuZG9tbHkgc2VsZWN0cyBhbmQgcmV0dXJucyBhIHZhbHVlIGZyb20gdGhlIGFycmF5LlxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5LjxPYmplY3Q+fSBhcnJcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKi9cbiAgX3JhbmRTZWxlY3QoYXJyKSB7XG4gICAgaWYgKGFyciBpbnN0YW5jZW9mIERSYW5nZSkge1xuICAgICAgcmV0dXJuIGFyci5pbmRleCh0aGlzLnJhbmRJbnQoMCwgYXJyLmxlbmd0aCAtIDEpKTtcbiAgICB9XG4gICAgcmV0dXJuIGFyclt0aGlzLnJhbmRJbnQoMCwgYXJyLmxlbmd0aCAtIDEpXTtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIGV4cGFuZHMgYSB0b2tlbiB0byBhIERpc2NvbnRpbnVvdXNSYW5nZSBvZiBjaGFyYWN0ZXJzIHdoaWNoIGhhcyBhXG4gICAqIGxlbmd0aCBhbmQgYW4gaW5kZXggZnVuY3Rpb24gKGZvciByYW5kb20gc2VsZWN0aW5nKVxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gdG9rZW5cbiAgICogQHJldHVybiB7RGlzY29udGludW91c1JhbmdlfVxuICAgKi9cbiAgX2V4cGFuZCh0b2tlbikge1xuICAgIGlmICh0b2tlbi50eXBlID09PSByZXQudHlwZXMuQ0hBUikge1xuICAgICAgcmV0dXJuIG5ldyBEUmFuZ2UodG9rZW4udmFsdWUpO1xuICAgIH0gZWxzZSBpZiAodG9rZW4udHlwZSA9PT0gcmV0LnR5cGVzLlJBTkdFKSB7XG4gICAgICByZXR1cm4gbmV3IERSYW5nZSh0b2tlbi5mcm9tLCB0b2tlbi50byk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBkcmFuZ2UgPSBuZXcgRFJhbmdlKCk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRva2VuLnNldC5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgc3VicmFuZ2UgPSB0aGlzLl9leHBhbmQodG9rZW4uc2V0W2ldKTtcbiAgICAgICAgZHJhbmdlLmFkZChzdWJyYW5nZSk7XG4gICAgICAgIGlmICh0aGlzLmlnbm9yZUNhc2UpIHtcbiAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHN1YnJhbmdlLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBsZXQgY29kZSA9IHN1YnJhbmdlLmluZGV4KGopO1xuICAgICAgICAgICAgbGV0IG90aGVyQ2FzZUNvZGUgPSB0aGlzLl90b090aGVyQ2FzZShjb2RlKTtcbiAgICAgICAgICAgIGlmIChjb2RlICE9PSBvdGhlckNhc2VDb2RlKSB7XG4gICAgICAgICAgICAgIGRyYW5nZS5hZGQob3RoZXJDYXNlQ29kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodG9rZW4ubm90KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRlZmF1bHRSYW5nZS5jbG9uZSgpLnN1YnRyYWN0KGRyYW5nZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5kZWZhdWx0UmFuZ2UuY2xvbmUoKS5pbnRlcnNlY3QoZHJhbmdlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuXG4gIC8qKlxuICAgKiBSYW5kb21seSBnZW5lcmF0ZXMgYW5kIHJldHVybnMgYSBudW1iZXIgYmV0d2VlbiBhIGFuZCBiIChpbmNsdXNpdmUpLlxuICAgKlxuICAgKiBAcGFyYW0ge051bWJlcn0gYVxuICAgKiBAcGFyYW0ge051bWJlcn0gYlxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAqL1xuICByYW5kSW50KGEsIGIpIHtcbiAgICByZXR1cm4gYSArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqICgxICsgYiAtIGEpKTtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIERlZmF1bHQgcmFuZ2Ugb2YgY2hhcmFjdGVycyB0byBnZW5lcmF0ZSBmcm9tLlxuICAgKi9cbiAgZ2V0IGRlZmF1bHRSYW5nZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmFuZ2UgPSB0aGlzLl9yYW5nZSB8fCBuZXcgRFJhbmdlKDMyLCAxMjYpO1xuICB9XG5cbiAgc2V0IGRlZmF1bHRSYW5nZShyYW5nZSkge1xuICAgIHRoaXMuX3JhbmdlID0gcmFuZ2U7XG4gIH1cblxuXG4gIC8qKlxuICAgKlxuICAgKiBFbmFibGVzIHVzZSBvZiByYW5kZXhwIHdpdGggYSBzaG9ydGVyIGNhbGwuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVnRXhwfFN0cmluZ3wgcmVnZXhwfVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbVxuICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAqL1xuICBzdGF0aWMgcmFuZGV4cChyZWdleHAsIG0pIHtcbiAgICB2YXIgcmFuZGV4cDtcbiAgICBpZih0eXBlb2YgcmVnZXhwID09PSAnc3RyaW5nJykge1xuICAgICAgcmVnZXhwID0gbmV3IFJlZ0V4cChyZWdleHAsIG0pO1xuICAgIH1cblxuICAgIGlmIChyZWdleHAuX3JhbmRleHAgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmFuZGV4cCA9IG5ldyBSYW5kRXhwKHJlZ2V4cCwgbSk7XG4gICAgICByZWdleHAuX3JhbmRleHAgPSByYW5kZXhwO1xuICAgIH0gZWxzZSB7XG4gICAgICByYW5kZXhwID0gcmVnZXhwLl9yYW5kZXhwO1xuICAgICAgcmFuZGV4cC5fc2V0RGVmYXVsdHMocmVnZXhwKTtcbiAgICB9XG4gICAgcmV0dXJuIHJhbmRleHAuZ2VuKCk7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBFbmFibGVzIHN1Z2FyeSAvcmVnZXhwLy5nZW4gc3ludGF4LlxuICAgKi9cbiAgc3RhdGljIHN1Z2FyKCkge1xuICAgIC8qIGVzaGludCBmcmVlemU6ZmFsc2UgKi9cbiAgICBSZWdFeHAucHJvdG90eXBlLmdlbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIFJhbmRFeHAucmFuZGV4cCh0aGlzKTtcbiAgICB9O1xuICB9XG59O1xuIiwKICAgICJcInVzZSBzdHJpY3RcIjtcbnZhciBfX3JlYWQgPSAodGhpcyAmJiB0aGlzLl9fcmVhZCkgfHwgZnVuY3Rpb24gKG8sIG4pIHtcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XG4gICAgaWYgKCFtKSByZXR1cm4gbztcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcbiAgICB0cnkge1xuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cbiAgICB9XG4gICAgcmV0dXJuIGFyO1xufTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmVsYXRpdmVKc29uUG9pbnRlciA9IGV4cG9ydHMuanNvblBvaW50ZXIgPSBleHBvcnRzLmR1cmF0aW9uID0gZXhwb3J0cy50aW1lID0gZXhwb3J0cy5kYXRlID0gZXhwb3J0cy5kYXRldGltZSA9IGV4cG9ydHMudXJsID0gZXhwb3J0cy51cmlUZW1wbGF0ZSA9IGV4cG9ydHMudXJpUmVmZXJlbmNlID0gZXhwb3J0cy51cmkgPSBleHBvcnRzLmlwdjYgPSBleHBvcnRzLmlwdjQgPSBleHBvcnRzLmlyaVJlZmVyZW5jZSA9IGV4cG9ydHMuaXJpID0gZXhwb3J0cy5pZG5Ib3N0bmFtZSA9IGV4cG9ydHMuaWRuRW1haWwgPSBleHBvcnRzLmhvc3RuYW1lID0gZXhwb3J0cy5lbWFpbCA9IGV4cG9ydHMudXVpZCA9IGV4cG9ydHMucmVnZXggPSBleHBvcnRzLnBhc3N3b3JkID0gZXhwb3J0cy5ieXRlID0gZXhwb3J0cy5wYXR0ZXJuID0gZXhwb3J0cy5sZW5ndGggPSBleHBvcnRzLnBpY2sgPSBleHBvcnRzLmFycmF5ID0gZXhwb3J0cy5zdHJpbmcgPSBleHBvcnRzLm51bWJlciA9IGV4cG9ydHMuYmlnaW50ID0gZXhwb3J0cy5pbnRlZ2VyID0gZXhwb3J0cy5ib29sZWFuID0gdm9pZCAwO1xudmFyIHJhbmRleHBfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwicmFuZGV4cFwiKSk7XG52YXIgQUxQSEFCRVRTID0gXCJhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5elwiO1xuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgUkVHVUxBUlxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbnZhciBib29sZWFuID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gTWF0aC5yYW5kb20oKSA8IDAuNTsgfTtcbmV4cG9ydHMuYm9vbGVhbiA9IGJvb2xlYW47XG52YXIgaW50ZWdlciA9IGZ1bmN0aW9uIChtaW4sIG1heCkge1xuICAgIG1pbiAhPT0gbnVsbCAmJiBtaW4gIT09IHZvaWQgMCA/IG1pbiA6IChtaW4gPSAwKTtcbiAgICBtYXggIT09IG51bGwgJiYgbWF4ICE9PSB2b2lkIDAgPyBtYXggOiAobWF4ID0gMTAwKTtcbiAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIDEpKSArIG1pbjtcbn07XG5leHBvcnRzLmludGVnZXIgPSBpbnRlZ2VyO1xudmFyIGJpZ2ludCA9IGZ1bmN0aW9uIChtaW4sIG1heCkge1xuICAgIHJldHVybiBCaWdJbnQoKDAsIGV4cG9ydHMuaW50ZWdlcikoTnVtYmVyKG1pbiAhPT0gbnVsbCAmJiBtaW4gIT09IHZvaWQgMCA/IG1pbiA6IEJpZ0ludCgwKSksIE51bWJlcihtYXggIT09IG51bGwgJiYgbWF4ICE9PSB2b2lkIDAgPyBtYXggOiBCaWdJbnQoMTAwKSkpKTtcbn07XG5leHBvcnRzLmJpZ2ludCA9IGJpZ2ludDtcbnZhciBudW1iZXIgPSBmdW5jdGlvbiAobWluLCBtYXgpIHtcbiAgICBtaW4gIT09IG51bGwgJiYgbWluICE9PSB2b2lkIDAgPyBtaW4gOiAobWluID0gMCk7XG4gICAgbWF4ICE9PSBudWxsICYmIG1heCAhPT0gdm9pZCAwID8gbWF4IDogKG1heCA9IDEwMCk7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluKSArIG1pbjtcbn07XG5leHBvcnRzLm51bWJlciA9IG51bWJlcjtcbnZhciBzdHJpbmcgPSBmdW5jdGlvbiAobGVuZ3RoKSB7XG4gICAgcmV0dXJuIG5ldyBBcnJheShsZW5ndGggIT09IG51bGwgJiYgbGVuZ3RoICE9PSB2b2lkIDAgPyBsZW5ndGggOiAoMCwgZXhwb3J0cy5pbnRlZ2VyKSg1LCAxMCkpXG4gICAgICAgIC5maWxsKDApXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKCkgeyByZXR1cm4gQUxQSEFCRVRTWygwLCBleHBvcnRzLmludGVnZXIpKDAsIEFMUEhBQkVUUy5sZW5ndGggLSAxKV07IH0pXG4gICAgICAgIC5qb2luKFwiXCIpO1xufTtcbmV4cG9ydHMuc3RyaW5nID0gc3RyaW5nO1xudmFyIGFycmF5ID0gZnVuY3Rpb24gKGNsb3N1cmUsIGNvdW50KSB7XG4gICAgcmV0dXJuIG5ldyBBcnJheShjb3VudCAhPT0gbnVsbCAmJiBjb3VudCAhPT0gdm9pZCAwID8gY291bnQgOiAoMCwgZXhwb3J0cy5sZW5ndGgpKCkpLmZpbGwoMCkubWFwKGZ1bmN0aW9uIChfZSwgaW5kZXgpIHsgcmV0dXJuIGNsb3N1cmUoaW5kZXgpOyB9KTtcbn07XG5leHBvcnRzLmFycmF5ID0gYXJyYXk7XG52YXIgcGljayA9IGZ1bmN0aW9uIChhcnJheSkgeyByZXR1cm4gYXJyYXlbKDAsIGV4cG9ydHMuaW50ZWdlcikoMCwgYXJyYXkubGVuZ3RoIC0gMSldOyB9O1xuZXhwb3J0cy5waWNrID0gcGljaztcbnZhciBsZW5ndGggPSBmdW5jdGlvbiAoKSB7IHJldHVybiAoMCwgZXhwb3J0cy5pbnRlZ2VyKSgwLCAzKTsgfTtcbmV4cG9ydHMubGVuZ3RoID0gbGVuZ3RoO1xudmFyIHBhdHRlcm4gPSBmdW5jdGlvbiAocmVnZXgpIHtcbiAgICB2YXIgciA9IG5ldyByYW5kZXhwXzEuZGVmYXVsdChyZWdleCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgKytpKSB7XG4gICAgICAgIHZhciBzdHIgPSByLmdlbigpO1xuICAgICAgICBpZiAocmVnZXgudGVzdChzdHIpKVxuICAgICAgICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gICAgcmV0dXJuIHIuZ2VuKCk7XG59O1xuZXhwb3J0cy5wYXR0ZXJuID0gcGF0dGVybjtcbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIFNFQ0lBTCBGT1JNQVRTXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuLy8gU1BFQ0lBTCBDSEFSQUNURVJTXG52YXIgYnl0ZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFwidnQ3ZWt6NGxJb05UVFM5c0RRWWRXS2hhcnhJRkFSNTQrei91bUl4U2dVTT1cIjsgfTtcbmV4cG9ydHMuYnl0ZSA9IGJ5dGU7XG52YXIgcGFzc3dvcmQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAoMCwgZXhwb3J0cy5zdHJpbmcpKCgwLCBleHBvcnRzLmludGVnZXIpKDQsIDE2KSk7IH07XG5leHBvcnRzLnBhc3N3b3JkID0gcGFzc3dvcmQ7XG52YXIgcmVnZXggPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFwiL14oPzooPzoyNVswLTVdfDJbMC00XVxcXFxkfDFcXFxcZFxcXFxkfFsxLTldP1xcXFxkKVxcXFwuKXszfSg/OjI1WzAtNV18MlswLTRdXFxcXGR8MVxcXFxkXFxcXGR8WzEtOV0/XFxcXGQpJC9cIjtcbn07XG5leHBvcnRzLnJlZ2V4ID0gcmVnZXg7XG52YXIgdXVpZCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gXCJ4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHhcIi5yZXBsYWNlKC9beHldL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIHZhciByID0gKE1hdGgucmFuZG9tKCkgKiAxNikgfCAwO1xuICAgICAgICB2YXIgdiA9IGMgPT09IFwieFwiID8gciA6IChyICYgMHgzKSB8IDB4ODtcbiAgICAgICAgcmV0dXJuIHYudG9TdHJpbmcoMTYpO1xuICAgIH0pO1xufTtcbmV4cG9ydHMudXVpZCA9IHV1aWQ7XG4vLyBBRERSRVNTRVNcbnZhciBlbWFpbCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFwiXCIuY29uY2F0KCgwLCBleHBvcnRzLnN0cmluZykoMTApLCBcIkBcIikuY29uY2F0KCgwLCBleHBvcnRzLnN0cmluZykoMTApLCBcIi5cIikuY29uY2F0KCgwLCBleHBvcnRzLnN0cmluZykoMykpOyB9O1xuZXhwb3J0cy5lbWFpbCA9IGVtYWlsO1xudmFyIGhvc3RuYW1lID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gXCJcIi5jb25jYXQoKDAsIGV4cG9ydHMuc3RyaW5nKSgxMCksIFwiLlwiKS5jb25jYXQoKDAsIGV4cG9ydHMuc3RyaW5nKSgzKSk7IH07XG5leHBvcnRzLmhvc3RuYW1lID0gaG9zdG5hbWU7XG52YXIgaWRuRW1haWwgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAoMCwgZXhwb3J0cy5lbWFpbCkoKTsgfTtcbmV4cG9ydHMuaWRuRW1haWwgPSBpZG5FbWFpbDtcbnZhciBpZG5Ib3N0bmFtZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICgwLCBleHBvcnRzLmhvc3RuYW1lKSgpOyB9O1xuZXhwb3J0cy5pZG5Ib3N0bmFtZSA9IGlkbkhvc3RuYW1lO1xudmFyIGlyaSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICgwLCBleHBvcnRzLnVybCkoKTsgfTtcbmV4cG9ydHMuaXJpID0gaXJpO1xudmFyIGlyaVJlZmVyZW5jZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICgwLCBleHBvcnRzLnVybCkoKTsgfTtcbmV4cG9ydHMuaXJpUmVmZXJlbmNlID0gaXJpUmVmZXJlbmNlO1xudmFyIGlwdjQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAoMCwgZXhwb3J0cy5hcnJheSkoZnVuY3Rpb24gKCkgeyByZXR1cm4gKDAsIGV4cG9ydHMuaW50ZWdlcikoMCwgMjU1KTsgfSwgNCkuam9pbihcIi5cIik7IH07XG5leHBvcnRzLmlwdjQgPSBpcHY0O1xudmFyIGlwdjYgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICgwLCBleHBvcnRzLmFycmF5KShmdW5jdGlvbiAoKSB7IHJldHVybiAoMCwgZXhwb3J0cy5pbnRlZ2VyKSgwLCA2NTUzNSkudG9TdHJpbmcoMTYpOyB9LCA4KS5qb2luKFwiOlwiKTtcbn07XG5leHBvcnRzLmlwdjYgPSBpcHY2O1xudmFyIHVyaSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICgwLCBleHBvcnRzLnVybCkoKTsgfTtcbmV4cG9ydHMudXJpID0gdXJpO1xudmFyIHVyaVJlZmVyZW5jZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICgwLCBleHBvcnRzLnVybCkoKTsgfTtcbmV4cG9ydHMudXJpUmVmZXJlbmNlID0gdXJpUmVmZXJlbmNlO1xudmFyIHVyaVRlbXBsYXRlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gKDAsIGV4cG9ydHMudXJsKSgpOyB9O1xuZXhwb3J0cy51cmlUZW1wbGF0ZSA9IHVyaVRlbXBsYXRlO1xudmFyIHVybCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFwiaHR0cHM6Ly9cIi5jb25jYXQoKDAsIGV4cG9ydHMuc3RyaW5nKSgxMCksIFwiLlwiKS5jb25jYXQoKDAsIGV4cG9ydHMuc3RyaW5nKSgzKSk7IH07XG5leHBvcnRzLnVybCA9IHVybDtcbi8vIFRJTUVTVEFNUFNcbnZhciBkYXRldGltZSA9IGZ1bmN0aW9uIChtaW4sIG1heCkge1xuICAgIHJldHVybiBuZXcgRGF0ZSgoMCwgZXhwb3J0cy5udW1iZXIpKG1pbiAhPT0gbnVsbCAmJiBtaW4gIT09IHZvaWQgMCA/IG1pbiA6IERhdGUubm93KCkgLSAzMCAqIERBWSwgbWF4ICE9PSBudWxsICYmIG1heCAhPT0gdm9pZCAwID8gbWF4IDogRGF0ZS5ub3coKSArIDcgKiBEQVkpKS50b0lTT1N0cmluZygpO1xufTtcbmV4cG9ydHMuZGF0ZXRpbWUgPSBkYXRldGltZTtcbnZhciBkYXRlID0gZnVuY3Rpb24gKG1pbiwgbWF4KSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKCgwLCBleHBvcnRzLm51bWJlcikobWluICE9PSBudWxsICYmIG1pbiAhPT0gdm9pZCAwID8gbWluIDogMCwgbWF4ICE9PSBudWxsICYmIG1heCAhPT0gdm9pZCAwID8gbWF4IDogRGF0ZS5ub3coKSAqIDIpKVxuICAgICAgICAudG9JU09TdHJpbmcoKVxuICAgICAgICAuc3Vic3RyaW5nKDAsIDEwKTtcbn07XG5leHBvcnRzLmRhdGUgPSBkYXRlO1xudmFyIHRpbWUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgRGF0ZSgoMCwgZXhwb3J0cy5udW1iZXIpKDAsIERBWSkpLnRvSVNPU3RyaW5nKCkuc3Vic3RyaW5nKDExKTsgfTtcbmV4cG9ydHMudGltZSA9IHRpbWU7XG52YXIgZHVyYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBlcmlvZCA9IGR1cmF0ZShbXG4gICAgICAgIFtcIllcIiwgKDAsIGV4cG9ydHMuaW50ZWdlcikoMCwgMTAwKV0sXG4gICAgICAgIFtcIk1cIiwgKDAsIGV4cG9ydHMuaW50ZWdlcikoMCwgMTIpXSxcbiAgICAgICAgW1wiRFwiLCAoMCwgZXhwb3J0cy5pbnRlZ2VyKSgwLCAzMSldLFxuICAgIF0pO1xuICAgIHZhciB0aW1lID0gZHVyYXRlKFtcbiAgICAgICAgW1wiSFwiLCAoMCwgZXhwb3J0cy5pbnRlZ2VyKSgwLCAyNCldLFxuICAgICAgICBbXCJNXCIsICgwLCBleHBvcnRzLmludGVnZXIpKDAsIDYwKV0sXG4gICAgICAgIFtcIlNcIiwgKDAsIGV4cG9ydHMuaW50ZWdlcikoMCwgNjApXSxcbiAgICBdKTtcbiAgICBpZiAocGVyaW9kLmxlbmd0aCArIHRpbWUubGVuZ3RoID09PSAwKVxuICAgICAgICByZXR1cm4gXCJQVDBTXCI7XG4gICAgcmV0dXJuIFwiUFwiLmNvbmNhdChwZXJpb2QpLmNvbmNhdCh0aW1lLmxlbmd0aCA/IFwiVFwiIDogXCJcIikuY29uY2F0KHRpbWUpO1xufTtcbmV4cG9ydHMuZHVyYXRpb24gPSBkdXJhdGlvbjtcbi8vIFBPSU5URVJTXG52YXIganNvblBvaW50ZXIgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBcIi9jb21wb25lbnRzL3NjaGVtYXMvXCIuY29uY2F0KCgwLCBleHBvcnRzLnN0cmluZykoMTApKTsgfTtcbmV4cG9ydHMuanNvblBvaW50ZXIgPSBqc29uUG9pbnRlcjtcbnZhciByZWxhdGl2ZUpzb25Qb2ludGVyID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gXCJcIi5jb25jYXQoKDAsIGV4cG9ydHMuaW50ZWdlcikoMCwgMTApLCBcIiNcIik7IH07XG5leHBvcnRzLnJlbGF0aXZlSnNvblBvaW50ZXIgPSByZWxhdGl2ZUpzb25Qb2ludGVyO1xudmFyIERBWSA9IDg2NDAwMDAwO1xudmFyIGR1cmF0ZSA9IGZ1bmN0aW9uIChlbGVtZW50cykge1xuICAgIHJldHVybiBlbGVtZW50c1xuICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChfYSkge1xuICAgICAgICB2YXIgX2IgPSBfX3JlYWQoX2EsIDIpLCBfdW5pdCA9IF9iWzBdLCB2YWx1ZSA9IF9iWzFdO1xuICAgICAgICByZXR1cm4gdmFsdWUgIT09IDA7XG4gICAgfSlcbiAgICAgICAgLm1hcChmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgdmFyIF9iID0gX19yZWFkKF9hLCAyKSwgdW5pdCA9IF9iWzBdLCB2YWx1ZSA9IF9iWzFdO1xuICAgICAgICByZXR1cm4gXCJcIi5jb25jYXQodmFsdWUpLmNvbmNhdCh1bml0KTtcbiAgICB9KVxuICAgICAgICAuam9pbihcIlwiKTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1SYW5kb21HZW5lcmF0b3IuanMubWFwIiwKICAgICJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5SYW5kb21HZW5lcmF0b3IgPSB2b2lkIDA7XG5leHBvcnRzLlJhbmRvbUdlbmVyYXRvciA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9SYW5kb21HZW5lcmF0b3JcIikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwKICAgICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuJGV2ZXJ5ID0gdm9pZCAwO1xudmFyICRldmVyeSA9IGZ1bmN0aW9uIChhcnJheSwgcHJlZCkge1xuICAgIHZhciBlcnJvciA9IG51bGw7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7ICsraSlcbiAgICAgICAgaWYgKG51bGwgIT09IChlcnJvciA9IHByZWQoYXJyYXlbaV0sIGkpKSlcbiAgICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICByZXR1cm4gbnVsbDtcbn07XG5leHBvcnRzLiRldmVyeSA9ICRldmVyeTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPSRldmVyeS5qcy5tYXAiLAogICAgIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVHlwZUd1YXJkRXJyb3IgPSB2b2lkIDA7XG52YXIgVHlwZUd1YXJkRXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFR5cGVHdWFyZEVycm9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFR5cGVHdWFyZEVycm9yKHByb3BzKSB7XG4gICAgICAgIHZhciBfbmV3VGFyZ2V0ID0gdGhpcy5jb25zdHJ1Y3RvcjtcbiAgICAgICAgLy8gTUVTU0FHRSBDT05TVFJVQ1RJT05cbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcHJvcHMubWVzc2FnZSB8fFxuICAgICAgICAgICAgXCJFcnJvciBvbiBcIi5jb25jYXQocHJvcHMubWV0aG9kLCBcIigpOiBpbnZhbGlkIHR5cGVcIikuY29uY2F0KHByb3BzLnBhdGggPyBcIiBvbiBcIi5jb25jYXQocHJvcHMucGF0aCkgOiBcIlwiLCBcIiwgZXhwZWN0IHRvIGJlIFwiKS5jb25jYXQocHJvcHMuZXhwZWN0ZWQpKSB8fCB0aGlzO1xuICAgICAgICAvLyBJTkhFUklUQU5DRSBQT0xZRklMTFxuICAgICAgICB2YXIgcHJvdG8gPSBfbmV3VGFyZ2V0LnByb3RvdHlwZTtcbiAgICAgICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZilcbiAgICAgICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihfdGhpcywgcHJvdG8pO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBfdGhpcy5fX3Byb3RvX18gPSBwcm90bztcbiAgICAgICAgLy8gQVNTSUdOIE1FTUJFUlNcbiAgICAgICAgX3RoaXMubWV0aG9kID0gcHJvcHMubWV0aG9kO1xuICAgICAgICBfdGhpcy5wYXRoID0gcHJvcHMucGF0aDtcbiAgICAgICAgX3RoaXMuZXhwZWN0ZWQgPSBwcm9wcy5leHBlY3RlZDtcbiAgICAgICAgX3RoaXMudmFsdWUgPSBwcm9wcy52YWx1ZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gVHlwZUd1YXJkRXJyb3I7XG59KEVycm9yKSk7XG5leHBvcnRzLlR5cGVHdWFyZEVycm9yID0gVHlwZUd1YXJkRXJyb3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1UeXBlR3VhcmRFcnJvci5qcy5tYXAiLAogICAgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy4kZ3VhcmQgPSB2b2lkIDA7XG52YXIgVHlwZUd1YXJkRXJyb3JfMSA9IHJlcXVpcmUoXCIuLi9UeXBlR3VhcmRFcnJvclwiKTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbnZhciAkZ3VhcmQgPSBmdW5jdGlvbiAobWV0aG9kKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChleGNlcHRpb25hYmxlLCBwcm9wcywgZmFjdG9yeSkge1xuICAgICAgICBpZiAoZXhjZXB0aW9uYWJsZSA9PT0gdHJ1ZSlcbiAgICAgICAgICAgIHRocm93IChmYWN0b3J5ICE9PSBudWxsICYmIGZhY3RvcnkgIT09IHZvaWQgMCA/IGZhY3RvcnkgOiAoZnVuY3Rpb24gKHByb3BzKSB7IHJldHVybiBuZXcgVHlwZUd1YXJkRXJyb3JfMS5UeXBlR3VhcmRFcnJvcihwcm9wcyk7IH0pKSh7XG4gICAgICAgICAgICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICAgICAgICAgICAgcGF0aDogcHJvcHMucGF0aCxcbiAgICAgICAgICAgICAgICBleHBlY3RlZDogcHJvcHMuZXhwZWN0ZWQsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHByb3BzLnZhbHVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xufTtcbmV4cG9ydHMuJGd1YXJkID0gJGd1YXJkO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9JGd1YXJkLmpzLm1hcCIsCiAgICAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLiRqb2luID0gdm9pZCAwO1xudmFyICRqb2luID0gZnVuY3Rpb24gKHN0cikge1xuICAgIHJldHVybiB2YXJpYWJsZShzdHIpID8gXCIuXCIuY29uY2F0KHN0cikgOiBcIltcIi5jb25jYXQoSlNPTi5zdHJpbmdpZnkoc3RyKSwgXCJdXCIpO1xufTtcbmV4cG9ydHMuJGpvaW4gPSAkam9pbjtcbnZhciB2YXJpYWJsZSA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICByZXR1cm4gcmVzZXJ2ZWQoc3RyKSA9PT0gZmFsc2UgJiYgL15bYS16QS1aXyRdW2EtekEtWl8kMC05XSokL2cudGVzdChzdHIpO1xufTtcbnZhciByZXNlcnZlZCA9IGZ1bmN0aW9uIChzdHIpIHsgcmV0dXJuIFJFU0VSVkVELmhhcyhzdHIpOyB9O1xudmFyIFJFU0VSVkVEID0gbmV3IFNldChbXG4gICAgXCJicmVha1wiLFxuICAgIFwiY2FzZVwiLFxuICAgIFwiY2F0Y2hcIixcbiAgICBcImNsYXNzXCIsXG4gICAgXCJjb25zdFwiLFxuICAgIFwiY29udGludWVcIixcbiAgICBcImRlYnVnZ2VyXCIsXG4gICAgXCJkZWZhdWx0XCIsXG4gICAgXCJkZWxldGVcIixcbiAgICBcImRvXCIsXG4gICAgXCJlbHNlXCIsXG4gICAgXCJlbnVtXCIsXG4gICAgXCJleHBvcnRcIixcbiAgICBcImV4dGVuZHNcIixcbiAgICBcImZhbHNlXCIsXG4gICAgXCJmaW5hbGx5XCIsXG4gICAgXCJmb3JcIixcbiAgICBcImZ1bmN0aW9uXCIsXG4gICAgXCJpZlwiLFxuICAgIFwiaW1wb3J0XCIsXG4gICAgXCJpblwiLFxuICAgIFwiaW5zdGFuY2VvZlwiLFxuICAgIFwibmV3XCIsXG4gICAgXCJudWxsXCIsXG4gICAgXCJyZXR1cm5cIixcbiAgICBcInN1cGVyXCIsXG4gICAgXCJzd2l0Y2hcIixcbiAgICBcInRoaXNcIixcbiAgICBcInRocm93XCIsXG4gICAgXCJ0cnVlXCIsXG4gICAgXCJ0cnlcIixcbiAgICBcInR5cGVvZlwiLFxuICAgIFwidmFyXCIsXG4gICAgXCJ2b2lkXCIsXG4gICAgXCJ3aGlsZVwiLFxuICAgIFwid2l0aFwiLFxuXSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD0kam9pbi5qcy5tYXAiLAogICAgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy4kcmVwb3J0ID0gdm9pZCAwO1xudmFyICRyZXBvcnQgPSBmdW5jdGlvbiAoYXJyYXkpIHtcbiAgICB2YXIgcmVwb3J0YWJsZSA9IGZ1bmN0aW9uIChwYXRoKSB7XG4gICAgICAgIGlmIChhcnJheS5sZW5ndGggPT09IDApXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgdmFyIGxhc3QgPSBhcnJheVthcnJheS5sZW5ndGggLSAxXS5wYXRoO1xuICAgICAgICByZXR1cm4gcGF0aC5sZW5ndGggPiBsYXN0Lmxlbmd0aCB8fCBsYXN0LnN1YnN0cmluZygwLCBwYXRoLmxlbmd0aCkgIT09IHBhdGg7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGV4Y2VwdGFibGUsIGVycm9yKSB7XG4gICAgICAgIGlmIChleGNlcHRhYmxlICYmIHJlcG9ydGFibGUoZXJyb3IucGF0aCkpXG4gICAgICAgICAgICBhcnJheS5wdXNoKGVycm9yKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG59O1xuZXhwb3J0cy4kcmVwb3J0ID0gJHJlcG9ydDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPSRyZXBvcnQuanMubWFwIiwKICAgICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuJGlzX2JldHdlZW4gPSB2b2lkIDA7XG52YXIgJGlzX2JldHdlZW4gPSBmdW5jdGlvbiAodmFsdWUsIG1pbmltdW0sIG1heGltdW0pIHtcbiAgICByZXR1cm4gbWluaW11bSA8PSB2YWx1ZSAmJiB2YWx1ZSA8PSBtYXhpbXVtO1xufTtcbmV4cG9ydHMuJGlzX2JldHdlZW4gPSAkaXNfYmV0d2Vlbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPSRpc19iZXR3ZWVuLmpzLm1hcCIsCiAgICAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLiRpc19iaWdpbnRfc3RyaW5nID0gdm9pZCAwO1xudmFyICRpc19iaWdpbnRfc3RyaW5nID0gZnVuY3Rpb24gKHN0cikge1xuICAgIHRyeSB7XG4gICAgICAgIEJpZ0ludChzdHIpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY2F0Y2ggKF9hKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59O1xuZXhwb3J0cy4kaXNfYmlnaW50X3N0cmluZyA9ICRpc19iaWdpbnRfc3RyaW5nO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9JHN0b2xsLmpzLm1hcCIsCiAgICAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzID0gdm9pZCAwO1xudmFyIF9pc19iZXR3ZWVuXzEgPSByZXF1aXJlKFwiLi8kaXNfYmV0d2VlblwiKTtcbnZhciBfc3RvbGxfMSA9IHJlcXVpcmUoXCIuLyRzdG9sbFwiKTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbnZhciBpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICh7XG4gICAgaXNfYmV0d2VlbjogX2lzX2JldHdlZW5fMS4kaXNfYmV0d2VlbixcbiAgICBpc19iaWdpbnRfc3RyaW5nOiBfc3RvbGxfMS4kaXNfYmlnaW50X3N0cmluZyxcbn0pOyB9O1xuZXhwb3J0cy5pcyA9IGlzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXMuanMubWFwIiwKICAgICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZnVuY3Rpb25hbEFzc2VydCA9IHZvaWQgMDtcbnZhciBUeXBlR3VhcmRFcnJvcl8xID0gcmVxdWlyZShcIi4uLy4uL1R5cGVHdWFyZEVycm9yXCIpO1xudmFyIGZ1bmN0aW9uYWxBc3NlcnQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAoe1xuICAgIGVycm9yRmFjdG9yeTogZnVuY3Rpb24gKHApIHsgcmV0dXJuIG5ldyBUeXBlR3VhcmRFcnJvcl8xLlR5cGVHdWFyZEVycm9yKHApOyB9LFxufSk7IH07XG5leHBvcnRzLmZ1bmN0aW9uYWxBc3NlcnQgPSBmdW5jdGlvbmFsQXNzZXJ0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZnVuY3Rpb25hbC5qcy5tYXAiLAogICAgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy4kbnVtYmVyID0gdm9pZCAwO1xudmFyIFR5cGVHdWFyZEVycm9yXzEgPSByZXF1aXJlKFwiLi4vVHlwZUd1YXJkRXJyb3JcIik7XG52YXIgJG51bWJlciA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGlmIChpc0Zpbml0ZSh2YWx1ZSkgPT09IGZhbHNlKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUd1YXJkRXJyb3JfMS5UeXBlR3VhcmRFcnJvcih7XG4gICAgICAgICAgICBtZXRob2Q6IFwidHlwaWEuanNvbi5zdHJpbmdpZnlcIixcbiAgICAgICAgICAgIGV4cGVjdGVkOiBcIm51bWJlclwiLFxuICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgbWVzc2FnZTogXCJFcnJvciBvbiB0eXBpYS5qc29uLnN0cmluZ2lmeSgpOiBpbmZpbml0ZSBvciBub3QgYSBudW1iZXIuXCIsXG4gICAgICAgIH0pO1xuICAgIHJldHVybiB2YWx1ZTtcbn07XG5leHBvcnRzLiRudW1iZXIgPSAkbnVtYmVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9JG51bWJlci5qcy5tYXAiLAogICAgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy4kcmVzdCA9IHZvaWQgMDtcbnZhciAkcmVzdCA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICByZXR1cm4gc3RyLmxlbmd0aCA9PT0gMiA/IFwiXCIgOiBcIixcIiArIHN0ci5zdWJzdHJpbmcoMSwgc3RyLmxlbmd0aCAtIDEpO1xufTtcbmV4cG9ydHMuJHJlc3QgPSAkcmVzdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPSRyZXN0LmpzLm1hcCIsCiAgICAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLiRzdHJpbmcgPSB2b2lkIDA7XG4vKipcbiAqIEluIHRoZSBwYXN0LCBuYW1lIG9mIGB0eXBpYWAgd2FzIGB0eXBlc2NyaXB0LWpzb25gLCBhbmQgc3VwcG9ydGVkXG4gKiBKU09OIHNlcmlhbGl6YXRpb24gYnkgd3JhcHBpbmcgYGZhc3QtanNvbi1zdHJpbmdpZnkuIGB0eXBlc2NyaXB0LWpzb25gIHdhc1xuICogYSBoZWxwZXIgbGlicmFyeSBvZiBgZmFzdC1qc29uLXN0cmluZ2lmeWAsIHdoaWNoIGNhbiBza2lwIG1hbnVhbCBKU09OIHNjaGVtYVxuICogZGVmaW5pdGlvbiBqdXN0IGJ5IHB1dHRpbmcgcHVyZSBUeXBlU2NyaXB0IHR5cGUuXG4gKlxuICogVGhpcyBgJHN0cmluZ2AgZnVuY3Rpb24gaXMgYSBwYXJ0IG9mIGBmYXN0LWpzb24tc3RyaW5naWZ5YCBhdCB0aGF0IHRpbWUsIGFuZFxuICogc3RpbGwgYmVpbmcgdXNlZCBpbiBgdHlwaWFgIGZvciB0aGUgc3RyaW5nIHNlcmlhbGl6YXRpb24uXG4gKlxuICogQGludGVybmFsXG4gKiBAcmVmZXJlbmNlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYXN0aWZ5L2Zhc3QtanNvbi1zdHJpbmdpZnkvYmxvYi9tYXN0ZXIvbGliL3NlcmlhbGl6ZXIuanNcbiAqIEBibG9nIGh0dHBzOi8vZGV2LnRvL3NhbWNob24vZ29vZC1ieWUtdHlwZXNjcmlwdC1pcy1hbmNlc3Rvci1vZi10eXBpYS0yMDAwMHgtZmFzdGVyLXZhbGlkYXRvci00OWZpXG4gKi9cbnZhciAkc3RyaW5nID0gZnVuY3Rpb24gKHN0cikge1xuICAgIHZhciBsZW4gPSBzdHIubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBcIlwiO1xuICAgIHZhciBsYXN0ID0gLTE7XG4gICAgdmFyIHBvaW50ID0gMjU1O1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgcG9pbnQgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICAgICAgaWYgKHBvaW50IDwgMzIpIHtcbiAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShzdHIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwb2ludCA+PSAweGQ4MDAgJiYgcG9pbnQgPD0gMHhkZmZmKSB7XG4gICAgICAgICAgICAvLyBUaGUgY3VycmVudCBjaGFyYWN0ZXIgaXMgYSBzdXJyb2dhdGUuXG4gICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoc3RyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9pbnQgPT09IDB4MjIgfHwgLy8gJ1wiJ1xuICAgICAgICAgICAgcG9pbnQgPT09IDB4NWMgLy8gJ1xcJ1xuICAgICAgICApIHtcbiAgICAgICAgICAgIGxhc3QgPT09IC0xICYmIChsYXN0ID0gMCk7XG4gICAgICAgICAgICByZXN1bHQgKz0gc3RyLnNsaWNlKGxhc3QsIGkpICsgXCJcXFxcXCI7XG4gICAgICAgICAgICBsYXN0ID0gaTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gKChsYXN0ID09PSAtMSAmJiAnXCInICsgc3RyICsgJ1wiJykgfHwgJ1wiJyArIHJlc3VsdCArIHN0ci5zbGljZShsYXN0KSArICdcIicpO1xufTtcbmV4cG9ydHMuJHN0cmluZyA9ICRzdHJpbmc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD0kc3RyaW5nLmpzLm1hcCIsCiAgICAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLiR0YWlsID0gdm9pZCAwO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xudmFyICR0YWlsID0gZnVuY3Rpb24gKHN0cikge1xuICAgIHJldHVybiBzdHJbc3RyLmxlbmd0aCAtIDFdID09PSBcIixcIiA/IHN0ci5zdWJzdHJpbmcoMCwgc3RyLmxlbmd0aCAtIDEpIDogc3RyO1xufTtcbmV4cG9ydHMuJHRhaWwgPSAkdGFpbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPSR0YWlsLmpzLm1hcCIsCiAgICAiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy4kdGhyb3dzID0gdm9pZCAwO1xudmFyIFR5cGVHdWFyZEVycm9yXzEgPSByZXF1aXJlKFwiLi4vVHlwZUd1YXJkRXJyb3JcIik7XG52YXIgJHRocm93cyA9IGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlR3VhcmRFcnJvcl8xLlR5cGVHdWFyZEVycm9yKF9fYXNzaWduKF9fYXNzaWduKHt9LCBwcm9wcyksIHsgbWV0aG9kOiBcInR5cGlhLlwiLmNvbmNhdChtZXRob2QpIH0pKTtcbiAgICB9O1xufTtcbmV4cG9ydHMuJHRocm93cyA9ICR0aHJvd3M7XG4vLyMgc291cmNlTWFwcGluZ1VSTD0kdGhyb3dzLmpzLm1hcCIsCiAgICAiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zdHJpbmdpZnkgPSB2b2lkIDA7XG52YXIgX251bWJlcl8xID0gcmVxdWlyZShcIi4uLyRudW1iZXJcIik7XG52YXIgX3Jlc3RfMSA9IHJlcXVpcmUoXCIuLi8kcmVzdFwiKTtcbnZhciBfc3RyaW5nXzEgPSByZXF1aXJlKFwiLi4vJHN0cmluZ1wiKTtcbnZhciBfdGFpbF8xID0gcmVxdWlyZShcIi4uLyR0YWlsXCIpO1xudmFyIF90aHJvd3NfMSA9IHJlcXVpcmUoXCIuLi8kdGhyb3dzXCIpO1xudmFyIGlzXzEgPSByZXF1aXJlKFwiLi4vaXNcIik7XG52YXIgc3RyaW5naWZ5ID0gZnVuY3Rpb24gKG1ldGhvZCkgeyByZXR1cm4gKF9fYXNzaWduKF9fYXNzaWduKHt9LCAoMCwgaXNfMS5pcykoKSksIHsgbnVtYmVyOiBfbnVtYmVyXzEuJG51bWJlciwgc3RyaW5nOiBfc3RyaW5nXzEuJHN0cmluZywgdGFpbDogX3RhaWxfMS4kdGFpbCwgcmVzdDogX3Jlc3RfMS4kcmVzdCwgdGhyb3dzOiAoMCwgX3Rocm93c18xLiR0aHJvd3MpKFwianNvbi5cIi5jb25jYXQobWV0aG9kKSkgfSkpOyB9O1xuZXhwb3J0cy5zdHJpbmdpZnkgPSBzdHJpbmdpZnk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1qc29uLmpzLm1hcCIsCiAgICAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmZpbGUgPSBleHBvcnRzLmJsb2IgPSBleHBvcnRzLmFycmF5ID0gZXhwb3J0cy5zdHJpbmcgPSBleHBvcnRzLmJpZ2ludCA9IGV4cG9ydHMubnVtYmVyID0gZXhwb3J0cy5ib29sZWFuID0gdm9pZCAwO1xudmFyIGJvb2xlYW4gPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICByZXR1cm4gaW5wdXQgaW5zdGFuY2VvZiBGaWxlXG4gICAgICAgID8gaW5wdXRcbiAgICAgICAgOiBpbnB1dCA9PT0gbnVsbFxuICAgICAgICAgICAgPyB1bmRlZmluZWRcbiAgICAgICAgICAgIDogaW5wdXQgPT09IFwibnVsbFwiXG4gICAgICAgICAgICAgICAgPyBudWxsXG4gICAgICAgICAgICAgICAgOiBpbnB1dC5sZW5ndGggPT09IDBcbiAgICAgICAgICAgICAgICAgICAgPyB0cnVlXG4gICAgICAgICAgICAgICAgICAgIDogaW5wdXQgPT09IFwidHJ1ZVwiIHx8IGlucHV0ID09PSBcIjFcIlxuICAgICAgICAgICAgICAgICAgICAgICAgPyB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGlucHV0ID09PSBcImZhbHNlXCIgfHwgaW5wdXQgPT09IFwiMFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogaW5wdXQ7XG59OyAvLyB3cm9uZyB0eXBlXG5leHBvcnRzLmJvb2xlYW4gPSBib29sZWFuO1xudmFyIG51bWJlciA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgIHJldHVybiBpbnB1dCBpbnN0YW5jZW9mIEZpbGVcbiAgICAgICAgPyBpbnB1dFxuICAgICAgICA6ICEhKGlucHV0ID09PSBudWxsIHx8IGlucHV0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBpbnB1dC5sZW5ndGgpXG4gICAgICAgICAgICA/IGlucHV0ID09PSBcIm51bGxcIlxuICAgICAgICAgICAgICAgID8gbnVsbFxuICAgICAgICAgICAgICAgIDogdG9OdW1iZXIoaW5wdXQpXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbn07XG5leHBvcnRzLm51bWJlciA9IG51bWJlcjtcbnZhciBiaWdpbnQgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICByZXR1cm4gaW5wdXQgaW5zdGFuY2VvZiBGaWxlXG4gICAgICAgID8gaW5wdXRcbiAgICAgICAgOiAhIShpbnB1dCA9PT0gbnVsbCB8fCBpbnB1dCA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW5wdXQubGVuZ3RoKVxuICAgICAgICAgICAgPyBpbnB1dCA9PT0gXCJudWxsXCJcbiAgICAgICAgICAgICAgICA/IG51bGxcbiAgICAgICAgICAgICAgICA6IHRvQmlnaW50KGlucHV0KVxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG59O1xuZXhwb3J0cy5iaWdpbnQgPSBiaWdpbnQ7XG52YXIgc3RyaW5nID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgcmV0dXJuIGlucHV0IGluc3RhbmNlb2YgRmlsZVxuICAgICAgICA/IGlucHV0XG4gICAgICAgIDogaW5wdXQgPT09IG51bGxcbiAgICAgICAgICAgID8gdW5kZWZpbmVkXG4gICAgICAgICAgICA6IGlucHV0ID09PSBcIm51bGxcIlxuICAgICAgICAgICAgICAgID8gbnVsbFxuICAgICAgICAgICAgICAgIDogaW5wdXQ7XG59O1xuZXhwb3J0cy5zdHJpbmcgPSBzdHJpbmc7XG52YXIgYXJyYXkgPSBmdW5jdGlvbiAoaW5wdXQsIGFsdGVybmF0aXZlKSB7XG4gICAgcmV0dXJuIGlucHV0Lmxlbmd0aCA/IGlucHV0IDogYWx0ZXJuYXRpdmU7XG59O1xuZXhwb3J0cy5hcnJheSA9IGFycmF5O1xudmFyIGJsb2IgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICByZXR1cm4gaW5wdXQgaW5zdGFuY2VvZiBCbG9iXG4gICAgICAgID8gaW5wdXRcbiAgICAgICAgOiBpbnB1dCA9PT0gbnVsbFxuICAgICAgICAgICAgPyB1bmRlZmluZWRcbiAgICAgICAgICAgIDogaW5wdXQgPT09IFwibnVsbFwiXG4gICAgICAgICAgICAgICAgPyBudWxsXG4gICAgICAgICAgICAgICAgOiBpbnB1dDtcbn07XG5leHBvcnRzLmJsb2IgPSBibG9iO1xudmFyIGZpbGUgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICByZXR1cm4gaW5wdXQgaW5zdGFuY2VvZiBGaWxlXG4gICAgICAgID8gaW5wdXRcbiAgICAgICAgOiBpbnB1dCA9PT0gbnVsbFxuICAgICAgICAgICAgPyB1bmRlZmluZWRcbiAgICAgICAgICAgIDogaW5wdXQgPT09IFwibnVsbFwiXG4gICAgICAgICAgICAgICAgPyBudWxsXG4gICAgICAgICAgICAgICAgOiBpbnB1dDtcbn07XG5leHBvcnRzLmZpbGUgPSBmaWxlO1xudmFyIHRvTnVtYmVyID0gZnVuY3Rpb24gKHN0cikge1xuICAgIHZhciB2YWx1ZSA9IE51bWJlcihzdHIpO1xuICAgIHJldHVybiBpc05hTih2YWx1ZSkgPyBzdHIgOiB2YWx1ZTtcbn07XG52YXIgdG9CaWdpbnQgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIEJpZ0ludChzdHIpO1xuICAgIH1cbiAgICBjYXRjaCAoX2EpIHtcbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9JEZvcm1EYXRhUmVhZGVyLmpzLm1hcCIsCiAgICAiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuJEZvcm1EYXRhUmVhZGVyID0gdm9pZCAwO1xuZXhwb3J0cy4kRm9ybURhdGFSZWFkZXIgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vJEZvcm1EYXRhUmVhZGVyXCIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsCiAgICAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnN0cmluZyA9IGV4cG9ydHMubnVtYmVyID0gZXhwb3J0cy5iaWdpbnQgPSBleHBvcnRzLmJvb2xlYW4gPSB2b2lkIDA7XG52YXIgYm9vbGVhbiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkXG4gICAgICAgID8gdmFsdWUgPT09IFwidHJ1ZVwiXG4gICAgICAgICAgICA/IHRydWVcbiAgICAgICAgICAgIDogdmFsdWUgPT09IFwiZmFsc2VcIlxuICAgICAgICAgICAgICAgID8gZmFsc2VcbiAgICAgICAgICAgICAgICA6IHZhbHVlXG4gICAgICAgIDogdW5kZWZpbmVkO1xufTtcbmV4cG9ydHMuYm9vbGVhbiA9IGJvb2xlYW47XG52YXIgYmlnaW50ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgPyB0b0JpZ2ludCh2YWx1ZSkgOiB1bmRlZmluZWQ7XG59O1xuZXhwb3J0cy5iaWdpbnQgPSBiaWdpbnQ7XG52YXIgbnVtYmVyID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgPyB0b051bWJlcih2YWx1ZSkgOiB1bmRlZmluZWQ7XG59O1xuZXhwb3J0cy5udW1iZXIgPSBudW1iZXI7XG52YXIgc3RyaW5nID0gZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiB2YWx1ZTsgfTtcbmV4cG9ydHMuc3RyaW5nID0gc3RyaW5nO1xudmFyIHRvQmlnaW50ID0gZnVuY3Rpb24gKHN0cikge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBCaWdJbnQoc3RyKTtcbiAgICB9XG4gICAgY2F0Y2ggKF9hKSB7XG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgfVxufTtcbnZhciB0b051bWJlciA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICB2YXIgdmFsdWUgPSBOdW1iZXIoc3RyKTtcbiAgICByZXR1cm4gaXNOYU4odmFsdWUpID8gc3RyIDogdmFsdWU7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9JEhlYWRlcnNSZWFkZXIuanMubWFwIiwKICAgICJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy4kSGVhZGVyc1JlYWRlciA9IHZvaWQgMDtcbmV4cG9ydHMuJEhlYWRlcnNSZWFkZXIgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vJEhlYWRlcnNSZWFkZXJcIikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwKICAgICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc3RyaW5nID0gZXhwb3J0cy5udW1iZXIgPSBleHBvcnRzLmJpZ2ludCA9IGV4cG9ydHMuYm9vbGVhbiA9IHZvaWQgMDtcbnZhciBib29sZWFuID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSBcIm51bGxcIlxuICAgICAgICA/IHZhbHVlID09PSBcInRydWVcIiB8fCB2YWx1ZSA9PT0gXCIxXCJcbiAgICAgICAgICAgID8gdHJ1ZVxuICAgICAgICAgICAgOiB2YWx1ZSA9PT0gXCJmYWxzZVwiIHx8IHZhbHVlID09PSBcIjBcIlxuICAgICAgICAgICAgICAgID8gZmFsc2VcbiAgICAgICAgICAgICAgICA6IHZhbHVlXG4gICAgICAgIDogbnVsbDtcbn07XG5leHBvcnRzLmJvb2xlYW4gPSBib29sZWFuO1xudmFyIGJpZ2ludCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gXCJudWxsXCIgPyB0b0JpZ2ludCh2YWx1ZSkgOiBudWxsO1xufTtcbmV4cG9ydHMuYmlnaW50ID0gYmlnaW50O1xudmFyIG51bWJlciA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gXCJudWxsXCIgPyB0b051bWJlcih2YWx1ZSkgOiBudWxsO1xufTtcbmV4cG9ydHMubnVtYmVyID0gbnVtYmVyO1xudmFyIHN0cmluZyA9IGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gKHZhbHVlICE9PSBcIm51bGxcIiA/IHZhbHVlIDogbnVsbCk7IH07XG5leHBvcnRzLnN0cmluZyA9IHN0cmluZztcbnZhciB0b051bWJlciA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICB2YXIgdmFsdWUgPSBOdW1iZXIoc3RyKTtcbiAgICByZXR1cm4gaXNOYU4odmFsdWUpID8gc3RyIDogdmFsdWU7XG59O1xudmFyIHRvQmlnaW50ID0gZnVuY3Rpb24gKHN0cikge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBCaWdJbnQoc3RyKTtcbiAgICB9XG4gICAgY2F0Y2ggKF9hKSB7XG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgfVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPSRQYXJhbWV0ZXJSZWFkZXIuanMubWFwIiwKICAgICJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy4kUGFyYW1ldGVyUmVhZGVyID0gdm9pZCAwO1xuZXhwb3J0cy4kUGFyYW1ldGVyUmVhZGVyID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuLyRQYXJhbWV0ZXJSZWFkZXJcIikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwKICAgICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYXJyYXkgPSBleHBvcnRzLnBhcmFtcyA9IGV4cG9ydHMuc3RyaW5nID0gZXhwb3J0cy5iaWdpbnQgPSBleHBvcnRzLm51bWJlciA9IGV4cG9ydHMuYm9vbGVhbiA9IHZvaWQgMDtcbnZhciBib29sZWFuID0gZnVuY3Rpb24gKHN0cikge1xuICAgIHJldHVybiBzdHIgPT09IG51bGxcbiAgICAgICAgPyB1bmRlZmluZWRcbiAgICAgICAgOiBzdHIgPT09IFwibnVsbFwiXG4gICAgICAgICAgICA/IG51bGxcbiAgICAgICAgICAgIDogc3RyLmxlbmd0aCA9PT0gMFxuICAgICAgICAgICAgICAgID8gdHJ1ZVxuICAgICAgICAgICAgICAgIDogc3RyID09PSBcInRydWVcIiB8fCBzdHIgPT09IFwiMVwiXG4gICAgICAgICAgICAgICAgICAgID8gdHJ1ZVxuICAgICAgICAgICAgICAgICAgICA6IHN0ciA9PT0gXCJmYWxzZVwiIHx8IHN0ciA9PT0gXCIwXCJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIDogc3RyO1xufTsgLy8gd3JvbmcgdHlwZVxuZXhwb3J0cy5ib29sZWFuID0gYm9vbGVhbjtcbnZhciBudW1iZXIgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgcmV0dXJuICEhKHN0ciA9PT0gbnVsbCB8fCBzdHIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHN0ci5sZW5ndGgpID8gKHN0ciA9PT0gXCJudWxsXCIgPyBudWxsIDogdG9OdW1iZXIoc3RyKSkgOiB1bmRlZmluZWQ7XG59O1xuZXhwb3J0cy5udW1iZXIgPSBudW1iZXI7XG52YXIgYmlnaW50ID0gZnVuY3Rpb24gKHN0cikge1xuICAgIHJldHVybiAhIShzdHIgPT09IG51bGwgfHwgc3RyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzdHIubGVuZ3RoKSA/IChzdHIgPT09IFwibnVsbFwiID8gbnVsbCA6IHRvQmlnaW50KHN0cikpIDogdW5kZWZpbmVkO1xufTtcbmV4cG9ydHMuYmlnaW50ID0gYmlnaW50O1xudmFyIHN0cmluZyA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICByZXR1cm4gc3RyID09PSBudWxsID8gdW5kZWZpbmVkIDogc3RyID09PSBcIm51bGxcIiA/IG51bGwgOiBzdHI7XG59O1xuZXhwb3J0cy5zdHJpbmcgPSBzdHJpbmc7XG52YXIgcGFyYW1zID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICB2YXIgaW5kZXggPSBpbnB1dC5pbmRleE9mKFwiP1wiKTtcbiAgICAgICAgaW5wdXQgPSBpbmRleCA9PT0gLTEgPyBcIlwiIDogaW5wdXQuc3Vic3RyaW5nKGluZGV4ICsgMSk7XG4gICAgICAgIHJldHVybiBuZXcgVVJMU2VhcmNoUGFyYW1zKGlucHV0KTtcbiAgICB9XG4gICAgcmV0dXJuIGlucHV0O1xufTtcbmV4cG9ydHMucGFyYW1zID0gcGFyYW1zO1xudmFyIGFycmF5ID0gZnVuY3Rpb24gKGlucHV0LCBhbHRlcm5hdGl2ZSkge1xuICAgIHJldHVybiBpbnB1dC5sZW5ndGggPyBpbnB1dCA6IGFsdGVybmF0aXZlO1xufTtcbmV4cG9ydHMuYXJyYXkgPSBhcnJheTtcbnZhciB0b051bWJlciA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICB2YXIgdmFsdWUgPSBOdW1iZXIoc3RyKTtcbiAgICByZXR1cm4gaXNOYU4odmFsdWUpID8gc3RyIDogdmFsdWU7XG59O1xudmFyIHRvQmlnaW50ID0gZnVuY3Rpb24gKHN0cikge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBCaWdJbnQoc3RyKTtcbiAgICB9XG4gICAgY2F0Y2ggKF9hKSB7XG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgfVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPSRRdWVyeVJlYWRlci5qcy5tYXAiLAogICAgIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLiRRdWVyeVJlYWRlciA9IHZvaWQgMDtcbmV4cG9ydHMuJFF1ZXJ5UmVhZGVyID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuLyRRdWVyeVJlYWRlclwiKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLAogICAgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5xdWVyeSA9IGV4cG9ydHMucGFyYW1ldGVyID0gZXhwb3J0cy5oZWFkZXJzID0gZXhwb3J0cy5mb3JtRGF0YSA9IHZvaWQgMDtcbnZhciBfRm9ybURhdGFSZWFkZXJfMSA9IHJlcXVpcmUoXCIuLi8kRm9ybURhdGFSZWFkZXJcIik7XG52YXIgX0hlYWRlcnNSZWFkZXJfMSA9IHJlcXVpcmUoXCIuLi8kSGVhZGVyc1JlYWRlclwiKTtcbnZhciBfUGFyYW1ldGVyUmVhZGVyXzEgPSByZXF1aXJlKFwiLi4vJFBhcmFtZXRlclJlYWRlclwiKTtcbnZhciBfUXVlcnlSZWFkZXJfMSA9IHJlcXVpcmUoXCIuLi8kUXVlcnlSZWFkZXJcIik7XG52YXIgZm9ybURhdGEgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBfRm9ybURhdGFSZWFkZXJfMS4kRm9ybURhdGFSZWFkZXI7IH07XG5leHBvcnRzLmZvcm1EYXRhID0gZm9ybURhdGE7XG52YXIgaGVhZGVycyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF9IZWFkZXJzUmVhZGVyXzEuJEhlYWRlcnNSZWFkZXI7IH07XG5leHBvcnRzLmhlYWRlcnMgPSBoZWFkZXJzO1xudmFyIHBhcmFtZXRlciA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF9QYXJhbWV0ZXJSZWFkZXJfMS4kUGFyYW1ldGVyUmVhZGVyOyB9O1xuZXhwb3J0cy5wYXJhbWV0ZXIgPSBwYXJhbWV0ZXI7XG52YXIgcXVlcnkgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBfUXVlcnlSZWFkZXJfMS4kUXVlcnlSZWFkZXI7IH07XG5leHBvcnRzLnF1ZXJ5ID0gcXVlcnk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1odHRwLmpzLm1hcCIsCiAgICAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmVzY2FwZUR1cGxpY2F0ZSA9IGV4cG9ydHMuY2FwaXRhbGl6ZSA9IHZvaWQgMDtcbnZhciBjYXBpdGFsaXplID0gZnVuY3Rpb24gKHN0cikge1xuICAgIHJldHVybiBzdHIubGVuZ3RoID8gc3RyWzBdLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSkgOiBzdHI7XG59O1xuZXhwb3J0cy5jYXBpdGFsaXplID0gY2FwaXRhbGl6ZTtcbnZhciBlc2NhcGVEdXBsaWNhdGUgPSBmdW5jdGlvbiAoa2VlcCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoY2hhbmdlKSB7XG4gICAgICAgIHJldHVybiBrZWVwLmluY2x1ZGVzKGNoYW5nZSkgPyAoMCwgZXhwb3J0cy5lc2NhcGVEdXBsaWNhdGUpKGtlZXApKFwiX1wiLmNvbmNhdChjaGFuZ2UpKSA6IGNoYW5nZTtcbiAgICB9O1xufTtcbmV4cG9ydHMuZXNjYXBlRHVwbGljYXRlID0gZXNjYXBlRHVwbGljYXRlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3RyaW5nVXRpbC5qcy5tYXAiLAogICAgIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlN0cmluZ1V0aWwgPSB2b2lkIDA7XG5leHBvcnRzLlN0cmluZ1V0aWwgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vU3RyaW5nVXRpbFwiKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLAogICAgIlwidXNlIHN0cmljdFwiO1xudmFyIF9fcmVhZCA9ICh0aGlzICYmIHRoaXMuX19yZWFkKSB8fCBmdW5jdGlvbiAobywgbikge1xuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcbiAgICBpZiAoIW0pIHJldHVybiBvO1xuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xuICAgIHRyeSB7XG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxuICAgIH1cbiAgICByZXR1cm4gYXI7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5wYXNjYWwgPSBleHBvcnRzLmNhbWVsID0gZXhwb3J0cy5zbmFrZSA9IHZvaWQgMDtcbnZhciBTdHJpbmdVdGlsXzEgPSByZXF1aXJlKFwiLi4vU3RyaW5nVXRpbFwiKTtcbmZ1bmN0aW9uIHNuYWtlKHN0cikge1xuICAgIHZhciBpbmRleGVzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGNvZGUgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICAgICAgaWYgKDY1IDw9IGNvZGUgJiYgY29kZSA8PSA5MClcbiAgICAgICAgICAgIGluZGV4ZXMucHVzaChpKTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IGluZGV4ZXMubGVuZ3RoIC0gMTsgaSA+IDA7IC0taSkge1xuICAgICAgICB2YXIgbm93ID0gaW5kZXhlc1tpXTtcbiAgICAgICAgdmFyIHByZXYgPSBpbmRleGVzW2kgLSAxXTtcbiAgICAgICAgaWYgKG5vdyAtIHByZXYgPT09IDEpXG4gICAgICAgICAgICBpbmRleGVzLnNwbGljZShpLCAxKTtcbiAgICB9XG4gICAgaWYgKGluZGV4ZXMubGVuZ3RoICE9PSAwICYmIGluZGV4ZXNbMF0gPT09IDApXG4gICAgICAgIGluZGV4ZXMuc3BsaWNlKDAsIDEpO1xuICAgIGlmIChpbmRleGVzLmxlbmd0aCA9PT0gMClcbiAgICAgICAgcmV0dXJuIHN0ci50b0xvd2VyQ2FzZSgpO1xuICAgIHZhciByZXQgPSBcIlwiO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5kZXhlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZmlyc3QgPSBpID09PSAwID8gMCA6IGluZGV4ZXNbaSAtIDFdO1xuICAgICAgICB2YXIgbGFzdCA9IGluZGV4ZXNbaV07XG4gICAgICAgIHJldCArPSBzdHIuc3Vic3RyaW5nKGZpcnN0LCBsYXN0KS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICByZXQgKz0gXCJfXCI7XG4gICAgfVxuICAgIHJldCArPSBzdHIuc3Vic3RyaW5nKGluZGV4ZXNbaW5kZXhlcy5sZW5ndGggLSAxXSkudG9Mb3dlckNhc2UoKTtcbiAgICByZXR1cm4gcmV0O1xufVxuZXhwb3J0cy5zbmFrZSA9IHNuYWtlO1xuZnVuY3Rpb24gY2FtZWwoc3RyKSB7XG4gICAgcmV0dXJuIHVuc25ha2UoZnVuY3Rpb24gKHN0cikge1xuICAgICAgICBpZiAoc3RyLmxlbmd0aCA9PT0gMClcbiAgICAgICAgICAgIHJldHVybiBzdHI7XG4gICAgICAgIGVsc2UgaWYgKHN0clswXSA9PT0gc3RyWzBdLnRvVXBwZXJDYXNlKCkpXG4gICAgICAgICAgICByZXR1cm4gc3RyWzBdLnRvTG93ZXJDYXNlKCkgKyBzdHIuc3Vic3RyaW5nKDEpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICByZXR1cm4gc3RyO1xuICAgIH0pKHN0cik7XG59XG5leHBvcnRzLmNhbWVsID0gY2FtZWw7XG5mdW5jdGlvbiBwYXNjYWwoc3RyKSB7XG4gICAgcmV0dXJuIHVuc25ha2UoZnVuY3Rpb24gKHN0cikge1xuICAgICAgICBpZiAoc3RyLmxlbmd0aCA9PT0gMClcbiAgICAgICAgICAgIHJldHVybiBzdHI7XG4gICAgICAgIGVsc2UgaWYgKHN0clswXSA9PT0gc3RyWzBdLnRvTG93ZXJDYXNlKCkpXG4gICAgICAgICAgICByZXR1cm4gc3RyWzBdLnRvVXBwZXJDYXNlKCkgKyBzdHIuc3Vic3RyaW5nKDEpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICByZXR1cm4gc3RyO1xuICAgIH0pKHN0cik7XG59XG5leHBvcnRzLnBhc2NhbCA9IHBhc2NhbDtcbnZhciB1bnNuYWtlID0gZnVuY3Rpb24gKGVzY2FwZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHN0cikge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgICAgIHZhciBwcmVmaXggPSBcIlwiO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHN0cltpXSA9PT0gXCJfXCIpXG4gICAgICAgICAgICAgICAgcHJlZml4ICs9IFwiX1wiO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcmVmaXgubGVuZ3RoICE9PSAwKVxuICAgICAgICAgICAgc3RyID0gc3RyLnN1YnN0cmluZyhwcmVmaXgubGVuZ3RoKTtcbiAgICAgICAgdmFyIGluZGV4ZXMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBjaCA9IHN0cltpXTtcbiAgICAgICAgICAgIGlmIChjaCAhPT0gXCJfXCIpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB2YXIgbGFzdF8xID0gaW5kZXhlc1tpbmRleGVzLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgaWYgKGxhc3RfMSA9PT0gdW5kZWZpbmVkIHx8IGxhc3RfMVswXSArIGxhc3RfMVsxXSAhPT0gaSlcbiAgICAgICAgICAgICAgICBpbmRleGVzLnB1c2goW2ksIDFdKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICArK2xhc3RfMVsxXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5kZXhlcy5sZW5ndGggPT09IDApXG4gICAgICAgICAgICByZXR1cm4gcHJlZml4ICsgZXNjYXBlcihzdHIpO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgICAgIHZhciByZXQgPSBcIlwiO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGluZGV4ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBfYSA9IF9fcmVhZChpbmRleGVzW2ldLCAxKSwgZmlyc3QgPSBfYVswXTtcbiAgICAgICAgICAgIGlmIChpID09PSAwKVxuICAgICAgICAgICAgICAgIGlmIChmaXJzdCA9PT0gMClcbiAgICAgICAgICAgICAgICAgICAgcmV0ICs9IFwiX1wiO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgcmV0ICs9IHN0ci5zdWJzdHJpbmcoMCwgZmlyc3QpO1xuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIF9iID0gX19yZWFkKGluZGV4ZXNbaSAtIDFdLCAyKSwgcHJldkZpcnN0ID0gX2JbMF0sIHByZXZMZW5ndGggPSBfYlsxXTtcbiAgICAgICAgICAgICAgICB2YXIgcGllY2VfMSA9IHN0ci5zdWJzdHJpbmcocHJldkZpcnN0ICsgcHJldkxlbmd0aCwgZmlyc3QpO1xuICAgICAgICAgICAgICAgIGlmIChwaWVjZV8xLmxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgcmV0ICs9IFN0cmluZ1V0aWxfMS5TdHJpbmdVdGlsLmNhcGl0YWxpemUocGllY2VfMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGxhc3QgPSBpbmRleGVzW2luZGV4ZXMubGVuZ3RoIC0gMV07XG4gICAgICAgIHZhciBwaWVjZSA9IHN0ci5zdWJzdHJpbmcobGFzdFswXSArIGxhc3RbMV0pO1xuICAgICAgICBpZiAobGFzdC5sZW5ndGgpXG4gICAgICAgICAgICByZXQgKz0gU3RyaW5nVXRpbF8xLlN0cmluZ1V0aWwuY2FwaXRhbGl6ZShwaWVjZSk7XG4gICAgICAgIHJldHVybiBwcmVmaXggKyBlc2NhcGVyKHJldCk7XG4gICAgfTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1OYW1pbmdDb252ZW50aW9uLmpzLm1hcCIsCiAgICAiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTmFtaW5nQ29udmVudGlvbiA9IHZvaWQgMDtcbmV4cG9ydHMuTmFtaW5nQ29udmVudGlvbiA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9OYW1pbmdDb252ZW50aW9uXCIpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsCiAgICAiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19yZWFkID0gKHRoaXMgJiYgdGhpcy5fX3JlYWQpIHx8IGZ1bmN0aW9uIChvLCBuKSB7XG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xuICAgIGlmICghbSkgcmV0dXJuIG87XG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XG4gICAgdHJ5IHtcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XG4gICAgfVxuICAgIHJldHVybiBhcjtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLiRjb252ZW50aW9uID0gdm9pZCAwO1xudmFyICRjb252ZW50aW9uID0gZnVuY3Rpb24gKHJlbmFtZSkge1xuICAgIHZhciBtYWluID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICBpZiAoaW5wdXQgPT09IG51bGwpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KGlucHV0KSlcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5wdXQubWFwKG1haW4pO1xuICAgICAgICAgICAgZWxzZSBpZiAoaW5wdXQgaW5zdGFuY2VvZiBCb29sZWFuIHx8XG4gICAgICAgICAgICAgICAgaW5wdXQgaW5zdGFuY2VvZiBCaWdJbnQgfHxcbiAgICAgICAgICAgICAgICBpbnB1dCBpbnN0YW5jZW9mIE51bWJlciB8fFxuICAgICAgICAgICAgICAgIGlucHV0IGluc3RhbmNlb2YgU3RyaW5nKVxuICAgICAgICAgICAgICAgIHJldHVybiBpbnB1dC52YWx1ZU9mKCk7XG4gICAgICAgICAgICBlbHNlIGlmIChpbnB1dCBpbnN0YW5jZW9mIERhdGUpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGlucHV0KTtcbiAgICAgICAgICAgIGVsc2UgaWYgKGlucHV0IGluc3RhbmNlb2YgVWludDhBcnJheSB8fFxuICAgICAgICAgICAgICAgIGlucHV0IGluc3RhbmNlb2YgVWludDhDbGFtcGVkQXJyYXkgfHxcbiAgICAgICAgICAgICAgICBpbnB1dCBpbnN0YW5jZW9mIFVpbnQxNkFycmF5IHx8XG4gICAgICAgICAgICAgICAgaW5wdXQgaW5zdGFuY2VvZiBVaW50MzJBcnJheSB8fFxuICAgICAgICAgICAgICAgIGlucHV0IGluc3RhbmNlb2YgQmlnVWludDY0QXJyYXkgfHxcbiAgICAgICAgICAgICAgICBpbnB1dCBpbnN0YW5jZW9mIEludDhBcnJheSB8fFxuICAgICAgICAgICAgICAgIGlucHV0IGluc3RhbmNlb2YgSW50MTZBcnJheSB8fFxuICAgICAgICAgICAgICAgIGlucHV0IGluc3RhbmNlb2YgSW50MzJBcnJheSB8fFxuICAgICAgICAgICAgICAgIGlucHV0IGluc3RhbmNlb2YgQmlnSW50NjRBcnJheSB8fFxuICAgICAgICAgICAgICAgIGlucHV0IGluc3RhbmNlb2YgRmxvYXQzMkFycmF5IHx8XG4gICAgICAgICAgICAgICAgaW5wdXQgaW5zdGFuY2VvZiBGbG9hdDY0QXJyYXkgfHxcbiAgICAgICAgICAgICAgICBpbnB1dCBpbnN0YW5jZW9mIERhdGFWaWV3KVxuICAgICAgICAgICAgICAgIHJldHVybiBpbnB1dDtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JqZWN0KGlucHV0KTtcbiAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH07XG4gICAgdmFyIG9iamVjdCA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdC5lbnRyaWVzKGlucHV0KS5tYXAoZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICB2YXIgX2IgPSBfX3JlYWQoX2EsIDIpLCBrZXkgPSBfYlswXSwgdmFsdWUgPSBfYlsxXTtcbiAgICAgICAgICAgIHJldHVybiBbcmVuYW1lKGtleSksIG1haW4odmFsdWUpXTtcbiAgICAgICAgfSkpO1xuICAgIH07XG4gICAgcmV0dXJuIG1haW47XG59O1xuZXhwb3J0cy4kY29udmVudGlvbiA9ICRjb252ZW50aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9JGNvbnZlbnRpb24uanMubWFwIiwKICAgICJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNuYWtlID0gZXhwb3J0cy5wYXNjYWwgPSBleHBvcnRzLmNhbWVsID0gdm9pZCAwO1xudmFyIE5hbWluZ0NvbnZlbnRpb25fMSA9IHJlcXVpcmUoXCIuLi8uLi91dGlscy9OYW1pbmdDb252ZW50aW9uXCIpO1xudmFyIF9jb252ZW50aW9uXzEgPSByZXF1aXJlKFwiLi4vJGNvbnZlbnRpb25cIik7XG52YXIgX3Rocm93c18xID0gcmVxdWlyZShcIi4uLyR0aHJvd3NcIik7XG52YXIgaXNfMSA9IHJlcXVpcmUoXCIuLi9pc1wiKTtcbnZhciBjYW1lbCA9IGZ1bmN0aW9uIChtZXRob2QpIHsgcmV0dXJuIChfX2Fzc2lnbihfX2Fzc2lnbih7fSwgYmFzZShtZXRob2QpKSwgeyBhbnk6ICgwLCBfY29udmVudGlvbl8xLiRjb252ZW50aW9uKShOYW1pbmdDb252ZW50aW9uXzEuTmFtaW5nQ29udmVudGlvbi5jYW1lbCkgfSkpOyB9O1xuZXhwb3J0cy5jYW1lbCA9IGNhbWVsO1xudmFyIHBhc2NhbCA9IGZ1bmN0aW9uIChtZXRob2QpIHsgcmV0dXJuIChfX2Fzc2lnbihfX2Fzc2lnbih7fSwgYmFzZShtZXRob2QpKSwgeyBhbnk6ICgwLCBfY29udmVudGlvbl8xLiRjb252ZW50aW9uKShOYW1pbmdDb252ZW50aW9uXzEuTmFtaW5nQ29udmVudGlvbi5wYXNjYWwpIH0pKTsgfTtcbmV4cG9ydHMucGFzY2FsID0gcGFzY2FsO1xudmFyIHNuYWtlID0gZnVuY3Rpb24gKG1ldGhvZCkgeyByZXR1cm4gKF9fYXNzaWduKF9fYXNzaWduKHt9LCBiYXNlKG1ldGhvZCkpLCB7IGFueTogKDAsIF9jb252ZW50aW9uXzEuJGNvbnZlbnRpb24pKE5hbWluZ0NvbnZlbnRpb25fMS5OYW1pbmdDb252ZW50aW9uLnNuYWtlKSB9KSk7IH07XG5leHBvcnRzLnNuYWtlID0gc25ha2U7XG52YXIgYmFzZSA9IGZ1bmN0aW9uIChtZXRob2QpIHsgcmV0dXJuIChfX2Fzc2lnbihfX2Fzc2lnbih7fSwgKDAsIGlzXzEuaXMpKCkpLCB7IHRocm93czogKDAsIF90aHJvd3NfMS4kdGhyb3dzKShcIm5vdGF0aW9ucy5cIi5jb25jYXQobWV0aG9kKSkgfSkpOyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bm90YXRpb25zLmpzLm1hcCIsCiAgICAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLiRjbG9uZSA9IHZvaWQgMDtcbnZhciAkY2xvbmUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh2YWx1ZSkpO1xufTtcbmV4cG9ydHMuJGNsb25lID0gJGNsb25lO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9JGNsb25lLmpzLm1hcCIsCiAgICAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLiRhbnkgPSB2b2lkIDA7XG52YXIgX2Nsb25lXzEgPSByZXF1aXJlKFwiLi8kY2xvbmVcIik7XG52YXIgJGFueSA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgICByZXR1cm4gdmFsICE9PSB1bmRlZmluZWQgPyAoMCwgX2Nsb25lXzEuJGNsb25lKSh2YWwpIDogdW5kZWZpbmVkO1xufTtcbmV4cG9ydHMuJGFueSA9ICRhbnk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD0kYW55LmpzLm1hcCIsCiAgICAiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5wcnVuZSA9IGV4cG9ydHMuY2xvbmUgPSB2b2lkIDA7XG52YXIgX2FueV8xID0gcmVxdWlyZShcIi4uLyRhbnlcIik7XG52YXIgX3Rocm93c18xID0gcmVxdWlyZShcIi4uLyR0aHJvd3NcIik7XG52YXIgaXNfMSA9IHJlcXVpcmUoXCIuLi9pc1wiKTtcbnZhciBjbG9uZSA9IGZ1bmN0aW9uIChtZXRob2QpIHsgcmV0dXJuIChfX2Fzc2lnbihfX2Fzc2lnbih7fSwgKDAsIGlzXzEuaXMpKCkpLCB7IHRocm93czogKDAsIF90aHJvd3NfMS4kdGhyb3dzKShcIm1pc2MuXCIuY29uY2F0KG1ldGhvZCkpLCBhbnk6IF9hbnlfMS4kYW55IH0pKTsgfTtcbmV4cG9ydHMuY2xvbmUgPSBjbG9uZTtcbnZhciBwcnVuZSA9IGZ1bmN0aW9uIChtZXRob2QpIHsgcmV0dXJuIChfX2Fzc2lnbihfX2Fzc2lnbih7fSwgKDAsIGlzXzEuaXMpKCkpLCB7IHRocm93czogKDAsIF90aHJvd3NfMS4kdGhyb3dzKShcIm1pc2MuXCIuY29uY2F0KG1ldGhvZCkpIH0pKTsgfTtcbmV4cG9ydHMucHJ1bmUgPSBwcnVuZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1pc2MuanMubWFwIiwKICAgICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuJFByb3RvYnVmUmVhZGVyID0gdm9pZCAwO1xuLy8vIEByZWZlcmVuY2UgaHR0cHM6Ly9naXRodWIuY29tL3Bpb3RyLW9sZXMvYXMtcHJvdG8vYmxvYi9tYWluL3BhY2thZ2VzL2FzLXByb3RvL2Fzc2VtYmx5L2ludGVybmFsL0ZpeGVkUmVhZGVyLnRzXG52YXIgJFByb3RvYnVmUmVhZGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uICRQcm90b2J1ZlJlYWRlcihidWYpIHtcbiAgICAgICAgdGhpcy5idWYgPSBidWY7XG4gICAgICAgIHRoaXMucHRyID0gMDtcbiAgICAgICAgdGhpcy52aWV3ID0gbmV3IERhdGFWaWV3KGJ1Zi5idWZmZXIsIGJ1Zi5ieXRlT2Zmc2V0LCBidWYuYnl0ZUxlbmd0aCk7XG4gICAgfVxuICAgICRQcm90b2J1ZlJlYWRlci5wcm90b3R5cGUuaW5kZXggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnB0cjtcbiAgICB9O1xuICAgICRQcm90b2J1ZlJlYWRlci5wcm90b3R5cGUuc2l6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnVmLmxlbmd0aDtcbiAgICB9O1xuICAgICRQcm90b2J1ZlJlYWRlci5wcm90b3R5cGUudWludDMyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YXJpbnQzMigpO1xuICAgIH07XG4gICAgJFByb3RvYnVmUmVhZGVyLnByb3RvdHlwZS5pbnQzMiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFyaW50MzIoKTtcbiAgICB9O1xuICAgICRQcm90b2J1ZlJlYWRlci5wcm90b3R5cGUuc2ludDMyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLnZhcmludDMyKCk7XG4gICAgICAgIHJldHVybiAodmFsdWUgPj4+IDEpIF4gLSh2YWx1ZSAmIDEpO1xuICAgIH07XG4gICAgJFByb3RvYnVmUmVhZGVyLnByb3RvdHlwZS51aW50NjQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhcmludDY0KCk7XG4gICAgfTtcbiAgICAkUHJvdG9idWZSZWFkZXIucHJvdG90eXBlLmludDY0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YXJpbnQ2NCgpO1xuICAgIH07XG4gICAgJFByb3RvYnVmUmVhZGVyLnByb3RvdHlwZS5zaW50NjQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXMudmFyaW50NjQoKTtcbiAgICAgICAgcmV0dXJuICh2YWx1ZSA+PiBOMDEpIF4gLSh2YWx1ZSAmIE4wMSk7XG4gICAgfTtcbiAgICAkUHJvdG9idWZSZWFkZXIucHJvdG90eXBlLmJvb2wgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhcmludDMyKCkgIT09IDA7XG4gICAgfTtcbiAgICAkUHJvdG9idWZSZWFkZXIucHJvdG90eXBlLmZsb2F0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLnZpZXcuZ2V0RmxvYXQzMih0aGlzLnB0ciwgdHJ1ZSk7XG4gICAgICAgIHRoaXMucHRyICs9IDQ7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICAgICRQcm90b2J1ZlJlYWRlci5wcm90b3R5cGUuZG91YmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLnZpZXcuZ2V0RmxvYXQ2NCh0aGlzLnB0ciwgdHJ1ZSk7XG4gICAgICAgIHRoaXMucHRyICs9IDg7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICAgICRQcm90b2J1ZlJlYWRlci5wcm90b3R5cGUuYnl0ZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBsZW5ndGggPSB0aGlzLnVpbnQzMigpO1xuICAgICAgICB2YXIgZnJvbSA9IHRoaXMucHRyO1xuICAgICAgICB0aGlzLnB0ciArPSBsZW5ndGg7XG4gICAgICAgIHJldHVybiB0aGlzLmJ1Zi5zdWJhcnJheShmcm9tLCBmcm9tICsgbGVuZ3RoKTtcbiAgICB9O1xuICAgICRQcm90b2J1ZlJlYWRlci5wcm90b3R5cGUuc3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdXRmOC5kZWNvZGUodGhpcy5ieXRlcygpKTtcbiAgICB9O1xuICAgICRQcm90b2J1ZlJlYWRlci5wcm90b3R5cGUuc2tpcCA9IGZ1bmN0aW9uIChsZW5ndGgpIHtcbiAgICAgICAgaWYgKGxlbmd0aCA9PT0gMClcbiAgICAgICAgICAgIHdoaWxlICh0aGlzLnU4KCkgJiAweDgwKVxuICAgICAgICAgICAgICAgIDtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5pbmRleCgpICsgbGVuZ3RoID4gdGhpcy5zaXplKCkpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXJyb3Igb24gdHlwaWEucHJvdG9idWYuZGVjb2RlKCk6IGJ1ZmZlciBvdmVyZmxvdy5cIik7XG4gICAgICAgICAgICB0aGlzLnB0ciArPSBsZW5ndGg7XG4gICAgICAgIH1cbiAgICB9O1xuICAgICRQcm90b2J1ZlJlYWRlci5wcm90b3R5cGUuc2tpcFR5cGUgPSBmdW5jdGlvbiAod2lyZVR5cGUpIHtcbiAgICAgICAgc3dpdGNoICh3aXJlVHlwZSkge1xuICAgICAgICAgICAgY2FzZSAwIC8qIFByb3RvYnVmV2lyZS5WQVJJQU5UICovOlxuICAgICAgICAgICAgICAgIHRoaXMuc2tpcCgwKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMSAvKiBQcm90b2J1ZldpcmUuSTY0ICovOlxuICAgICAgICAgICAgICAgIHRoaXMuc2tpcCg4KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMiAvKiBQcm90b2J1ZldpcmUuTEVOICovOlxuICAgICAgICAgICAgICAgIHRoaXMuc2tpcCh0aGlzLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMyAvKiBQcm90b2J1ZldpcmUuU1RBUlRfR1JPVVAgKi86XG4gICAgICAgICAgICAgICAgd2hpbGUgKCh3aXJlVHlwZSA9IHRoaXMudWludDMyKCkgJiAweDA3KSAhPT0gNCAvKiBQcm90b2J1ZldpcmUuRU5EX0dST1VQICovKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNraXBUeXBlKHdpcmVUeXBlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgNSAvKiBQcm90b2J1ZldpcmUuSTMyICovOlxuICAgICAgICAgICAgICAgIHRoaXMuc2tpcCg0KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCB3aXJlIHR5cGUgXCIuY29uY2F0KHdpcmVUeXBlLCBcIiBhdCBvZmZzZXQgXCIpLmNvbmNhdCh0aGlzLnB0ciwgXCIuXCIpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgJFByb3RvYnVmUmVhZGVyLnByb3RvdHlwZS52YXJpbnQzMiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGxvYWRlZDtcbiAgICAgICAgdmFyIHZhbHVlO1xuICAgICAgICB2YWx1ZSA9IChsb2FkZWQgPSB0aGlzLnU4KCkpICYgMHg3ZjtcbiAgICAgICAgaWYgKGxvYWRlZCA8IDB4ODApXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIHZhbHVlIHw9ICgobG9hZGVkID0gdGhpcy51OCgpKSAmIDB4N2YpIDw8IDc7XG4gICAgICAgIGlmIChsb2FkZWQgPCAweDgwKVxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB2YWx1ZSB8PSAoKGxvYWRlZCA9IHRoaXMudTgoKSkgJiAweDdmKSA8PCAxNDtcbiAgICAgICAgaWYgKGxvYWRlZCA8IDB4ODApXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIHZhbHVlIHw9ICgobG9hZGVkID0gdGhpcy51OCgpKSAmIDB4N2YpIDw8IDIxO1xuICAgICAgICBpZiAobG9hZGVkIDwgMHg4MClcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgdmFsdWUgfD0gKChsb2FkZWQgPSB0aGlzLnU4KCkpICYgMHhmKSA8PCAyODtcbiAgICAgICAgaWYgKGxvYWRlZCA8IDB4ODApXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIC8vIGluY3JlbWVudCBwb3NpdGlvbiB1bnRpbCB0aGVyZSBpcyBubyBjb250aW51YXRpb24gYml0IG9yIHVudGlsIHdlIHJlYWQgMTAgYnl0ZXNcbiAgICAgICAgaWYgKHRoaXMudTgoKSA8IDB4ODApXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIGlmICh0aGlzLnU4KCkgPCAweDgwKVxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICBpZiAodGhpcy51OCgpIDwgMHg4MClcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgaWYgKHRoaXMudTgoKSA8IDB4ODApXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIGlmICh0aGlzLnU4KCkgPCAweDgwKVxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICAkUHJvdG9idWZSZWFkZXIucHJvdG90eXBlLnZhcmludDY0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbG9hZGVkO1xuICAgICAgICB2YXIgdmFsdWU7XG4gICAgICAgIHZhbHVlID0gKGxvYWRlZCA9IHRoaXMudThuKCkpICYgTjdGO1xuICAgICAgICBpZiAobG9hZGVkIDwgTjgwKVxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB2YWx1ZSB8PSAoKGxvYWRlZCA9IHRoaXMudThuKCkpICYgTjdGKSA8PCBCaWdJbnQoNyk7XG4gICAgICAgIGlmIChsb2FkZWQgPCBOODApXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIHZhbHVlIHw9ICgobG9hZGVkID0gdGhpcy51OG4oKSkgJiBON0YpIDw8IEJpZ0ludCgxNCk7XG4gICAgICAgIGlmIChsb2FkZWQgPCBOODApXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIHZhbHVlIHw9ICgobG9hZGVkID0gdGhpcy51OG4oKSkgJiBON0YpIDw8IEJpZ0ludCgyMSk7XG4gICAgICAgIGlmIChsb2FkZWQgPCBOODApXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIHZhbHVlIHw9ICgobG9hZGVkID0gdGhpcy51OG4oKSkgJiBON0YpIDw8IEJpZ0ludCgyOCk7XG4gICAgICAgIGlmIChsb2FkZWQgPCBOODApXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIHZhbHVlIHw9ICgobG9hZGVkID0gdGhpcy51OG4oKSkgJiBON0YpIDw8IEJpZ0ludCgzNSk7XG4gICAgICAgIGlmIChsb2FkZWQgPCBOODApXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIHZhbHVlIHw9ICgobG9hZGVkID0gdGhpcy51OG4oKSkgJiBON0YpIDw8IEJpZ0ludCg0Mik7XG4gICAgICAgIGlmIChsb2FkZWQgPCBOODApXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIHZhbHVlIHw9ICgobG9hZGVkID0gdGhpcy51OG4oKSkgJiBON0YpIDw8IEJpZ0ludCg0OSk7XG4gICAgICAgIGlmIChsb2FkZWQgPCBOODApXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIHZhbHVlIHw9ICgobG9hZGVkID0gdGhpcy51OG4oKSkgJiBON0YpIDw8IEJpZ0ludCg1Nik7XG4gICAgICAgIGlmIChsb2FkZWQgPCBOODApXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIHZhbHVlIHw9ICh0aGlzLnU4bigpICYgTjAxKSA8PCBCaWdJbnQoNjMpO1xuICAgICAgICByZXR1cm4gQmlnSW50LmFzSW50Tig2NCwgdmFsdWUpO1xuICAgIH07XG4gICAgJFByb3RvYnVmUmVhZGVyLnByb3RvdHlwZS51OCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmlldy5nZXRVaW50OCh0aGlzLnB0cisrKTtcbiAgICB9O1xuICAgICRQcm90b2J1ZlJlYWRlci5wcm90b3R5cGUudThuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gQmlnSW50KHRoaXMudTgoKSk7XG4gICAgfTtcbiAgICByZXR1cm4gJFByb3RvYnVmUmVhZGVyO1xufSgpKTtcbmV4cG9ydHMuJFByb3RvYnVmUmVhZGVyID0gJFByb3RvYnVmUmVhZGVyO1xudmFyIHV0ZjggPSAvKiogQF9fUFVSRV9fICovIG5ldyBUZXh0RGVjb2RlcigpO1xudmFyIE4wMSA9IC8qKiBAX19QVVJFX18gKi8gQmlnSW50KDB4MDEpO1xudmFyIE43RiA9IC8qKiBAX19QVVJFX18gKi8gQmlnSW50KDB4N2YpO1xudmFyIE44MCA9IC8qKiBAX19QVVJFX18gKi8gQmlnSW50KDB4ODApO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9JFByb3RvYnVmUmVhZGVyLmpzLm1hcCIsCiAgICAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLiRzdHJsZW4gPSB2b2lkIDA7XG52YXIgJHN0cmxlbiA9IGZ1bmN0aW9uIChzKSB7XG4gICAgdmFyIGI7XG4gICAgdmFyIGk7XG4gICAgdmFyIGM7XG4gICAgZm9yIChiID0gaSA9IDA7IChjID0gcy5jaGFyQ29kZUF0KGkrKykpOyBiICs9IGMgPj4gMTEgPyAzIDogYyA+PiA3ID8gMiA6IDEpXG4gICAgICAgIDtcbiAgICByZXR1cm4gYjtcbn07XG5leHBvcnRzLiRzdHJsZW4gPSAkc3RybGVuO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9JHN0cmxlbi5qcy5tYXAiLAogICAgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy4kUHJvdG9idWZTaXplciA9IHZvaWQgMDtcbnZhciBfc3RybGVuXzEgPSByZXF1aXJlKFwiLi8kc3RybGVuXCIpO1xuLy8vIEByZWZlcmVuY2UgaHR0cHM6Ly9naXRodWIuY29tL3Bpb3RyLW9sZXMvYXMtcHJvdG8vYmxvYi9tYWluL3BhY2thZ2VzL2FzLXByb3RvL2Fzc2VtYmx5L2ludGVybmFsL0ZpeGVkU2l6ZXIudHNcbnZhciAkUHJvdG9idWZTaXplciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiAkUHJvdG9idWZTaXplcihsZW5ndGgpIHtcbiAgICAgICAgaWYgKGxlbmd0aCA9PT0gdm9pZCAwKSB7IGxlbmd0aCA9IDA7IH1cbiAgICAgICAgdGhpcy5sZW4gPSBsZW5ndGg7XG4gICAgICAgIHRoaXMucG9zID0gW107XG4gICAgICAgIHRoaXMudmFybGVuID0gW107XG4gICAgICAgIHRoaXMudmFybGVuaWR4ID0gW107XG4gICAgfVxuICAgICRQcm90b2J1ZlNpemVyLnByb3RvdHlwZS5ib29sID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmxlbiArPSAxO1xuICAgIH07XG4gICAgJFByb3RvYnVmU2l6ZXIucHJvdG90eXBlLmludDMyID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSA8IDApIHtcbiAgICAgICAgICAgIC8vIDEwIGJ5dGVzIHRvIGVuY29kZSBuZWdhdGl2ZSBudW1iZXJcbiAgICAgICAgICAgIHRoaXMubGVuICs9IDEwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy52YXJpbnQzMih2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgICRQcm90b2J1ZlNpemVyLnByb3RvdHlwZS5zaW50MzIgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy52YXJpbnQzMigodmFsdWUgPDwgMSkgXiAodmFsdWUgPj4gMzEpKTtcbiAgICB9O1xuICAgICRQcm90b2J1ZlNpemVyLnByb3RvdHlwZS51aW50MzIgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy52YXJpbnQzMih2YWx1ZSk7XG4gICAgfTtcbiAgICAkUHJvdG9idWZTaXplci5wcm90b3R5cGUuaW50NjQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy52YXJpbnQ2NCh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIgPyBCaWdJbnQodmFsdWUpIDogdmFsdWUpO1xuICAgIH07XG4gICAgJFByb3RvYnVmU2l6ZXIucHJvdG90eXBlLnNpbnQ2NCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgdmFsdWUgPSBCaWdJbnQodmFsdWUpO1xuICAgICAgICB0aGlzLnZhcmludDY0KCh2YWx1ZSA8PCBCaWdJbnQoMSkpIF4gKHZhbHVlID4+IEJpZ0ludCg2MykpKTtcbiAgICB9O1xuICAgICRQcm90b2J1ZlNpemVyLnByb3RvdHlwZS51aW50NjQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy52YXJpbnQ2NCh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIgPyBCaWdJbnQodmFsdWUpIDogdmFsdWUpO1xuICAgIH07XG4gICAgLy8gcHVibGljIGZpeGVkMzIoX3ZhbHVlOiBudW1iZXIpOiB2b2lkIHtcbiAgICAvLyAgICAgdGhpcy5sZW4gKz0gNDtcbiAgICAvLyB9XG4gICAgLy8gcHVibGljIHNmaXhlZDMyKF92YWx1ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgLy8gICAgIHRoaXMubGVuICs9IDQ7XG4gICAgLy8gfVxuICAgIC8vIHB1YmxpYyBmaXhlZDY0KF92YWx1ZTogbnVtYmVyIHwgYmlnaW50KTogdm9pZCB7XG4gICAgLy8gICAgIHRoaXMubGVuICs9IDg7XG4gICAgLy8gfVxuICAgIC8vIHB1YmxpYyBzZml4ZWQ2NChfdmFsdWU6IG51bWJlciB8IGJpZ2ludCk6IHZvaWQge1xuICAgIC8vICAgICB0aGlzLmxlbiArPSA4O1xuICAgIC8vIH1cbiAgICAkUHJvdG9idWZTaXplci5wcm90b3R5cGUuZmxvYXQgPSBmdW5jdGlvbiAoX3ZhbHVlKSB7XG4gICAgICAgIHRoaXMubGVuICs9IDQ7XG4gICAgfTtcbiAgICAkUHJvdG9idWZTaXplci5wcm90b3R5cGUuZG91YmxlID0gZnVuY3Rpb24gKF92YWx1ZSkge1xuICAgICAgICB0aGlzLmxlbiArPSA4O1xuICAgIH07XG4gICAgJFByb3RvYnVmU2l6ZXIucHJvdG90eXBlLmJ5dGVzID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudWludDMyKHZhbHVlLmJ5dGVMZW5ndGgpO1xuICAgICAgICB0aGlzLmxlbiArPSB2YWx1ZS5ieXRlTGVuZ3RoO1xuICAgIH07XG4gICAgJFByb3RvYnVmU2l6ZXIucHJvdG90eXBlLnN0cmluZyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgbGVuID0gKDAsIF9zdHJsZW5fMS4kc3RybGVuKSh2YWx1ZSk7XG4gICAgICAgIHRoaXMudmFybGVuLnB1c2gobGVuKTtcbiAgICAgICAgdGhpcy51aW50MzIobGVuKTtcbiAgICAgICAgdGhpcy5sZW4gKz0gbGVuO1xuICAgIH07XG4gICAgJFByb3RvYnVmU2l6ZXIucHJvdG90eXBlLmZvcmsgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMucG9zLnB1c2godGhpcy5sZW4pOyAvLyBzYXZlIGN1cnJlbnQgcG9zaXRpb25cbiAgICAgICAgdGhpcy52YXJsZW5pZHgucHVzaCh0aGlzLnZhcmxlbi5sZW5ndGgpOyAvLyBzYXZlIGN1cnJlbnQgaW5kZXggaW4gdmFybGVuIGFycmF5XG4gICAgICAgIHRoaXMudmFybGVuLnB1c2goMCk7IC8vIGFkZCAwIGxlbmd0aCB0byB2YXJsZW4gYXJyYXkgKHRvIGJlIHVwZGF0ZWQgaW4gbGRlbGltKCkpXG4gICAgfTtcbiAgICAkUHJvdG9idWZTaXplci5wcm90b3R5cGUubGRlbGltID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoISh0aGlzLnBvcy5sZW5ndGggJiYgdGhpcy52YXJsZW5pZHgubGVuZ3RoKSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkVycm9yIG9uIHR5cGlhLnByb3RvYnVmLmVuY29kZSgpOiBtaXNzaW5nIGZvcmsoKSBiZWZvcmUgbGRlbGltKCkgY2FsbC5cIik7XG4gICAgICAgIHZhciBlbmRQb3MgPSB0aGlzLmxlbjsgLy8gY3VycmVudCBwb3NpdGlvbiBpcyBlbmQgcG9zaXRpb25cbiAgICAgICAgdmFyIHN0YXJ0UG9zID0gdGhpcy5wb3MucG9wKCk7IC8vIGdldCBzdGFydCBwb3NpdGlvbiBmcm9tIHN0YWNrXG4gICAgICAgIHZhciBpZHggPSB0aGlzLnZhcmxlbmlkeC5wb3AoKTsgLy8gZ2V0IHZhcmxlbiBpbmRleCBmcm9tIHN0YWNrXG4gICAgICAgIHZhciBsZW4gPSBlbmRQb3MgLSBzdGFydFBvczsgLy8gY2FsY3VsYXRlIGxlbmd0aFxuICAgICAgICB0aGlzLnZhcmxlbltpZHhdID0gbGVuOyAvLyB1cGRhdGUgdmFyaWFibGUgbGVuZ3RoXG4gICAgICAgIHRoaXMudWludDMyKGxlbik7IC8vIGFkZCB1aW50MzIgdGhhdCBzaG91bGQgYmUgY2FsbGVkIGluIGZvcmsoKVxuICAgIH07XG4gICAgJFByb3RvYnVmU2l6ZXIucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmxlbiA9IDA7XG4gICAgICAgIC8vIHJlLXVzZSBhcnJheXNcbiAgICAgICAgdGhpcy5wb3MubGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy52YXJsZW4ubGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy52YXJsZW5pZHgubGVuZ3RoID0gMDtcbiAgICB9O1xuICAgICRQcm90b2J1ZlNpemVyLnByb3RvdHlwZS52YXJpbnQzMiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLmxlbiArPVxuICAgICAgICAgICAgdmFsdWUgPCAwXG4gICAgICAgICAgICAgICAgPyAxMCAvLyAxMCBiaXRzIHdpdGggbGVhZGluZyAxJ3NcbiAgICAgICAgICAgICAgICA6IHZhbHVlIDwgMHg4MFxuICAgICAgICAgICAgICAgICAgICA/IDFcbiAgICAgICAgICAgICAgICAgICAgOiB2YWx1ZSA8IDB4NDAwMFxuICAgICAgICAgICAgICAgICAgICAgICAgPyAyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHZhbHVlIDwgMHgyMDAwMDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IDNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHZhbHVlIDwgMHgxMDAwMDAwMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IDRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiA1O1xuICAgIH07XG4gICAgJFByb3RvYnVmU2l6ZXIucHJvdG90eXBlLnZhcmludDY0ID0gZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICB2YWwgPSBCaWdJbnQuYXNVaW50Tig2NCwgdmFsKTtcbiAgICAgICAgd2hpbGUgKHZhbCA+IE5YN0YpIHtcbiAgICAgICAgICAgICsrdGhpcy5sZW47XG4gICAgICAgICAgICB2YWwgPSB2YWwgPj4gTkQwNztcbiAgICAgICAgfVxuICAgICAgICArK3RoaXMubGVuO1xuICAgIH07XG4gICAgcmV0dXJuICRQcm90b2J1ZlNpemVyO1xufSgpKTtcbmV4cG9ydHMuJFByb3RvYnVmU2l6ZXIgPSAkUHJvdG9idWZTaXplcjtcbnZhciBORDA3ID0gLyoqIEBfX1BVUkVfXyAqLyBCaWdJbnQoNyk7XG52YXIgTlg3RiA9IC8qKiBAX19QVVJFX18gKi8gQmlnSW50KDB4N2YpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9JFByb3RvYnVmU2l6ZXIuanMubWFwIiwKICAgICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuJFByb3RvYnVmV3JpdGVyID0gdm9pZCAwO1xuLy8vIEByZWZlcmVuY2UgaHR0cHM6Ly9naXRodWIuY29tL3Bpb3RyLW9sZXMvYXMtcHJvdG8vYmxvYi9tYWluL3BhY2thZ2VzL2FzLXByb3RvL2Fzc2VtYmx5L2ludGVybmFsL0ZpeGVkV3JpdGVyLnRzXG52YXIgJFByb3RvYnVmV3JpdGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uICRQcm90b2J1ZldyaXRlcihzaXplcikge1xuICAgICAgICB0aGlzLnNpemVyID0gc2l6ZXI7XG4gICAgICAgIHRoaXMuYnVmID0gbmV3IFVpbnQ4QXJyYXkoc2l6ZXIubGVuKTtcbiAgICAgICAgdGhpcy52aWV3ID0gbmV3IERhdGFWaWV3KHRoaXMuYnVmLmJ1ZmZlcik7XG4gICAgICAgIHRoaXMucHRyID0gMDtcbiAgICAgICAgdGhpcy52YXJsZW5pZHggPSAwO1xuICAgIH1cbiAgICAkUHJvdG9idWZXcml0ZXIucHJvdG90eXBlLmJ1ZmZlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnVmO1xuICAgIH07XG4gICAgJFByb3RvYnVmV3JpdGVyLnByb3RvdHlwZS5ib29sID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuYnl0ZSh2YWx1ZSA/IDEgOiAwKTtcbiAgICB9O1xuICAgICRQcm90b2J1ZldyaXRlci5wcm90b3R5cGUuYnl0ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLmJ1Zlt0aGlzLnB0cisrXSA9IHZhbHVlICYgMjU1O1xuICAgIH07XG4gICAgJFByb3RvYnVmV3JpdGVyLnByb3RvdHlwZS5pbnQzMiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgPCAwKVxuICAgICAgICAgICAgdGhpcy5pbnQ2NCh2YWx1ZSk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRoaXMudmFyaWFudDMyKHZhbHVlID4+PiAwKTtcbiAgICB9O1xuICAgICRQcm90b2J1ZldyaXRlci5wcm90b3R5cGUuc2ludDMyID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmFyaWFudDMyKCh2YWx1ZSA8PCAxKSBeICh2YWx1ZSA+PiAzMSkpO1xuICAgIH07XG4gICAgJFByb3RvYnVmV3JpdGVyLnByb3RvdHlwZS51aW50MzIgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy52YXJpYW50MzIodmFsdWUpO1xuICAgIH07XG4gICAgJFByb3RvYnVmV3JpdGVyLnByb3RvdHlwZS5zaW50NjQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFsdWUgPSBCaWdJbnQodmFsdWUpO1xuICAgICAgICB0aGlzLnZhcmlhbnQ2NCgodmFsdWUgPDwgTkQwMSkgXiAodmFsdWUgPj4gTkQ2MykpO1xuICAgIH07XG4gICAgJFByb3RvYnVmV3JpdGVyLnByb3RvdHlwZS5pbnQ2NCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLnZhcmlhbnQ2NChCaWdJbnQodmFsdWUpKTtcbiAgICB9O1xuICAgICRQcm90b2J1ZldyaXRlci5wcm90b3R5cGUudWludDY0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmFyaWFudDY0KEJpZ0ludCh2YWx1ZSkpO1xuICAgIH07XG4gICAgJFByb3RvYnVmV3JpdGVyLnByb3RvdHlwZS5mbG9hdCA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgdGhpcy52aWV3LnNldEZsb2F0MzIodGhpcy5wdHIsIHZhbCwgdHJ1ZSk7XG4gICAgICAgIHRoaXMucHRyICs9IDQ7XG4gICAgfTtcbiAgICAkUHJvdG9idWZXcml0ZXIucHJvdG90eXBlLmRvdWJsZSA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgdGhpcy52aWV3LnNldEZsb2F0NjQodGhpcy5wdHIsIHZhbCwgdHJ1ZSk7XG4gICAgICAgIHRoaXMucHRyICs9IDg7XG4gICAgfTtcbiAgICAkUHJvdG9idWZXcml0ZXIucHJvdG90eXBlLmJ5dGVzID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudWludDMyKHZhbHVlLmJ5dGVMZW5ndGgpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlLmJ5dGVMZW5ndGg7IGkrKylcbiAgICAgICAgICAgIHRoaXMuYnVmW3RoaXMucHRyKytdID0gdmFsdWVbaV07XG4gICAgfTtcbiAgICAkUHJvdG9idWZXcml0ZXIucHJvdG90eXBlLnN0cmluZyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgbGVuID0gdGhpcy52YXJsZW4oKTsgLy8gdXNlIHByZWNvbXB1dGVkIGxlbmd0aFxuICAgICAgICB0aGlzLnVpbnQzMihsZW4pO1xuICAgICAgICB2YXIgYmluYXJ5ID0gdXRmOC5lbmNvZGUodmFsdWUpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJpbmFyeS5ieXRlTGVuZ3RoOyBpKyspXG4gICAgICAgICAgICB0aGlzLmJ1Zlt0aGlzLnB0cisrXSA9IGJpbmFyeVtpXTtcbiAgICB9O1xuICAgICRQcm90b2J1ZldyaXRlci5wcm90b3R5cGUuZm9yayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy51aW50MzIodGhpcy52YXJsZW4oKSk7IC8vIHVzZSBwcmVjb21wdXRlZCBsZW5ndGhcbiAgICB9O1xuICAgICRQcm90b2J1ZldyaXRlci5wcm90b3R5cGUubGRlbGltID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBub3RoaW5nIHRvIGRvIC0gYWxsIGRpcnR5IHdvcmsgZG9uZSBieSBzaXplclxuICAgIH07XG4gICAgJFByb3RvYnVmV3JpdGVyLnByb3RvdHlwZS5maW5pc2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJ1ZjtcbiAgICB9O1xuICAgICRQcm90b2J1ZldyaXRlci5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuYnVmID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5zaXplci5sZW4pO1xuICAgICAgICB0aGlzLnZpZXcgPSBuZXcgRGF0YVZpZXcodGhpcy5idWYuYnVmZmVyKTtcbiAgICAgICAgdGhpcy5wdHIgPSAwO1xuICAgICAgICB0aGlzLnZhcmxlbmlkeCA9IDA7XG4gICAgfTtcbiAgICAkUHJvdG9idWZXcml0ZXIucHJvdG90eXBlLnZhcmlhbnQzMiA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgd2hpbGUgKHZhbCA+IDB4N2YpIHtcbiAgICAgICAgICAgIHRoaXMuYnVmW3RoaXMucHRyKytdID0gKHZhbCAmIDB4N2YpIHwgMHg4MDtcbiAgICAgICAgICAgIHZhbCA9IHZhbCA+Pj4gNztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJ1Zlt0aGlzLnB0cisrXSA9IHZhbDtcbiAgICB9O1xuICAgICRQcm90b2J1ZldyaXRlci5wcm90b3R5cGUudmFyaWFudDY0ID0gZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICB2YWwgPSBCaWdJbnQuYXNVaW50Tig2NCwgdmFsKTtcbiAgICAgICAgd2hpbGUgKHZhbCA+IE5YN0YpIHtcbiAgICAgICAgICAgIHRoaXMuYnVmW3RoaXMucHRyKytdID0gTnVtYmVyKCh2YWwgJiBOWDdGKSB8IE5YODApO1xuICAgICAgICAgICAgdmFsID0gdmFsID4+IE5EMDc7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5idWZbdGhpcy5wdHIrK10gPSBOdW1iZXIodmFsKTtcbiAgICB9O1xuICAgICRQcm90b2J1ZldyaXRlci5wcm90b3R5cGUudmFybGVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YXJsZW5pZHggPj0gdGhpcy5zaXplci52YXJsZW4ubGVuZ3RoXG4gICAgICAgICAgICA/IDBcbiAgICAgICAgICAgIDogdGhpcy5zaXplci52YXJsZW5bdGhpcy52YXJsZW5pZHgrK107XG4gICAgfTtcbiAgICByZXR1cm4gJFByb3RvYnVmV3JpdGVyO1xufSgpKTtcbmV4cG9ydHMuJFByb3RvYnVmV3JpdGVyID0gJFByb3RvYnVmV3JpdGVyO1xudmFyIHV0ZjggPSAvKiogQF9fUFVSRV9fICovIG5ldyBUZXh0RW5jb2RlcigpO1xudmFyIE5EMDEgPSAvKiogQF9fUFVSRV9fICovIEJpZ0ludCgxKTtcbnZhciBORDA3ID0gLyoqIEBfX1BVUkVfXyAqLyBCaWdJbnQoNyk7XG52YXIgTkQ2MyA9IC8qKiBAX19QVVJFX18gKi8gQmlnSW50KDYzKTtcbnZhciBOWDdGID0gLyoqIEBfX1BVUkVfXyAqLyBCaWdJbnQoMHg3Zik7XG52YXIgTlg4MCA9IC8qKiBAX19QVVJFX18gKi8gQmlnSW50KDB4ODApO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9JFByb3RvYnVmV3JpdGVyLmpzLm1hcCIsCiAgICAiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5lbmNvZGUgPSBleHBvcnRzLmRlY29kZSA9IHZvaWQgMDtcbnZhciBfUHJvdG9idWZSZWFkZXJfMSA9IHJlcXVpcmUoXCIuLi8kUHJvdG9idWZSZWFkZXJcIik7XG52YXIgX1Byb3RvYnVmU2l6ZXJfMSA9IHJlcXVpcmUoXCIuLi8kUHJvdG9idWZTaXplclwiKTtcbnZhciBfUHJvdG9idWZXcml0ZXJfMSA9IHJlcXVpcmUoXCIuLi8kUHJvdG9idWZXcml0ZXJcIik7XG52YXIgX3N0cmxlbl8xID0gcmVxdWlyZShcIi4uLyRzdHJsZW5cIik7XG52YXIgX3Rocm93c18xID0gcmVxdWlyZShcIi4uLyR0aHJvd3NcIik7XG52YXIgaXNfMSA9IHJlcXVpcmUoXCIuLi9pc1wiKTtcbnZhciBkZWNvZGUgPSBmdW5jdGlvbiAobWV0aG9kKSB7IHJldHVybiAoX19hc3NpZ24oX19hc3NpZ24oe30sICgwLCBpc18xLmlzKSgpKSwgeyBSZWFkZXI6IF9Qcm90b2J1ZlJlYWRlcl8xLiRQcm90b2J1ZlJlYWRlciwgdGhyb3dzOiAoMCwgX3Rocm93c18xLiR0aHJvd3MpKFwicHJvdG9idWYuXCIuY29uY2F0KG1ldGhvZCkpIH0pKTsgfTtcbmV4cG9ydHMuZGVjb2RlID0gZGVjb2RlO1xudmFyIGVuY29kZSA9IGZ1bmN0aW9uIChtZXRob2QpIHsgcmV0dXJuIChfX2Fzc2lnbihfX2Fzc2lnbih7fSwgKDAsIGlzXzEuaXMpKCkpLCB7IFNpemVyOiBfUHJvdG9idWZTaXplcl8xLiRQcm90b2J1ZlNpemVyLCBXcml0ZXI6IF9Qcm90b2J1ZldyaXRlcl8xLiRQcm90b2J1ZldyaXRlciwgc3RybGVuOiBfc3RybGVuXzEuJHN0cmxlbiwgdGhyb3dzOiAoMCwgX3Rocm93c18xLiR0aHJvd3MpKG1ldGhvZCkgfSkpOyB9O1xuZXhwb3J0cy5lbmNvZGUgPSBlbmNvZGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm90b2J1Zi5qcy5tYXAiLAogICAgIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yYW5kb20gPSBleHBvcnRzLnZhbGlkYXRlID0gZXhwb3J0cy5hc3NlcnQgPSBleHBvcnRzLmlzID0gZXhwb3J0cy5wcm90b2J1ZiA9IGV4cG9ydHMubWlzYyA9IGV4cG9ydHMubm90YXRpb25zID0gZXhwb3J0cy5odHRwID0gZXhwb3J0cy5qc29uID0gZXhwb3J0cy5mdW5jdGlvbmFsID0gdm9pZCAwO1xudmFyIFJhbmRvbUdlbmVyYXRvcl8xID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzL1JhbmRvbUdlbmVyYXRvclwiKTtcbnZhciBfZXZlcnlfMSA9IHJlcXVpcmUoXCIuLi8kZXZlcnlcIik7XG52YXIgX2d1YXJkXzEgPSByZXF1aXJlKFwiLi4vJGd1YXJkXCIpO1xudmFyIF9qb2luXzEgPSByZXF1aXJlKFwiLi4vJGpvaW5cIik7XG52YXIgX3JlcG9ydF8xID0gcmVxdWlyZShcIi4uLyRyZXBvcnRcIik7XG52YXIgVHlwZUd1YXJkRXJyb3JfMSA9IHJlcXVpcmUoXCIuLi8uLi9UeXBlR3VhcmRFcnJvclwiKTtcbnZhciBpc18xID0gcmVxdWlyZShcIi4uL2lzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGlzXzEuaXM7IH0gfSk7XG5leHBvcnRzLmZ1bmN0aW9uYWwgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vZnVuY3Rpb25hbFwiKSk7XG5leHBvcnRzLmpzb24gPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vanNvblwiKSk7XG5leHBvcnRzLmh0dHAgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vaHR0cFwiKSk7XG5leHBvcnRzLm5vdGF0aW9ucyA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9ub3RhdGlvbnNcIikpO1xuZXhwb3J0cy5taXNjID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL21pc2NcIikpO1xuZXhwb3J0cy5wcm90b2J1ZiA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9wcm90b2J1ZlwiKSk7XG52YXIgYXNzZXJ0ID0gZnVuY3Rpb24gKG1ldGhvZCkgeyByZXR1cm4gKF9fYXNzaWduKF9fYXNzaWduKHt9LCAoMCwgaXNfMS5pcykoKSksIHsgam9pbjogX2pvaW5fMS4kam9pbiwgZXZlcnk6IF9ldmVyeV8xLiRldmVyeSwgZ3VhcmQ6ICgwLCBfZ3VhcmRfMS4kZ3VhcmQpKFwidHlwaWEuXCIuY29uY2F0KG1ldGhvZCkpLCBwcmVkaWNhdGU6IGZ1bmN0aW9uIChtYXRjaGVkLCBleGNlcHRpb25hYmxlLCBjbG9zdXJlKSB7XG4gICAgICAgIGlmIChtYXRjaGVkID09PSBmYWxzZSAmJiBleGNlcHRpb25hYmxlID09PSB0cnVlKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVHdWFyZEVycm9yXzEuVHlwZUd1YXJkRXJyb3IoX19hc3NpZ24oX19hc3NpZ24oe30sIGNsb3N1cmUoKSksIHsgbWV0aG9kOiBcInR5cGlhLlwiLmNvbmNhdChtZXRob2QpIH0pKTtcbiAgICAgICAgcmV0dXJuIG1hdGNoZWQ7XG4gICAgfSB9KSk7IH07XG5leHBvcnRzLmFzc2VydCA9IGFzc2VydDtcbnZhciB2YWxpZGF0ZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIChfX2Fzc2lnbihfX2Fzc2lnbih7fSwgKDAsIGlzXzEuaXMpKCkpLCB7IGpvaW46IF9qb2luXzEuJGpvaW4sIHJlcG9ydDogX3JlcG9ydF8xLiRyZXBvcnQsIHByZWRpY2F0ZTogZnVuY3Rpb24gKHJlcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG1hdGNoZWQsIGV4Y2VwdGlvbmFibGUsIGNsb3N1cmUpIHtcbiAgICAgICAgICAgIC8vIENIRUNLIEZBSUxVUkVcbiAgICAgICAgICAgIGlmIChtYXRjaGVkID09PSBmYWxzZSAmJiBleGNlcHRpb25hYmxlID09PSB0cnVlKVxuICAgICAgICAgICAgICAgIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcy5zdWNjZXNzICYmIChyZXMuc3VjY2VzcyA9IGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVycm9yTGlzdCA9IHJlcy5lcnJvcnM7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRSQUNFIEVSUk9SXG4gICAgICAgICAgICAgICAgICAgIHZhciBlcnJvciA9IGNsb3N1cmUoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yTGlzdC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsYXN0ID0gZXJyb3JMaXN0W2Vycm9yTGlzdC5sZW5ndGggLSAxXS5wYXRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxhc3QubGVuZ3RoID49IGVycm9yLnBhdGgubGVuZ3RoICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdC5zdWJzdHJpbmcoMCwgZXJyb3IucGF0aC5sZW5ndGgpID09PSBlcnJvci5wYXRoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlcnJvckxpc3QucHVzaChlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9KSgpO1xuICAgICAgICAgICAgcmV0dXJuIG1hdGNoZWQ7XG4gICAgICAgIH07XG4gICAgfSB9KSk7IH07XG5leHBvcnRzLnZhbGlkYXRlID0gdmFsaWRhdGU7XG52YXIgcmFuZG9tID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gKHtcbiAgICBnZW5lcmF0b3I6IFJhbmRvbUdlbmVyYXRvcl8xLlJhbmRvbUdlbmVyYXRvcixcbiAgICBwaWNrOiBSYW5kb21HZW5lcmF0b3JfMS5SYW5kb21HZW5lcmF0b3IucGljayxcbn0pOyB9O1xuZXhwb3J0cy5yYW5kb20gPSByYW5kb207XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLAogICAgIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnZhbGlkYXRlRXF1YWxzUmV0dXJuID0gZXhwb3J0cy52YWxpZGF0ZUVxdWFsc1BhcmFtZXRlcnMgPSBleHBvcnRzLnZhbGlkYXRlRXF1YWxzRnVuY3Rpb24gPSBleHBvcnRzLnZhbGlkYXRlUmV0dXJuID0gZXhwb3J0cy52YWxpZGF0ZVBhcmFtZXRlcnMgPSBleHBvcnRzLnZhbGlkYXRlRnVuY3Rpb24gPSBleHBvcnRzLmVxdWFsc1JldHVybiA9IGV4cG9ydHMuZXF1YWxzUGFyYW1ldGVycyA9IGV4cG9ydHMuZXF1YWxzRnVuY3Rpb24gPSBleHBvcnRzLmlzUmV0dXJuID0gZXhwb3J0cy5pc1BhcmFtZXRlcnMgPSBleHBvcnRzLmlzRnVuY3Rpb24gPSBleHBvcnRzLmFzc2VydEVxdWFsc1JldHVybiA9IGV4cG9ydHMuYXNzZXJ0RXF1YWxzUGFyYW1ldGVycyA9IGV4cG9ydHMuYXNzZXJ0RXF1YWxzRnVuY3Rpb24gPSBleHBvcnRzLmFzc2VydFJldHVybiA9IGV4cG9ydHMuYXNzZXJ0UGFyYW1ldGVycyA9IGV4cG9ydHMuYXNzZXJ0RnVuY3Rpb24gPSB2b2lkIDA7XG52YXIgTmFtZXNwYWNlID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL2Z1bmN0aW9uYWwvTmFtZXNwYWNlXCIpKTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGFzc2VydEZ1bmN0aW9uKCkge1xuICAgIGhhbHQoXCJhc3NlcnRGdW5jdGlvblwiKTtcbn1cbnZhciBhc3NlcnRGdW5jdGlvblB1cmUgPSAvKiogQF9fUFVSRV9fICovIE9iamVjdC5hc3NpZ24oYXNzZXJ0RnVuY3Rpb24sIFxuLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2UuYXNzZXJ0KFwiZnVuY3Rpb25hbC5hc3NlcnRGdW5jdGlvblwiKSwgXG4vKiogQF9fUFVSRV9fICovIE5hbWVzcGFjZS5mdW5jdGlvbmFsLmZ1bmN0aW9uYWxBc3NlcnQoKSk7XG5leHBvcnRzLmFzc2VydEZ1bmN0aW9uID0gYXNzZXJ0RnVuY3Rpb25QdXJlO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0UGFyYW1ldGVycygpIHtcbiAgICBoYWx0KFwiYXNzZXJ0UGFyYW1ldGVyc1wiKTtcbn1cbnZhciBhc3NlcnRQYXJhbWV0ZXJzUHVyZSA9IC8qKiBAX19QVVJFX18gKi8gT2JqZWN0LmFzc2lnbihhc3NlcnRGdW5jdGlvbiwgXG4vKiogQF9fUFVSRV9fICovIE5hbWVzcGFjZS5hc3NlcnQoXCJmdW5jdGlvbmFsLmFzc2VydEZ1bmN0aW9uXCIpLCBcbi8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLmZ1bmN0aW9uYWwuZnVuY3Rpb25hbEFzc2VydCgpKTtcbmV4cG9ydHMuYXNzZXJ0UGFyYW1ldGVycyA9IGFzc2VydFBhcmFtZXRlcnNQdXJlO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0UmV0dXJuKCkge1xuICAgIGhhbHQoXCJhc3NlcnRSZXR1cm5cIik7XG59XG52YXIgYXNzZXJ0UmV0dXJuUHVyZSA9IC8qKiBAX19QVVJFX18gKi8gT2JqZWN0LmFzc2lnbihhc3NlcnRSZXR1cm4sIFxuLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2UuYXNzZXJ0KFwiZnVuY3Rpb25hbC5hc3NlcnRSZXR1cm5cIiksIFxuLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2UuZnVuY3Rpb25hbC5mdW5jdGlvbmFsQXNzZXJ0KCkpO1xuZXhwb3J0cy5hc3NlcnRSZXR1cm4gPSBhc3NlcnRSZXR1cm5QdXJlO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0RXF1YWxzRnVuY3Rpb24oKSB7XG4gICAgaGFsdChcImFzc2VydEVxdWFsc0Z1bmN0aW9uXCIpO1xufVxudmFyIGFzc2VydEVxdWFsc0Z1bmN0aW9uUHVyZSA9IC8qKiBAX19QVVJFX18gKi8gT2JqZWN0LmFzc2lnbihhc3NlcnRFcXVhbHNGdW5jdGlvbiwgXG4vKiogQF9fUFVSRV9fICovIE5hbWVzcGFjZS5hc3NlcnQoXCJmdW5jdGlvbmFsLmFzc2VydEVxdWFsc0Z1bmN0aW9uXCIpLCBcbi8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLmZ1bmN0aW9uYWwuZnVuY3Rpb25hbEFzc2VydCgpKTtcbmV4cG9ydHMuYXNzZXJ0RXF1YWxzRnVuY3Rpb24gPSBhc3NlcnRFcXVhbHNGdW5jdGlvblB1cmU7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBhc3NlcnRFcXVhbHNQYXJhbWV0ZXJzKCkge1xuICAgIGhhbHQoXCJhc3NlcnRFcXVhbHNQYXJhbWV0ZXJzXCIpO1xufVxudmFyIGFzc2VydEVxdWFsc1BhcmFtZXRlcnNQdXJlID0gLyoqIEBfX1BVUkVfXyAqLyBPYmplY3QuYXNzaWduKGFzc2VydEVxdWFsc1BhcmFtZXRlcnMsIFxuLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2UuYXNzZXJ0KFwiZnVuY3Rpb25hbC5hc3NlcnRFcXVhbHNQYXJhbWV0ZXJzXCIpLCBcbi8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLmZ1bmN0aW9uYWwuZnVuY3Rpb25hbEFzc2VydCgpKTtcbmV4cG9ydHMuYXNzZXJ0RXF1YWxzUGFyYW1ldGVycyA9IGFzc2VydEVxdWFsc1BhcmFtZXRlcnNQdXJlO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0RXF1YWxzUmV0dXJuKCkge1xuICAgIGhhbHQoXCJhc3NlcnRFcXVhbHNSZXR1cm5cIik7XG59XG52YXIgYXNzZXJ0RXF1YWxzUmV0dXJuUHVyZSA9IC8qKiBAX19QVVJFX18gKi8gT2JqZWN0LmFzc2lnbihhc3NlcnRFcXVhbHNSZXR1cm4sIFxuLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2UuYXNzZXJ0KFwiZnVuY3Rpb25hbC5hc3NlcnRFcXVhbHNSZXR1cm5cIiksIFxuLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2UuZnVuY3Rpb25hbC5mdW5jdGlvbmFsQXNzZXJ0KCkpO1xuZXhwb3J0cy5hc3NlcnRFcXVhbHNSZXR1cm4gPSBhc3NlcnRFcXVhbHNSZXR1cm5QdXJlO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbigpIHtcbiAgICBoYWx0KFwiaXNGdW5jdGlvblwiKTtcbn1cbnZhciBpc0Z1bmN0aW9uUHVyZSA9IC8qKiBAX19QVVJFX18gKi8gT2JqZWN0LmFzc2lnbihpc0Z1bmN0aW9uLCBcbi8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLmlzKCkpO1xuZXhwb3J0cy5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvblB1cmU7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBpc1BhcmFtZXRlcnMoKSB7XG4gICAgaGFsdChcImlzUGFyYW1ldGVyc1wiKTtcbn1cbnZhciBpc1BhcmFtZXRlcnNQdXJlID0gLyoqIEBfX1BVUkVfXyAqLyBPYmplY3QuYXNzaWduKGlzUGFyYW1ldGVycywgLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2UuaXMoKSk7XG5leHBvcnRzLmlzUGFyYW1ldGVycyA9IGlzUGFyYW1ldGVyc1B1cmU7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBpc1JldHVybigpIHtcbiAgICBoYWx0KFwiaXNSZXR1cm5cIik7XG59XG52YXIgaXNSZXR1cm5QdXJlID0gLyoqIEBfX1BVUkVfXyAqLyBPYmplY3QuYXNzaWduKGlzUmV0dXJuLCBcbi8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLmlzKCkpO1xuZXhwb3J0cy5pc1JldHVybiA9IGlzUmV0dXJuUHVyZTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGVxdWFsc0Z1bmN0aW9uKCkge1xuICAgIGhhbHQoXCJlcXVhbHNGdW5jdGlvblwiKTtcbn1cbnZhciBlcXVhbHNGdW5jdGlvblB1cmUgPSAvKiogQF9fUFVSRV9fICovIE9iamVjdC5hc3NpZ24oZXF1YWxzRnVuY3Rpb24sIC8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLmlzKCkpO1xuZXhwb3J0cy5lcXVhbHNGdW5jdGlvbiA9IGVxdWFsc0Z1bmN0aW9uUHVyZTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGVxdWFsc1BhcmFtZXRlcnMoKSB7XG4gICAgaGFsdChcImVxdWFsc1BhcmFtZXRlcnNcIik7XG59XG52YXIgZXF1YWxzUGFyYW1ldGVyc1B1cmUgPSAvKiogQF9fUFVSRV9fICovIE9iamVjdC5hc3NpZ24oZXF1YWxzUGFyYW1ldGVycywgLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2UuaXMoKSk7XG5leHBvcnRzLmVxdWFsc1BhcmFtZXRlcnMgPSBlcXVhbHNQYXJhbWV0ZXJzUHVyZTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGVxdWFsc1JldHVybigpIHtcbiAgICBoYWx0KFwiZXF1YWxzUmV0dXJuXCIpO1xufVxudmFyIGVxdWFsc1JldHVyblB1cmUgPSAvKiogQF9fUFVSRV9fICovIE9iamVjdC5hc3NpZ24oZXF1YWxzUmV0dXJuLCAvKiogQF9fUFVSRV9fICovIE5hbWVzcGFjZS5pcygpKTtcbmV4cG9ydHMuZXF1YWxzUmV0dXJuID0gZXF1YWxzUmV0dXJuUHVyZTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlRnVuY3Rpb24oKSB7XG4gICAgaGFsdChcInZhbGlkYXRlRnVuY3Rpb25cIik7XG59XG52YXIgdmFsaWRhdGVGdW5jdGlvblB1cmUgPSAvKiogQF9fUFVSRV9fICovIE9iamVjdC5hc3NpZ24odmFsaWRhdGVGdW5jdGlvbiwgLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2UudmFsaWRhdGUoKSk7XG5leHBvcnRzLnZhbGlkYXRlRnVuY3Rpb24gPSB2YWxpZGF0ZUZ1bmN0aW9uUHVyZTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlUGFyYW1ldGVycygpIHtcbiAgICBoYWx0KFwidmFsaWRhdGVSZXR1cm5cIik7XG59XG52YXIgdmFsaWRhdGVQYXJhbWV0ZXJzUHVyZSA9IC8qKiBAX19QVVJFX18gKi8gT2JqZWN0LmFzc2lnbih2YWxpZGF0ZVBhcmFtZXRlcnMsIC8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLnZhbGlkYXRlKCkpO1xuZXhwb3J0cy52YWxpZGF0ZVBhcmFtZXRlcnMgPSB2YWxpZGF0ZVBhcmFtZXRlcnNQdXJlO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVSZXR1cm4oKSB7XG4gICAgaGFsdChcInZhbGlkYXRlUmV0dXJuXCIpO1xufVxudmFyIHZhbGlkYXRlUmV0dXJuUHVyZSA9IC8qKiBAX19QVVJFX18gKi8gT2JqZWN0LmFzc2lnbih2YWxpZGF0ZVJldHVybiwgLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2UudmFsaWRhdGUoKSk7XG5leHBvcnRzLnZhbGlkYXRlUmV0dXJuID0gdmFsaWRhdGVSZXR1cm5QdXJlO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVFcXVhbHNGdW5jdGlvbigpIHtcbiAgICBoYWx0KFwidmFsaWRhdGVFcXVhbHNGdW5jdGlvblwiKTtcbn1cbnZhciB2YWxpZGF0ZUVxdWFsc0Z1bmN0aW9uUHVyZSA9IC8qKiBAX19QVVJFX18gKi8gT2JqZWN0LmFzc2lnbih2YWxpZGF0ZUVxdWFsc0Z1bmN0aW9uLCAvKiogQF9fUFVSRV9fICovIE5hbWVzcGFjZS52YWxpZGF0ZSgpKTtcbmV4cG9ydHMudmFsaWRhdGVFcXVhbHNGdW5jdGlvbiA9IHZhbGlkYXRlRXF1YWxzRnVuY3Rpb25QdXJlO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVFcXVhbHNQYXJhbWV0ZXJzKCkge1xuICAgIGhhbHQoXCJ2YWxpZGF0ZUVxdWFsc1BhcmFtZXRlcnNcIik7XG59XG52YXIgdmFsaWRhdGVFcXVhbHNQYXJhbWV0ZXJzUHVyZSA9IC8qKiBAX19QVVJFX18gKi8gT2JqZWN0LmFzc2lnbih2YWxpZGF0ZUVxdWFsc1BhcmFtZXRlcnMsIC8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLnZhbGlkYXRlKCkpO1xuZXhwb3J0cy52YWxpZGF0ZUVxdWFsc1BhcmFtZXRlcnMgPSB2YWxpZGF0ZUVxdWFsc1BhcmFtZXRlcnNQdXJlO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVFcXVhbHNSZXR1cm4oKSB7XG4gICAgaGFsdChcInZhbGlkYXRlRXF1YWxzUmV0dXJuXCIpO1xufVxudmFyIHZhbGlkYXRlRXF1YWxzUmV0dXJuUHVyZSA9IC8qKiBAX19QVVJFX18gKi8gT2JqZWN0LmFzc2lnbih2YWxpZGF0ZUVxdWFsc1JldHVybiwgLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2UudmFsaWRhdGUoKSk7XG5leHBvcnRzLnZhbGlkYXRlRXF1YWxzUmV0dXJuID0gdmFsaWRhdGVFcXVhbHNSZXR1cm5QdXJlO1xuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgSEFMVEVSXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gaGFsdChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRXJyb3Igb24gdHlwaWEuZnVuY3Rpb25hbC5cIi5jb25jYXQobmFtZSwgXCIoKTogbm8gdHJhbnNmb3JtIGhhcyBiZWVuIGNvbmZpZ3VyZWQuIFJlYWQgYW5kIGZvbGxvdyBodHRwczovL3R5cGlhLmlvL2RvY3Mvc2V0dXAgcGxlYXNlLlwiKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mdW5jdGlvbmFsLmpzLm1hcCIsCiAgICAiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY3JlYXRlUGFyYW1ldGVyID0gZXhwb3J0cy5jcmVhdGVWYWxpZGF0ZUhlYWRlcnMgPSBleHBvcnRzLmNyZWF0ZUlzSGVhZGVycyA9IGV4cG9ydHMuY3JlYXRlQXNzZXJ0SGVhZGVycyA9IGV4cG9ydHMuY3JlYXRlSGVhZGVycyA9IGV4cG9ydHMuY3JlYXRlVmFsaWRhdGVRdWVyeSA9IGV4cG9ydHMuY3JlYXRlSXNRdWVyeSA9IGV4cG9ydHMuY3JlYXRlQXNzZXJ0UXVlcnkgPSBleHBvcnRzLmNyZWF0ZVF1ZXJ5ID0gZXhwb3J0cy5jcmVhdGVWYWxpZGF0ZUZvcm1EYXRhID0gZXhwb3J0cy5jcmVhdGVJc0Zvcm1EYXRhID0gZXhwb3J0cy5jcmVhdGVBc3NlcnRGb3JtRGF0YSA9IGV4cG9ydHMuY3JlYXRlRm9ybURhdGEgPSBleHBvcnRzLnBhcmFtZXRlciA9IGV4cG9ydHMudmFsaWRhdGVIZWFkZXJzID0gZXhwb3J0cy5pc0hlYWRlcnMgPSBleHBvcnRzLmFzc2VydEhlYWRlcnMgPSBleHBvcnRzLmhlYWRlcnMgPSBleHBvcnRzLnZhbGlkYXRlUXVlcnkgPSBleHBvcnRzLmlzUXVlcnkgPSBleHBvcnRzLmFzc2VydFF1ZXJ5ID0gZXhwb3J0cy5xdWVyeSA9IGV4cG9ydHMudmFsaWRhdGVGb3JtRGF0YSA9IGV4cG9ydHMuaXNGb3JtRGF0YSA9IGV4cG9ydHMuYXNzZXJ0Rm9ybURhdGEgPSBleHBvcnRzLmZvcm1EYXRhID0gdm9pZCAwO1xudmFyIE5hbWVzcGFjZSA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9mdW5jdGlvbmFsL05hbWVzcGFjZVwiKSk7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBmb3JtRGF0YSgpIHtcbiAgICBoYWx0KFwiZm9ybURhdGFcIik7XG59XG52YXIgZm9ybURhdGFQdXJlID0gLyoqIEBfX1BVUkVfXyAqLyBPYmplY3QuYXNzaWduKGZvcm1EYXRhLCBcbi8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLmh0dHAuZm9ybURhdGEoKSk7XG5leHBvcnRzLmZvcm1EYXRhID0gZm9ybURhdGFQdXJlO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0Rm9ybURhdGEoKSB7XG4gICAgaGFsdChcImFzc2VydEZvcm1EYXRhXCIpO1xufVxudmFyIGFzc2VydEZvcm1EYXRhUHVyZSA9IC8qKiBAX19QVVJFX18gKi8gT2JqZWN0LmFzc2lnbihhc3NlcnRGb3JtRGF0YSwgXG4vKiogQF9fUFVSRV9fICovIE5hbWVzcGFjZS5odHRwLmZvcm1EYXRhKCksIFxuLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2UuYXNzZXJ0KFwiaHR0cC5hc3NlcnRGb3JtRGF0YVwiKSk7XG5leHBvcnRzLmFzc2VydEZvcm1EYXRhID0gYXNzZXJ0Rm9ybURhdGFQdXJlO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gaXNGb3JtRGF0YSgpIHtcbiAgICBoYWx0KFwiaXNGb3JtRGF0YVwiKTtcbn1cbnZhciBpc0Zvcm1EYXRhUHVyZSA9IC8qKiBAX19QVVJFX18gKi8gT2JqZWN0LmFzc2lnbihpc0Zvcm1EYXRhLCBcbi8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLmh0dHAuZm9ybURhdGEoKSwgXG4vKiogQF9fUFVSRV9fICovIE5hbWVzcGFjZS5pcygpKTtcbmV4cG9ydHMuaXNGb3JtRGF0YSA9IGlzRm9ybURhdGFQdXJlO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVGb3JtRGF0YSgpIHtcbiAgICBoYWx0KFwidmFsaWRhdGVGb3JtRGF0YVwiKTtcbn1cbnZhciB2YWxpZGF0ZUZvcm1EYXRhUHVyZSA9IC8qKiBAX19QVVJFX18gKi8gT2JqZWN0LmFzc2lnbih2YWxpZGF0ZUZvcm1EYXRhLCBcbi8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLmh0dHAuZm9ybURhdGEoKSwgXG4vKiogQF9fUFVSRV9fICovIE5hbWVzcGFjZS52YWxpZGF0ZSgpKTtcbmV4cG9ydHMudmFsaWRhdGVGb3JtRGF0YSA9IHZhbGlkYXRlRm9ybURhdGFQdXJlO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gcXVlcnkoKSB7XG4gICAgaGFsdChcInF1ZXJ5XCIpO1xufVxudmFyIHF1ZXJ5UHVyZSA9IC8qKiBAX19QVVJFX18gKi8gT2JqZWN0LmFzc2lnbihxdWVyeSwgXG4vKiogQF9fUFVSRV9fICovIE5hbWVzcGFjZS5odHRwLnF1ZXJ5KCkpO1xuZXhwb3J0cy5xdWVyeSA9IHF1ZXJ5UHVyZTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGFzc2VydFF1ZXJ5KCkge1xuICAgIGhhbHQoXCJhc3NlcnRRdWVyeVwiKTtcbn1cbnZhciBhc3NlcnRRdWVyeVB1cmUgPSAvKiogQF9fUFVSRV9fICovIE9iamVjdC5hc3NpZ24oYXNzZXJ0UXVlcnksIFxuLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2UuaHR0cC5xdWVyeSgpLCBcbi8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLmFzc2VydChcImh0dHAuYXNzZXJ0UXVlcnlcIikpO1xuZXhwb3J0cy5hc3NlcnRRdWVyeSA9IGFzc2VydFF1ZXJ5UHVyZTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGlzUXVlcnkoKSB7XG4gICAgaGFsdChcImlzUXVlcnlcIik7XG59XG52YXIgaXNRdWVyeVB1cmUgPSAvKiogQF9fUFVSRV9fICovIE9iamVjdC5hc3NpZ24oaXNRdWVyeSwgXG4vKiogQF9fUFVSRV9fICovIE5hbWVzcGFjZS5odHRwLnF1ZXJ5KCksIFxuLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2UuaXMoKSk7XG5leHBvcnRzLmlzUXVlcnkgPSBpc1F1ZXJ5UHVyZTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlUXVlcnkoKSB7XG4gICAgaGFsdChcInZhbGlkYXRlUXVlcnlcIik7XG59XG52YXIgdmFsaWRhdGVRdWVyeVB1cmUgPSAvKiogQF9fUFVSRV9fICovIE9iamVjdC5hc3NpZ24odmFsaWRhdGVRdWVyeSwgXG4vKiogQF9fUFVSRV9fICovIE5hbWVzcGFjZS5odHRwLnF1ZXJ5KCksIFxuLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2UudmFsaWRhdGUoKSk7XG5leHBvcnRzLnZhbGlkYXRlUXVlcnkgPSB2YWxpZGF0ZVF1ZXJ5UHVyZTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGhlYWRlcnMoKSB7XG4gICAgaGFsdChcImhlYWRlcnNcIik7XG59XG52YXIgaGVhZGVyc1B1cmUgPSAvKiogQF9fUFVSRV9fICovIE9iamVjdC5hc3NpZ24oaGVhZGVycywgXG4vKiogQF9fUFVSRV9fICovIE5hbWVzcGFjZS5odHRwLmhlYWRlcnMoKSk7XG5leHBvcnRzLmhlYWRlcnMgPSBoZWFkZXJzUHVyZTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGFzc2VydEhlYWRlcnMoKSB7XG4gICAgaGFsdChcImFzc2VydEhlYWRlcnNcIik7XG59XG52YXIgYXNzZXJ0SGVhZGVyc1B1cmUgPSAvKiogQF9fUFVSRV9fICovIE9iamVjdC5hc3NpZ24oYXNzZXJ0SGVhZGVycywgXG4vKiogQF9fUFVSRV9fICovIE5hbWVzcGFjZS5odHRwLmhlYWRlcnMoKSwgXG4vKiogQF9fUFVSRV9fICovIE5hbWVzcGFjZS5hc3NlcnQoXCJodHRwLmFzc2VydEhlYWRlcnNcIikpO1xuZXhwb3J0cy5hc3NlcnRIZWFkZXJzID0gYXNzZXJ0SGVhZGVyc1B1cmU7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBpc0hlYWRlcnMoKSB7XG4gICAgaGFsdChcImlzSGVhZGVyc1wiKTtcbn1cbnZhciBpc0hlYWRlcnNQdXJlID0gLyoqIEBfX1BVUkVfXyAqLyBPYmplY3QuYXNzaWduKGlzSGVhZGVycywgXG4vKiogQF9fUFVSRV9fICovIE5hbWVzcGFjZS5odHRwLmhlYWRlcnMoKSwgXG4vKiogQF9fUFVSRV9fICovIE5hbWVzcGFjZS5pcygpKTtcbmV4cG9ydHMuaXNIZWFkZXJzID0gaXNIZWFkZXJzUHVyZTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlSGVhZGVycygpIHtcbiAgICBoYWx0KFwidmFsaWRhdGVIZWFkZXJzXCIpO1xufVxudmFyIHZhbGlkYXRlSGVhZGVyc1B1cmUgPSAvKiogQF9fUFVSRV9fICovIE9iamVjdC5hc3NpZ24odmFsaWRhdGVIZWFkZXJzLCBcbi8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLmh0dHAuaGVhZGVycygpLCBcbi8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLnZhbGlkYXRlKCkpO1xuZXhwb3J0cy52YWxpZGF0ZUhlYWRlcnMgPSB2YWxpZGF0ZUhlYWRlcnNQdXJlO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gcGFyYW1ldGVyKCkge1xuICAgIGhhbHQoXCJwYXJhbWV0ZXJcIik7XG59XG52YXIgcGFyYW1ldGVyUHVyZSA9IC8qKiBAX19QVVJFX18gKi8gT2JqZWN0LmFzc2lnbihwYXJhbWV0ZXIsIFxuLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2UuaHR0cC5wYXJhbWV0ZXIoKSwgXG4vKiogQF9fUFVSRV9fICovIE5hbWVzcGFjZS5hc3NlcnQoXCJodHRwLnBhcmFtZXRlclwiKSk7XG5leHBvcnRzLnBhcmFtZXRlciA9IHBhcmFtZXRlclB1cmU7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBjcmVhdGVGb3JtRGF0YSgpIHtcbiAgICBoYWx0KFwiY3JlYXRlRm9ybURhdGFcIik7XG59XG52YXIgY3JlYXRlRm9ybURhdGFQdXJlID0gLyoqIEBfX1BVUkVfXyAqLyBPYmplY3QuYXNzaWduKGNyZWF0ZUZvcm1EYXRhLCAvKiogQF9fUFVSRV9fICovIE5hbWVzcGFjZS5odHRwLmZvcm1EYXRhKCkpO1xuZXhwb3J0cy5jcmVhdGVGb3JtRGF0YSA9IGNyZWF0ZUZvcm1EYXRhUHVyZTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUFzc2VydEZvcm1EYXRhKCkge1xuICAgIGhhbHQoXCJjcmVhdGVBc3NlcnRGb3JtRGF0YVwiKTtcbn1cbnZhciBjcmVhdGVBc3NlcnRGb3JtRGF0YVB1cmUgPSAvKiogQF9fUFVSRV9fICovIE9iamVjdC5hc3NpZ24oY3JlYXRlQXNzZXJ0Rm9ybURhdGEsIFxuLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2UuaHR0cC5mb3JtRGF0YSgpLCBcbi8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLmFzc2VydChcImh0dHAuY3JlYXRlQXNzZXJ0Rm9ybURhdGFcIikpO1xuZXhwb3J0cy5jcmVhdGVBc3NlcnRGb3JtRGF0YSA9IGNyZWF0ZUFzc2VydEZvcm1EYXRhUHVyZTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUlzRm9ybURhdGEoKSB7XG4gICAgaGFsdChcImNyZWF0ZUlzRm9ybURhdGFcIik7XG59XG52YXIgY3JlYXRlSXNGb3JtRGF0YVB1cmUgPSAvKiogQF9fUFVSRV9fICovIE9iamVjdC5hc3NpZ24oY3JlYXRlSXNGb3JtRGF0YSwgXG4vKiogQF9fUFVSRV9fICovIE5hbWVzcGFjZS5odHRwLmZvcm1EYXRhKCksIFxuLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2UuaXMoKSk7XG5leHBvcnRzLmNyZWF0ZUlzRm9ybURhdGEgPSBjcmVhdGVJc0Zvcm1EYXRhUHVyZTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVZhbGlkYXRlRm9ybURhdGEoKSB7XG4gICAgaGFsdChcImNyZWF0ZVZhbGlkYXRlRm9ybURhdGFcIik7XG59XG52YXIgY3JlYXRlVmFsaWRhdGVGb3JtRGF0YVB1cmUgPSAvKiogQF9fUFVSRV9fICovIE9iamVjdC5hc3NpZ24oY3JlYXRlVmFsaWRhdGVGb3JtRGF0YSwgXG4vKiogQF9fUFVSRV9fICovIE5hbWVzcGFjZS5odHRwLmZvcm1EYXRhKCksIFxuLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2UudmFsaWRhdGUoKSk7XG5leHBvcnRzLmNyZWF0ZVZhbGlkYXRlRm9ybURhdGEgPSBjcmVhdGVWYWxpZGF0ZUZvcm1EYXRhUHVyZTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVF1ZXJ5KCkge1xuICAgIGhhbHQoXCJjcmVhdGVRdWVyeVwiKTtcbn1cbnZhciBjcmVhdGVRdWVyeVB1cmUgPSAvKiogQF9fUFVSRV9fICovIE9iamVjdC5hc3NpZ24oY3JlYXRlUXVlcnksIFxuLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2UuaHR0cC5xdWVyeSgpKTtcbmV4cG9ydHMuY3JlYXRlUXVlcnkgPSBjcmVhdGVRdWVyeVB1cmU7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBjcmVhdGVBc3NlcnRRdWVyeSgpIHtcbiAgICBoYWx0KFwiY3JlYXRlQXNzZXJ0UXVlcnlcIik7XG59XG52YXIgY3JlYXRlQXNzZXJ0UXVlcnlQdXJlID0gLyoqIEBfX1BVUkVfXyAqLyBPYmplY3QuYXNzaWduKGNyZWF0ZUFzc2VydFF1ZXJ5LCBcbi8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLmh0dHAucXVlcnkoKSwgXG4vKiogQF9fUFVSRV9fICovIE5hbWVzcGFjZS5hc3NlcnQoXCJodHRwLmNyZWF0ZUFzc2VydFF1ZXJ5XCIpKTtcbmV4cG9ydHMuY3JlYXRlQXNzZXJ0UXVlcnkgPSBjcmVhdGVBc3NlcnRRdWVyeVB1cmU7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBjcmVhdGVJc1F1ZXJ5KCkge1xuICAgIGhhbHQoXCJjcmVhdGVJc1F1ZXJ5XCIpO1xufVxudmFyIGNyZWF0ZUlzUXVlcnlQdXJlID0gLyoqIEBfX1BVUkVfXyAqLyBPYmplY3QuYXNzaWduKGNyZWF0ZUlzUXVlcnksIFxuLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2UuaHR0cC5xdWVyeSgpLCBcbi8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLmlzKCkpO1xuZXhwb3J0cy5jcmVhdGVJc1F1ZXJ5ID0gY3JlYXRlSXNRdWVyeVB1cmU7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBjcmVhdGVWYWxpZGF0ZVF1ZXJ5KCkge1xuICAgIGhhbHQoXCJjcmVhdGVWYWxpZGF0ZVF1ZXJ5XCIpO1xufVxudmFyIGNyZWF0ZVZhbGlkYXRlUXVlcnlQdXJlID0gLyoqIEBfX1BVUkVfXyAqLyBPYmplY3QuYXNzaWduKGNyZWF0ZVZhbGlkYXRlUXVlcnksIFxuLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2UuaHR0cC5xdWVyeSgpLCBcbi8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLnZhbGlkYXRlKCkpO1xuZXhwb3J0cy5jcmVhdGVWYWxpZGF0ZVF1ZXJ5ID0gY3JlYXRlVmFsaWRhdGVRdWVyeVB1cmU7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBjcmVhdGVIZWFkZXJzKCkge1xuICAgIGhhbHQoXCJjcmVhdGVIZWFkZXJzXCIpO1xufVxudmFyIGNyZWF0ZUhlYWRlcnNQdXJlID0gLyoqIEBfX1BVUkVfXyAqLyBPYmplY3QuYXNzaWduKGNyZWF0ZUhlYWRlcnMsIC8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLmh0dHAuaGVhZGVycygpKTtcbmV4cG9ydHMuY3JlYXRlSGVhZGVycyA9IGNyZWF0ZUhlYWRlcnNQdXJlO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQXNzZXJ0SGVhZGVycygpIHtcbiAgICBoYWx0KFwiY3JlYXRlQXNzZXJ0SGVhZGVyc1wiKTtcbn1cbnZhciBjcmVhdGVBc3NlcnRIZWFkZXJzUHVyZSA9IC8qKiBAX19QVVJFX18gKi8gT2JqZWN0LmFzc2lnbihjcmVhdGVBc3NlcnRIZWFkZXJzLCBcbi8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLmh0dHAuaGVhZGVycygpLCBcbi8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLmFzc2VydChcImh0dHAuY3JlYXRlQXNzZXJ0SGVhZGVyc1wiKSk7XG5leHBvcnRzLmNyZWF0ZUFzc2VydEhlYWRlcnMgPSBjcmVhdGVBc3NlcnRIZWFkZXJzUHVyZTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUlzSGVhZGVycygpIHtcbiAgICBoYWx0KFwiY3JlYXRlSXNIZWFkZXJzXCIpO1xufVxudmFyIGNyZWF0ZUlzSGVhZGVyc1B1cmUgPSAvKiogQF9fUFVSRV9fICovIE9iamVjdC5hc3NpZ24oY3JlYXRlSXNIZWFkZXJzLCBcbi8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLmh0dHAuaGVhZGVycygpLCBcbi8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLmlzKCkpO1xuZXhwb3J0cy5jcmVhdGVJc0hlYWRlcnMgPSBjcmVhdGVJc0hlYWRlcnNQdXJlO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gY3JlYXRlVmFsaWRhdGVIZWFkZXJzKCkge1xuICAgIGhhbHQoXCJjcmVhdGVWYWxpZGF0ZUhlYWRlcnNcIik7XG59XG52YXIgY3JlYXRlVmFsaWRhdGVIZWFkZXJzUHVyZSA9IC8qKiBAX19QVVJFX18gKi8gT2JqZWN0LmFzc2lnbihjcmVhdGVWYWxpZGF0ZUhlYWRlcnMsIFxuLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2UuaHR0cC5oZWFkZXJzKCksIFxuLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2UudmFsaWRhdGUoKSk7XG5leHBvcnRzLmNyZWF0ZVZhbGlkYXRlSGVhZGVycyA9IGNyZWF0ZVZhbGlkYXRlSGVhZGVyc1B1cmU7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBjcmVhdGVQYXJhbWV0ZXIoKSB7XG4gICAgaGFsdChcImNyZWF0ZVBhcmFtZXRlclwiKTtcbn1cbnZhciBjcmVhdGVQYXJhbWV0ZXJQdXJlID0gLyoqIEBfX1BVUkVfXyAqLyBPYmplY3QuYXNzaWduKGNyZWF0ZVBhcmFtZXRlciwgXG4vKiogQF9fUFVSRV9fICovIE5hbWVzcGFjZS5odHRwLnBhcmFtZXRlcigpLCBcbi8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLmFzc2VydChcImh0dHAuY3JlYXRlUGFyYW1ldGVyXCIpKTtcbmV4cG9ydHMuY3JlYXRlUGFyYW1ldGVyID0gY3JlYXRlUGFyYW1ldGVyUHVyZTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGhhbHQobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkVycm9yIG9uIHR5cGlhLmh0dHAuXCIuY29uY2F0KG5hbWUsIFwiKCk6IG5vIHRyYW5zZm9ybSBoYXMgYmVlbiBjb25maWd1cmVkLiBSZWFkIGFuZCBmb2xsb3cgaHR0cHM6Ly90eXBpYS5pby9kb2NzL3NldHVwIHBsZWFzZS5cIikpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aHR0cC5qcy5tYXAiLAogICAgIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNyZWF0ZVZhbGlkYXRlU3RyaW5naWZ5ID0gZXhwb3J0cy5jcmVhdGVJc1N0cmluZ2lmeSA9IGV4cG9ydHMuY3JlYXRlQXNzZXJ0U3RyaW5naWZ5ID0gZXhwb3J0cy5jcmVhdGVTdHJpbmdpZnkgPSBleHBvcnRzLmNyZWF0ZVZhbGlkYXRlUGFyc2UgPSBleHBvcnRzLmNyZWF0ZUFzc2VydFBhcnNlID0gZXhwb3J0cy5jcmVhdGVJc1BhcnNlID0gZXhwb3J0cy52YWxpZGF0ZVN0cmluZ2lmeSA9IGV4cG9ydHMuaXNTdHJpbmdpZnkgPSBleHBvcnRzLmFzc2VydFN0cmluZ2lmeSA9IGV4cG9ydHMuc3RyaW5naWZ5ID0gZXhwb3J0cy52YWxpZGF0ZVBhcnNlID0gZXhwb3J0cy5pc1BhcnNlID0gZXhwb3J0cy5hc3NlcnRQYXJzZSA9IGV4cG9ydHMuYXBwbGljYXRpb24gPSB2b2lkIDA7XG52YXIgTmFtZXNwYWNlID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL2Z1bmN0aW9uYWwvTmFtZXNwYWNlXCIpKTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGFwcGxpY2F0aW9uKCkge1xuICAgIGhhbHQoXCJhcHBsaWNhdGlvblwiKTtcbn1cbmV4cG9ydHMuYXBwbGljYXRpb24gPSBhcHBsaWNhdGlvbjtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGFzc2VydFBhcnNlKCkge1xuICAgIGhhbHQoXCJhc3NlcnRQYXJzZVwiKTtcbn1cbnZhciBhc3NlcnRQYXJzZVB1cmUgPSAvKiogQF9fUFVSRV9fICovIE9iamVjdC5hc3NpZ24oYXNzZXJ0UGFyc2UsIFxuLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2UuYXNzZXJ0KFwianNvbi5hc3NlcnRQYXJzZVwiKSk7XG5leHBvcnRzLmFzc2VydFBhcnNlID0gYXNzZXJ0UGFyc2VQdXJlO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gaXNQYXJzZSgpIHtcbiAgICBoYWx0KFwiaXNQYXJzZVwiKTtcbn1cbnZhciBpc1BhcnNlUHVyZSA9IC8qKiBAX19QVVJFX18gKi8gT2JqZWN0LmFzc2lnbihpc1BhcnNlLCBcbi8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLmlzKCkpO1xuZXhwb3J0cy5pc1BhcnNlID0gaXNQYXJzZVB1cmU7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiB2YWxpZGF0ZVBhcnNlKCkge1xuICAgIGhhbHQoXCJ2YWxpZGF0ZVBhcnNlXCIpO1xufVxudmFyIHZhbGlkYXRlUGFyc2VQdXJlID0gLyoqIEBfX1BVUkVfXyAqLyBPYmplY3QuYXNzaWduKHZhbGlkYXRlUGFyc2UsIC8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLnZhbGlkYXRlKCkpO1xuZXhwb3J0cy52YWxpZGF0ZVBhcnNlID0gdmFsaWRhdGVQYXJzZVB1cmU7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBzdHJpbmdpZnkoKSB7XG4gICAgaGFsdChcInN0cmluZ2lmeVwiKTtcbn1cbnZhciBzdHJpbmdpZnlQdXJlID0gLyoqIEBfX1BVUkVfXyAqLyBPYmplY3QuYXNzaWduKHN0cmluZ2lmeSwgXG4vKiogQF9fUFVSRV9fICovIE5hbWVzcGFjZS5qc29uLnN0cmluZ2lmeShcInN0cmluZ2lmeVwiKSk7XG5leHBvcnRzLnN0cmluZ2lmeSA9IHN0cmluZ2lmeVB1cmU7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBhc3NlcnRTdHJpbmdpZnkoKSB7XG4gICAgaGFsdChcImFzc2VydFN0cmluZ2lmeVwiKTtcbn1cbnZhciBhc3NlcnRTdHJpbmdpZnlQdXJlID0gLyoqIEBfX1BVUkVfXyAqLyBPYmplY3QuYXNzaWduKGFzc2VydFN0cmluZ2lmeSwgXG4vKiogQF9fUFVSRV9fICovIE5hbWVzcGFjZS5hc3NlcnQoXCJqc29uLmFzc2VydFN0cmluZ2lmeVwiKSwgXG4vKiogQF9fUFVSRV9fICovIE5hbWVzcGFjZS5qc29uLnN0cmluZ2lmeShcImFzc2VydFN0cmluZ2lmeVwiKSk7XG5leHBvcnRzLmFzc2VydFN0cmluZ2lmeSA9IGFzc2VydFN0cmluZ2lmeVB1cmU7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBpc1N0cmluZ2lmeSgpIHtcbiAgICBoYWx0KFwiaXNTdHJpbmdpZnlcIik7XG59XG52YXIgaXNTdHJpbmdpZnlQdXJlID0gLyoqIEBfX1BVUkVfXyAqLyBPYmplY3QuYXNzaWduKGlzU3RyaW5naWZ5LCBcbi8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLmlzKCksIFxuLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2UuanNvbi5zdHJpbmdpZnkoXCJpc1N0cmluZ2lmeVwiKSk7XG5leHBvcnRzLmlzU3RyaW5naWZ5ID0gaXNTdHJpbmdpZnlQdXJlO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVTdHJpbmdpZnkoKSB7XG4gICAgaGFsdChcInZhbGlkYXRlU3RyaW5naWZ5XCIpO1xufVxudmFyIHZhbGlkYXRlU3RyaW5naWZ5UHVyZSA9IC8qKiBAX19QVVJFX18gKi8gT2JqZWN0LmFzc2lnbih2YWxpZGF0ZVN0cmluZ2lmeSwgXG4vKiogQF9fUFVSRV9fICovIE5hbWVzcGFjZS52YWxpZGF0ZSgpLCBcbi8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLmpzb24uc3RyaW5naWZ5KFwidmFsaWRhdGVTdHJpbmdpZnlcIikpO1xuZXhwb3J0cy52YWxpZGF0ZVN0cmluZ2lmeSA9IHZhbGlkYXRlU3RyaW5naWZ5UHVyZTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUlzUGFyc2UoKSB7XG4gICAgaGFsdChcImNyZWF0ZUlzUGFyc2VcIik7XG59XG52YXIgY3JlYXRlSXNQYXJzZVB1cmUgPSAvKiogQF9fUFVSRV9fICovIE9iamVjdC5hc3NpZ24oY3JlYXRlSXNQYXJzZSwgaXNQYXJzZVB1cmUpO1xuZXhwb3J0cy5jcmVhdGVJc1BhcnNlID0gY3JlYXRlSXNQYXJzZVB1cmU7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBjcmVhdGVBc3NlcnRQYXJzZSgpIHtcbiAgICBoYWx0KFwiY3JlYXRlQXNzZXJ0UGFyc2VcIik7XG59XG52YXIgY3JlYXRlQXNzZXJ0UGFyc2VQdXJlID0gLyoqIEBfX1BVUkVfXyAqLyBPYmplY3QuYXNzaWduKGNyZWF0ZUFzc2VydFBhcnNlLCBhc3NlcnRQYXJzZVB1cmUpO1xuZXhwb3J0cy5jcmVhdGVBc3NlcnRQYXJzZSA9IGNyZWF0ZUFzc2VydFBhcnNlUHVyZTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVZhbGlkYXRlUGFyc2UoKSB7XG4gICAgaGFsdChcImNyZWF0ZVZhbGlkYXRlUGFyc2VcIik7XG59XG52YXIgY3JlYXRlVmFsaWRhdGVQYXJzZVB1cmUgPSAvKiogQF9fUFVSRV9fICovIE9iamVjdC5hc3NpZ24oY3JlYXRlVmFsaWRhdGVQYXJzZSwgdmFsaWRhdGVQYXJzZVB1cmUpO1xuZXhwb3J0cy5jcmVhdGVWYWxpZGF0ZVBhcnNlID0gY3JlYXRlVmFsaWRhdGVQYXJzZVB1cmU7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBjcmVhdGVTdHJpbmdpZnkoKSB7XG4gICAgaGFsdChcImNyZWF0ZVN0cmluZ2lmeVwiKTtcbn1cbnZhciBjcmVhdGVTdHJpbmdpZnlQdXJlID0gLyoqIEBfX1BVUkVfXyAqLyBPYmplY3QuYXNzaWduKGNyZWF0ZVN0cmluZ2lmeSwgc3RyaW5naWZ5UHVyZSk7XG5leHBvcnRzLmNyZWF0ZVN0cmluZ2lmeSA9IGNyZWF0ZVN0cmluZ2lmeVB1cmU7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBjcmVhdGVBc3NlcnRTdHJpbmdpZnkoKSB7XG4gICAgaGFsdChcImNyZWF0ZUFzc2VydFN0cmluZ2lmeVwiKTtcbn1cbnZhciBjcmVhdGVBc3NlcnRTdHJpbmdpZnlQdXJlID0gLyoqIEBfX1BVUkVfXyAqLyBPYmplY3QuYXNzaWduKGNyZWF0ZUFzc2VydFN0cmluZ2lmeSwgYXNzZXJ0U3RyaW5naWZ5UHVyZSk7XG5leHBvcnRzLmNyZWF0ZUFzc2VydFN0cmluZ2lmeSA9IGNyZWF0ZUFzc2VydFN0cmluZ2lmeVB1cmU7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBjcmVhdGVJc1N0cmluZ2lmeSgpIHtcbiAgICBoYWx0KFwiY3JlYXRlSXNTdHJpbmdpZnlcIik7XG59XG52YXIgY3JlYXRlSXNTdHJpbmdpZnlQdXJlID0gLyoqIEBfX1BVUkVfXyAqLyBPYmplY3QuYXNzaWduKGNyZWF0ZUlzU3RyaW5naWZ5LCBpc1N0cmluZ2lmeVB1cmUpO1xuZXhwb3J0cy5jcmVhdGVJc1N0cmluZ2lmeSA9IGNyZWF0ZUlzU3RyaW5naWZ5UHVyZTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVZhbGlkYXRlU3RyaW5naWZ5KCkge1xuICAgIGhhbHQoXCJjcmVhdGVWYWxpZGF0ZVN0cmluZ2lmeVwiKTtcbn1cbnZhciBjcmVhdGVWYWxpZGF0ZVN0cmluZ2lmeVB1cmUgPSAvKiogQF9fUFVSRV9fICovIE9iamVjdC5hc3NpZ24oY3JlYXRlVmFsaWRhdGVTdHJpbmdpZnksIHZhbGlkYXRlU3RyaW5naWZ5UHVyZSk7XG5leHBvcnRzLmNyZWF0ZVZhbGlkYXRlU3RyaW5naWZ5ID0gY3JlYXRlVmFsaWRhdGVTdHJpbmdpZnlQdXJlO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gaGFsdChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRXJyb3Igb24gdHlwaWEuanNvbi5cIi5jb25jYXQobmFtZSwgXCIoKTogbm8gdHJhbnNmb3JtIGhhcyBiZWVuIGNvbmZpZ3VyZWQuIFJlYWQgYW5kIGZvbGxvdyBodHRwczovL3R5cGlhLmlvL2RvY3Mvc2V0dXAgcGxlYXNlLlwiKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1qc29uLmpzLm1hcCIsCiAgICAiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY3JlYXRlVmFsaWRhdGVQcnVuZSA9IGV4cG9ydHMuY3JlYXRlSXNQcnVuZSA9IGV4cG9ydHMuY3JlYXRlQXNzZXJ0UHJ1bmUgPSBleHBvcnRzLmNyZWF0ZVBydW5lID0gZXhwb3J0cy5jcmVhdGVWYWxpZGF0ZUNsb25lID0gZXhwb3J0cy5jcmVhdGVJc0Nsb25lID0gZXhwb3J0cy5jcmVhdGVBc3NlcnRDbG9uZSA9IGV4cG9ydHMuY3JlYXRlQ2xvbmUgPSBleHBvcnRzLnZhbGlkYXRlUHJ1bmUgPSBleHBvcnRzLmlzUHJ1bmUgPSBleHBvcnRzLmFzc2VydFBydW5lID0gZXhwb3J0cy5wcnVuZSA9IGV4cG9ydHMudmFsaWRhdGVDbG9uZSA9IGV4cG9ydHMuaXNDbG9uZSA9IGV4cG9ydHMuYXNzZXJ0Q2xvbmUgPSBleHBvcnRzLmNsb25lID0gZXhwb3J0cy5saXRlcmFscyA9IHZvaWQgMDtcbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgTUlTQ0VMTEFFTk9VU1xuICAgICAgLSBMSVRFUkFMU1xuICAgICAgLSBDTE9ORVxuICAgICAgLSBQUlVORVxuICAgICAgLSBGQUNUT1JZIEZVTkNUSU9OU1xuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICBMSVRFUkFMU1xuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbnZhciBOYW1lc3BhY2UgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vZnVuY3Rpb25hbC9OYW1lc3BhY2VcIikpO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gbGl0ZXJhbHMoKSB7XG4gICAgaGFsdChcImxpdGVyYWxzXCIpO1xufVxuZXhwb3J0cy5saXRlcmFscyA9IGxpdGVyYWxzO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gY2xvbmUoKSB7XG4gICAgaGFsdChcImNsb25lXCIpO1xufVxudmFyIGNsb25lUHVyZSA9IC8qKiBAX19QVVJFX18gKi8gT2JqZWN0LmFzc2lnbihjbG9uZSwgXG4vKiogQF9fUFVSRV9fICovIE5hbWVzcGFjZS5taXNjLmNsb25lKFwiY2xvbmVcIikpO1xuZXhwb3J0cy5jbG9uZSA9IGNsb25lUHVyZTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGFzc2VydENsb25lKCkge1xuICAgIGhhbHQoXCJhc3NlcnRDbG9uZVwiKTtcbn1cbnZhciBhc3NlcnRDbG9uZVB1cmUgPSAvKiogQF9fUFVSRV9fICovIE9iamVjdC5hc3NpZ24oYXNzZXJ0Q2xvbmUsIFxuLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2UuYXNzZXJ0KFwibWlzYy5hc3NlcnRDbG9uZVwiKSwgXG4vKiogQF9fUFVSRV9fICovIE5hbWVzcGFjZS5taXNjLmNsb25lKFwiYXNzZXJ0Q2xvbmVcIikpO1xuZXhwb3J0cy5hc3NlcnRDbG9uZSA9IGFzc2VydENsb25lUHVyZTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGlzQ2xvbmUoKSB7XG4gICAgaGFsdChcImlzQ2xvbmVcIik7XG59XG52YXIgaXNDbG9uZVB1cmUgPSAvKiogQF9fUFVSRV9fICovIE9iamVjdC5hc3NpZ24oaXNDbG9uZSwgXG4vKiogQF9fUFVSRV9fICovIE5hbWVzcGFjZS5pcygpLCBcbi8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLm1pc2MuY2xvbmUoXCJpc0Nsb25lXCIpKTtcbmV4cG9ydHMuaXNDbG9uZSA9IGlzQ2xvbmVQdXJlO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVDbG9uZSgpIHtcbiAgICBoYWx0KFwidmFsaWRhdGVDbG9uZVwiKTtcbn1cbnZhciB2YWxpZGF0ZUNsb25lUHVyZSA9IC8qKiBAX19QVVJFX18gKi8gT2JqZWN0LmFzc2lnbih2YWxpZGF0ZUNsb25lLCBcbi8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLnZhbGlkYXRlKCksIFxuLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2UubWlzYy5jbG9uZShcInZhbGlkYXRlQ2xvbmVcIikpO1xuZXhwb3J0cy52YWxpZGF0ZUNsb25lID0gdmFsaWRhdGVDbG9uZVB1cmU7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBwcnVuZSgpIHtcbiAgICBoYWx0KFwicHJ1bmVcIik7XG59XG52YXIgcHJ1bmVQdXJlID0gLyoqIEBfX1BVUkVfXyAqLyBPYmplY3QuYXNzaWduKHBydW5lLCBcbi8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLm1pc2MucHJ1bmUoXCJwcnVuZVwiKSk7XG5leHBvcnRzLnBydW5lID0gcHJ1bmVQdXJlO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0UHJ1bmUoKSB7XG4gICAgaGFsdChcImFzc2VydFBydW5lXCIpO1xufVxudmFyIGFzc2VydFBydW5lUHVyZSA9IC8qKiBAX19QVVJFX18gKi8gT2JqZWN0LmFzc2lnbihhc3NlcnRQcnVuZSwgXG4vKiogQF9fUFVSRV9fICovIE5hbWVzcGFjZS5hc3NlcnQoXCJtaXNjLmFzc2VydFBydW5lXCIpLCBcbi8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLm1pc2MucHJ1bmUoXCJhc3NlcnRQcnVuZVwiKSk7XG5leHBvcnRzLmFzc2VydFBydW5lID0gYXNzZXJ0UHJ1bmVQdXJlO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gaXNQcnVuZSgpIHtcbiAgICBoYWx0KFwiaXNQcnVuZVwiKTtcbn1cbnZhciBpc1BydW5lUHVyZSA9IC8qKiBAX19QVVJFX18gKi8gT2JqZWN0LmFzc2lnbihpc1BydW5lLCBcbi8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLmlzKCksIFxuLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2UubWlzYy5wcnVuZShcImlzUHJ1bmVcIikpO1xuZXhwb3J0cy5pc1BydW5lID0gaXNQcnVuZVB1cmU7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiB2YWxpZGF0ZVBydW5lKCkge1xuICAgIGhhbHQoXCJ2YWxpZGF0ZVBydW5lXCIpO1xufVxudmFyIHZhbGlkYXRlUHJ1bmVQdXJlID0gLyoqIEBfX1BVUkVfXyAqLyBPYmplY3QuYXNzaWduKHZhbGlkYXRlUHJ1bmUsIFxuLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2UubWlzYy5wcnVuZShcInZhbGlkYXRlUHJ1bmVcIiksIFxuLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2UudmFsaWRhdGUoKSk7XG5leHBvcnRzLnZhbGlkYXRlUHJ1bmUgPSB2YWxpZGF0ZVBydW5lUHVyZTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNsb25lKCkge1xuICAgIGhhbHQoXCJjcmVhdGVDbG9uZVwiKTtcbn1cbnZhciBjcmVhdGVDbG9uZVB1cmUgPSAvKiogQF9fUFVSRV9fICovIE9iamVjdC5hc3NpZ24oY3JlYXRlQ2xvbmUsIGNsb25lUHVyZSk7XG5leHBvcnRzLmNyZWF0ZUNsb25lID0gY3JlYXRlQ2xvbmVQdXJlO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQXNzZXJ0Q2xvbmUoKSB7XG4gICAgaGFsdChcImNyZWF0ZUFzc2VydENsb25lXCIpO1xufVxudmFyIGNyZWF0ZUFzc2VydENsb25lUHVyZSA9IC8qKiBAX19QVVJFX18gKi8gT2JqZWN0LmFzc2lnbihjcmVhdGVBc3NlcnRDbG9uZSwgYXNzZXJ0Q2xvbmVQdXJlKTtcbmV4cG9ydHMuY3JlYXRlQXNzZXJ0Q2xvbmUgPSBjcmVhdGVBc3NlcnRDbG9uZVB1cmU7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBjcmVhdGVJc0Nsb25lKCkge1xuICAgIGhhbHQoXCJjcmVhdGVJc0Nsb25lXCIpO1xufVxudmFyIGNyZWF0ZUlzQ2xvbmVQdXJlID0gLyoqIEBfX1BVUkVfXyAqLyBPYmplY3QuYXNzaWduKGNyZWF0ZUlzQ2xvbmUsIGlzQ2xvbmVQdXJlKTtcbmV4cG9ydHMuY3JlYXRlSXNDbG9uZSA9IGNyZWF0ZUlzQ2xvbmVQdXJlO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gY3JlYXRlVmFsaWRhdGVDbG9uZSgpIHtcbiAgICBoYWx0KFwiY3JlYXRlVmFsaWRhdGVDbG9uZVwiKTtcbn1cbnZhciBjcmVhdGVWYWxpZGF0ZUNsb25lUHVyZSA9IC8qKiBAX19QVVJFX18gKi8gT2JqZWN0LmFzc2lnbihjcmVhdGVWYWxpZGF0ZUNsb25lLCB2YWxpZGF0ZUNsb25lUHVyZSk7XG5leHBvcnRzLmNyZWF0ZVZhbGlkYXRlQ2xvbmUgPSBjcmVhdGVWYWxpZGF0ZUNsb25lUHVyZTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVBydW5lKCkge1xuICAgIGhhbHQoXCJjcmVhdGVQcnVuZVwiKTtcbn1cbnZhciBjcmVhdGVQcnVuZVB1cmUgPSAvKiogQF9fUFVSRV9fICovIE9iamVjdC5hc3NpZ24oY3JlYXRlUHJ1bmUsIHBydW5lUHVyZSk7XG5leHBvcnRzLmNyZWF0ZVBydW5lID0gY3JlYXRlUHJ1bmVQdXJlO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQXNzZXJ0UHJ1bmUoKSB7XG4gICAgaGFsdChcImNyZWF0ZUFzc2VydFBydW5lXCIpO1xufVxudmFyIGNyZWF0ZUFzc2VydFBydW5lUHVyZSA9IC8qKiBAX19QVVJFX18gKi8gT2JqZWN0LmFzc2lnbihjcmVhdGVBc3NlcnRQcnVuZSwgYXNzZXJ0UHJ1bmVQdXJlKTtcbmV4cG9ydHMuY3JlYXRlQXNzZXJ0UHJ1bmUgPSBjcmVhdGVBc3NlcnRQcnVuZVB1cmU7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBjcmVhdGVJc1BydW5lKCkge1xuICAgIGhhbHQoXCJjcmVhdGVJc1BydW5lXCIpO1xufVxudmFyIGNyZWF0ZUlzUHJ1bmVQdXJlID0gLyoqIEBfX1BVUkVfXyAqLyBPYmplY3QuYXNzaWduKGNyZWF0ZUlzUHJ1bmUsIGlzUHJ1bmVQdXJlKTtcbmV4cG9ydHMuY3JlYXRlSXNQcnVuZSA9IGNyZWF0ZUlzUHJ1bmVQdXJlO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gY3JlYXRlVmFsaWRhdGVQcnVuZSgpIHtcbiAgICBoYWx0KFwiY3JlYXRlVmFsaWRhdGVQcnVuZVwiKTtcbn1cbnZhciBjcmVhdGVWYWxpZGF0ZVBydW5lUHVyZSA9IC8qKiBAX19QVVJFX18gKi8gT2JqZWN0LmFzc2lnbihjcmVhdGVWYWxpZGF0ZVBydW5lLCB2YWxpZGF0ZVBydW5lUHVyZSk7XG5leHBvcnRzLmNyZWF0ZVZhbGlkYXRlUHJ1bmUgPSBjcmVhdGVWYWxpZGF0ZVBydW5lUHVyZTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGhhbHQobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkVycm9yIG9uIHR5cGlhLm1pc2MuXCIuY29uY2F0KG5hbWUsIFwiKCk6IG5vIHRyYW5zZm9ybSBoYXMgYmVlbiBjb25maWd1cmVkLiBSZWFkIGFuZCBmb2xsb3cgaHR0cHM6Ly90eXBpYS5pby9kb2NzL3NldHVwIHBsZWFzZS5cIikpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWlzYy5qcy5tYXAiLAogICAgIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNyZWF0ZVZhbGlkYXRlU25ha2UgPSBleHBvcnRzLmNyZWF0ZUlzU25ha2UgPSBleHBvcnRzLmNyZWF0ZUFzc2VydFNuYWtlID0gZXhwb3J0cy5jcmVhdGVTbmFrZSA9IGV4cG9ydHMuY3JlYXRlVmFsaWRhdGVQYXNjYWwgPSBleHBvcnRzLmNyZWF0ZUlzUGFzY2FsID0gZXhwb3J0cy5jcmVhdGVBc3NlcnRQYXNjYWwgPSBleHBvcnRzLmNyZWF0ZVBhc2NhbCA9IGV4cG9ydHMuY3JlYXRlVmFsaWRhdGVDYW1lbCA9IGV4cG9ydHMuY3JlYXRlSXNDYW1lbCA9IGV4cG9ydHMuY3JlYXRlQXNzZXJ0Q2FtZWwgPSBleHBvcnRzLmNyZWF0ZUNhbWVsID0gZXhwb3J0cy52YWxpZGF0ZVNuYWtlID0gZXhwb3J0cy5pc1NuYWtlID0gZXhwb3J0cy5hc3NlcnRTbmFrZSA9IGV4cG9ydHMuc25ha2UgPSBleHBvcnRzLnZhbGlkYXRlUGFzY2FsID0gZXhwb3J0cy5pc1Bhc2NhbCA9IGV4cG9ydHMuYXNzZXJ0UGFzY2FsID0gZXhwb3J0cy5wYXNjYWwgPSBleHBvcnRzLnZhbGlkYXRlQ2FtZWwgPSBleHBvcnRzLmlzQ2FtZWwgPSBleHBvcnRzLmFzc2VydENhbWVsID0gZXhwb3J0cy5jYW1lbCA9IHZvaWQgMDtcbnZhciBOYW1lc3BhY2UgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vZnVuY3Rpb25hbC9OYW1lc3BhY2VcIikpO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gY2FtZWwoKSB7XG4gICAgcmV0dXJuIGhhbHQoXCJjYW1lbFwiKTtcbn1cbnZhciBjYW1lbFB1cmUgPSAvKiogQF9fUFVSRV9fICovIE9iamVjdC5hc3NpZ24oY2FtZWwsIFxuLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2Uubm90YXRpb25zLmNhbWVsKFwiY2FtZWxcIikpO1xuZXhwb3J0cy5jYW1lbCA9IGNhbWVsUHVyZTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGFzc2VydENhbWVsKCkge1xuICAgIHJldHVybiBoYWx0KFwiYXNzZXJ0Q2FtZWxcIik7XG59XG52YXIgYXNzZXJ0Q2FtZWxQdXJlID0gLyoqIEBfX1BVUkVfXyAqLyBPYmplY3QuYXNzaWduKGFzc2VydENhbWVsLCBcbi8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLm5vdGF0aW9ucy5jYW1lbChcImFzc2VydENhbWVsXCIpLCBcbi8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLmFzc2VydChcIm5vdGF0aW9ucy5hc3NlcnRDYW1lbFwiKSk7XG5leHBvcnRzLmFzc2VydENhbWVsID0gYXNzZXJ0Q2FtZWxQdXJlO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gaXNDYW1lbCgpIHtcbiAgICByZXR1cm4gaGFsdChcImlzQ2FtZWxcIik7XG59XG52YXIgaXNDYW1lbFB1cmUgPSAvKiogQF9fUFVSRV9fICovIE9iamVjdC5hc3NpZ24oaXNDYW1lbCwgXG4vKiogQF9fUFVSRV9fICovIE5hbWVzcGFjZS5ub3RhdGlvbnMuY2FtZWwoXCJpc0NhbWVsXCIpLCBcbi8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLmlzKCkpO1xuZXhwb3J0cy5pc0NhbWVsID0gaXNDYW1lbFB1cmU7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiB2YWxpZGF0ZUNhbWVsKCkge1xuICAgIHJldHVybiBoYWx0KFwidmFsaWRhdGVDYW1lbFwiKTtcbn1cbnZhciB2YWxpZGF0ZUNhbWVsUHVyZSA9IC8qKiBAX19QVVJFX18gKi8gT2JqZWN0LmFzc2lnbih2YWxpZGF0ZUNhbWVsLCBcbi8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLm5vdGF0aW9ucy5jYW1lbChcInZhbGlkYXRlQ2FtZWxcIiksIFxuLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2UudmFsaWRhdGUoKSk7XG5leHBvcnRzLnZhbGlkYXRlQ2FtZWwgPSB2YWxpZGF0ZUNhbWVsUHVyZTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIHBhc2NhbCgpIHtcbiAgICByZXR1cm4gaGFsdChcInBhc2NhbFwiKTtcbn1cbnZhciBwYXNjYWxQdXJlID0gLyoqIEBfX1BVUkVfXyAqLyBPYmplY3QuYXNzaWduKHBhc2NhbCwgXG4vKiogQF9fUFVSRV9fICovIE5hbWVzcGFjZS5ub3RhdGlvbnMucGFzY2FsKFwicGFzY2FsXCIpKTtcbmV4cG9ydHMucGFzY2FsID0gcGFzY2FsUHVyZTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGFzc2VydFBhc2NhbCgpIHtcbiAgICByZXR1cm4gaGFsdChcImFzc2VydFBhc2NhbFwiKTtcbn1cbnZhciBhc3NlcnRQYXNjYWxQdXJlID0gLyoqIEBfX1BVUkVfXyAqLyBPYmplY3QuYXNzaWduKGFzc2VydFBhc2NhbCwgXG4vKiogQF9fUFVSRV9fICovIE5hbWVzcGFjZS5ub3RhdGlvbnMucGFzY2FsKFwiYXNzZXJ0UGFzY2FsXCIpLCBcbi8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLmFzc2VydChcIm5vdGF0aW9ucy5hc3NlcnRQYXNjYWxcIikpO1xuZXhwb3J0cy5hc3NlcnRQYXNjYWwgPSBhc3NlcnRQYXNjYWxQdXJlO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gaXNQYXNjYWwoKSB7XG4gICAgcmV0dXJuIGhhbHQoXCJpc1Bhc2NhbFwiKTtcbn1cbnZhciBpc1Bhc2NhbFB1cmUgPSAvKiogQF9fUFVSRV9fICovIE9iamVjdC5hc3NpZ24oaXNQYXNjYWwsIFxuLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2Uubm90YXRpb25zLnBhc2NhbChcImlzUGFzY2FsXCIpLCBcbi8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLmlzKCkpO1xuZXhwb3J0cy5pc1Bhc2NhbCA9IGlzUGFzY2FsUHVyZTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlUGFzY2FsKCkge1xuICAgIHJldHVybiBoYWx0KFwidmFsaWRhdGVQYXNjYWxcIik7XG59XG52YXIgdmFsaWRhdGVQYXNjYWxQdXJlID0gLyoqIEBfX1BVUkVfXyAqLyBPYmplY3QuYXNzaWduKHZhbGlkYXRlUGFzY2FsLCBcbi8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLm5vdGF0aW9ucy5wYXNjYWwoXCJ2YWxpZGF0ZVBhc2NhbFwiKSwgXG4vKiogQF9fUFVSRV9fICovIE5hbWVzcGFjZS52YWxpZGF0ZSgpKTtcbmV4cG9ydHMudmFsaWRhdGVQYXNjYWwgPSB2YWxpZGF0ZVBhc2NhbFB1cmU7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBzbmFrZSgpIHtcbiAgICByZXR1cm4gaGFsdChcInNuYWtlXCIpO1xufVxudmFyIHNuYWtlUHVyZSA9IC8qKiBAX19QVVJFX18gKi8gT2JqZWN0LmFzc2lnbihzbmFrZSwgXG4vKiogQF9fUFVSRV9fICovIE5hbWVzcGFjZS5ub3RhdGlvbnMuc25ha2UoXCJzbmFrZVwiKSk7XG5leHBvcnRzLnNuYWtlID0gc25ha2VQdXJlO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0U25ha2UoKSB7XG4gICAgcmV0dXJuIGhhbHQoXCJhc3NlcnRTbmFrZVwiKTtcbn1cbnZhciBhc3NlcnRTbmFrZVB1cmUgPSAvKiogQF9fUFVSRV9fICovIE9iamVjdC5hc3NpZ24oYXNzZXJ0U25ha2UsIFxuLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2Uubm90YXRpb25zLnNuYWtlKFwiYXNzZXJ0U25ha2VcIiksIFxuLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2UuYXNzZXJ0KFwibm90YXRpb25zLmFzc2VydFNuYWtlXCIpKTtcbmV4cG9ydHMuYXNzZXJ0U25ha2UgPSBhc3NlcnRTbmFrZVB1cmU7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBpc1NuYWtlKCkge1xuICAgIHJldHVybiBoYWx0KFwiaXNTbmFrZVwiKTtcbn1cbnZhciBpc1NuYWtlUHVyZSA9IC8qKiBAX19QVVJFX18gKi8gT2JqZWN0LmFzc2lnbihpc1NuYWtlLCBcbi8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLm5vdGF0aW9ucy5zbmFrZShcImlzU25ha2VcIiksIFxuLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2UuaXMoKSk7XG5leHBvcnRzLmlzU25ha2UgPSBpc1NuYWtlUHVyZTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlU25ha2UoKSB7XG4gICAgcmV0dXJuIGhhbHQoXCJ2YWxpZGF0ZVNuYWtlXCIpO1xufVxudmFyIHZhbGlkYXRlU25ha2VQdXJlID0gLyoqIEBfX1BVUkVfXyAqLyBPYmplY3QuYXNzaWduKHZhbGlkYXRlU25ha2UsIFxuLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2Uubm90YXRpb25zLnNuYWtlKFwidmFsaWRhdGVTbmFrZVwiKSwgXG4vKiogQF9fUFVSRV9fICovIE5hbWVzcGFjZS52YWxpZGF0ZSgpKTtcbmV4cG9ydHMudmFsaWRhdGVTbmFrZSA9IHZhbGlkYXRlU25ha2VQdXJlO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2FtZWwoKSB7XG4gICAgaGFsdChcImNyZWF0ZUNhbWVsXCIpO1xufVxudmFyIGNyZWF0ZUNhbWVsUHVyZSA9IC8qKiBAX19QVVJFX18gKi8gT2JqZWN0LmFzc2lnbihjcmVhdGVDYW1lbCwgXG4vKiogQF9fUFVSRV9fICovIE5hbWVzcGFjZS5ub3RhdGlvbnMuY2FtZWwoXCJjcmVhdGVDYW1lbFwiKSk7XG5leHBvcnRzLmNyZWF0ZUNhbWVsID0gY3JlYXRlQ2FtZWxQdXJlO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQXNzZXJ0Q2FtZWwoKSB7XG4gICAgaGFsdChcImNyZWF0ZUFzc2VydENhbWVsXCIpO1xufVxudmFyIGNyZWF0ZUFzc2VydENhbWVsUHVyZSA9IC8qKiBAX19QVVJFX18gKi8gT2JqZWN0LmFzc2lnbihjcmVhdGVBc3NlcnRDYW1lbCwgXG4vKiogQF9fUFVSRV9fICovIE5hbWVzcGFjZS5ub3RhdGlvbnMuY2FtZWwoXCJjcmVhdGVBc3NlcnRDYW1lbFwiKSwgXG4vKiogQF9fUFVSRV9fICovIE5hbWVzcGFjZS5hc3NlcnQoXCJub3RhdGlvbnMuY3JlYXRlQXNzZXJ0Q2FtZWxcIikpO1xuZXhwb3J0cy5jcmVhdGVBc3NlcnRDYW1lbCA9IGNyZWF0ZUFzc2VydENhbWVsUHVyZTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUlzQ2FtZWwoKSB7XG4gICAgaGFsdChcImNyZWF0ZUlzQ2FtZWxcIik7XG59XG52YXIgY3JlYXRlSXNDYW1lbFB1cmUgPSAvKiogQF9fUFVSRV9fICovIE9iamVjdC5hc3NpZ24oY3JlYXRlSXNDYW1lbCwgXG4vKiogQF9fUFVSRV9fICovIE5hbWVzcGFjZS5ub3RhdGlvbnMuY2FtZWwoXCJjcmVhdGVJc0NhbWVsXCIpLCBcbi8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLmlzKCkpO1xuZXhwb3J0cy5jcmVhdGVJc0NhbWVsID0gY3JlYXRlSXNDYW1lbFB1cmU7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBjcmVhdGVWYWxpZGF0ZUNhbWVsKCkge1xuICAgIGhhbHQoXCJjcmVhdGVWYWxpZGF0ZUNhbWVsXCIpO1xufVxudmFyIGNyZWF0ZVZhbGlkYXRlQ2FtZWxQdXJlID0gLyoqIEBfX1BVUkVfXyAqLyBPYmplY3QuYXNzaWduKGNyZWF0ZVZhbGlkYXRlQ2FtZWwsIFxuLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2Uubm90YXRpb25zLmNhbWVsKFwiY3JlYXRlVmFsaWRhdGVDYW1lbFwiKSwgXG4vKiogQF9fUFVSRV9fICovIE5hbWVzcGFjZS52YWxpZGF0ZSgpKTtcbmV4cG9ydHMuY3JlYXRlVmFsaWRhdGVDYW1lbCA9IGNyZWF0ZVZhbGlkYXRlQ2FtZWxQdXJlO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gY3JlYXRlUGFzY2FsKCkge1xuICAgIGhhbHQoXCJjcmVhdGVQYXNjYWxcIik7XG59XG52YXIgY3JlYXRlUGFzY2FsUHVyZSA9IC8qKiBAX19QVVJFX18gKi8gT2JqZWN0LmFzc2lnbihjcmVhdGVQYXNjYWwsIC8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLm5vdGF0aW9ucy5wYXNjYWwoXCJjcmVhdGVQYXNjYWxcIikpO1xuZXhwb3J0cy5jcmVhdGVQYXNjYWwgPSBjcmVhdGVQYXNjYWxQdXJlO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQXNzZXJ0UGFzY2FsKCkge1xuICAgIGhhbHQoXCJjcmVhdGVBc3NlcnRQYXNjYWxcIik7XG59XG52YXIgY3JlYXRlQXNzZXJ0UGFzY2FsUHVyZSA9IC8qKiBAX19QVVJFX18gKi8gT2JqZWN0LmFzc2lnbihjcmVhdGVBc3NlcnRQYXNjYWwsIFxuLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2Uubm90YXRpb25zLnBhc2NhbChcImNyZWF0ZUFzc2VydFBhc2NhbFwiKSwgXG4vKiogQF9fUFVSRV9fICovIE5hbWVzcGFjZS5hc3NlcnQoXCJub3RhdGlvbnMuY3JlYXRlQXNzZXJ0UGFzY2FsXCIpKTtcbmV4cG9ydHMuY3JlYXRlQXNzZXJ0UGFzY2FsID0gY3JlYXRlQXNzZXJ0UGFzY2FsUHVyZTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUlzUGFzY2FsKCkge1xuICAgIGhhbHQoXCJjcmVhdGVJc1Bhc2NhbFwiKTtcbn1cbnZhciBjcmVhdGVJc1Bhc2NhbFB1cmUgPSAvKiogQF9fUFVSRV9fICovIE9iamVjdC5hc3NpZ24oY3JlYXRlSXNQYXNjYWwsIFxuLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2Uubm90YXRpb25zLnBhc2NhbChcImNyZWF0ZUlzUGFzY2FsXCIpLCBcbi8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLmlzKCkpO1xuZXhwb3J0cy5jcmVhdGVJc1Bhc2NhbCA9IGNyZWF0ZUlzUGFzY2FsUHVyZTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVZhbGlkYXRlUGFzY2FsKCkge1xuICAgIGhhbHQoXCJjcmVhdGVWYWxpZGF0ZVBhc2NhbFwiKTtcbn1cbnZhciBjcmVhdGVWYWxpZGF0ZVBhc2NhbFB1cmUgPSAvKiogQF9fUFVSRV9fICovIE9iamVjdC5hc3NpZ24oY3JlYXRlVmFsaWRhdGVQYXNjYWwsIFxuLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2Uubm90YXRpb25zLnBhc2NhbChcImNyZWF0ZVZhbGlkYXRlUGFzY2FsXCIpLCBcbi8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLnZhbGlkYXRlKCkpO1xuZXhwb3J0cy5jcmVhdGVWYWxpZGF0ZVBhc2NhbCA9IGNyZWF0ZVZhbGlkYXRlUGFzY2FsUHVyZTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVNuYWtlKCkge1xuICAgIGhhbHQoXCJjcmVhdGVTbmFrZVwiKTtcbn1cbnZhciBjcmVhdGVTbmFrZVB1cmUgPSAvKiogQF9fUFVSRV9fICovIE9iamVjdC5hc3NpZ24oY3JlYXRlU25ha2UsIFxuLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2Uubm90YXRpb25zLnNuYWtlKFwiY3JlYXRlU25ha2VcIikpO1xuZXhwb3J0cy5jcmVhdGVTbmFrZSA9IGNyZWF0ZVNuYWtlUHVyZTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUFzc2VydFNuYWtlKCkge1xuICAgIGhhbHQoXCJjcmVhdGVBc3NlcnRTbmFrZVwiKTtcbn1cbnZhciBjcmVhdGVBc3NlcnRTbmFrZVB1cmUgPSAvKiogQF9fUFVSRV9fICovIE9iamVjdC5hc3NpZ24oY3JlYXRlQXNzZXJ0U25ha2UsIFxuLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2Uubm90YXRpb25zLnNuYWtlKFwiY3JlYXRlQXNzZXJ0U25ha2VcIiksIFxuLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2UuYXNzZXJ0KFwibm90YXRpb25zLmNyZWF0ZUFzc2VydFNuYWtlXCIpKTtcbmV4cG9ydHMuY3JlYXRlQXNzZXJ0U25ha2UgPSBjcmVhdGVBc3NlcnRTbmFrZVB1cmU7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBjcmVhdGVJc1NuYWtlKCkge1xuICAgIGhhbHQoXCJjcmVhdGVJc1NuYWtlXCIpO1xufVxudmFyIGNyZWF0ZUlzU25ha2VQdXJlID0gLyoqIEBfX1BVUkVfXyAqLyBPYmplY3QuYXNzaWduKGNyZWF0ZUlzU25ha2UsIFxuLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2Uubm90YXRpb25zLnNuYWtlKFwiY3JlYXRlSXNTbmFrZVwiKSwgXG4vKiogQF9fUFVSRV9fICovIE5hbWVzcGFjZS5pcygpKTtcbmV4cG9ydHMuY3JlYXRlSXNTbmFrZSA9IGNyZWF0ZUlzU25ha2VQdXJlO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gY3JlYXRlVmFsaWRhdGVTbmFrZSgpIHtcbiAgICBoYWx0KFwiY3JlYXRlVmFsaWRhdGVTbmFrZVwiKTtcbn1cbnZhciBjcmVhdGVWYWxpZGF0ZVNuYWtlUHVyZSA9IC8qKiBAX19QVVJFX18gKi8gT2JqZWN0LmFzc2lnbihjcmVhdGVWYWxpZGF0ZVNuYWtlLCBcbi8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLm5vdGF0aW9ucy5zbmFrZShcImNyZWF0ZVZhbGlkYXRlU25ha2VcIiksIFxuLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2UudmFsaWRhdGUoKSk7XG5leHBvcnRzLmNyZWF0ZVZhbGlkYXRlU25ha2UgPSBjcmVhdGVWYWxpZGF0ZVNuYWtlUHVyZTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGhhbHQobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkVycm9yIG9uIHR5cGlhLm5vdGF0aW9ucy5cIi5jb25jYXQobmFtZSwgXCIoKTogbm8gdHJhbnNmb3JtIGhhcyBiZWVuIGNvbmZpZ3VyZWQuIFJlYWQgYW5kIGZvbGxvdyBodHRwczovL3R5cGlhLmlvL2RvY3Mvc2V0dXAgcGxlYXNlLlwiKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub3RhdGlvbnMuanMubWFwIiwKICAgICJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jcmVhdGVWYWxpZGF0ZUVuY29kZSA9IGV4cG9ydHMuY3JlYXRlQXNzZXJ0RW5jb2RlID0gZXhwb3J0cy5jcmVhdGVJc0VuY29kZSA9IGV4cG9ydHMuY3JlYXRlRW5jb2RlID0gZXhwb3J0cy5jcmVhdGVWYWxpZGF0ZURlY29kZSA9IGV4cG9ydHMuY3JlYXRlQXNzZXJ0RGVjb2RlID0gZXhwb3J0cy5jcmVhdGVJc0RlY29kZSA9IGV4cG9ydHMuY3JlYXRlRGVjb2RlID0gZXhwb3J0cy52YWxpZGF0ZUVuY29kZSA9IGV4cG9ydHMuaXNFbmNvZGUgPSBleHBvcnRzLmFzc2VydEVuY29kZSA9IGV4cG9ydHMuZW5jb2RlID0gZXhwb3J0cy52YWxpZGF0ZURlY29kZSA9IGV4cG9ydHMuaXNEZWNvZGUgPSBleHBvcnRzLmFzc2VydERlY29kZSA9IGV4cG9ydHMuZGVjb2RlID0gZXhwb3J0cy5tZXNzYWdlID0gdm9pZCAwO1xudmFyIE5hbWVzcGFjZSA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9mdW5jdGlvbmFsL05hbWVzcGFjZVwiKSk7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBtZXNzYWdlKCkge1xuICAgIGhhbHQoXCJtZXNzYWdlXCIpO1xufVxuZXhwb3J0cy5tZXNzYWdlID0gbWVzc2FnZTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGRlY29kZSgpIHtcbiAgICBoYWx0KFwiZGVjb2RlXCIpO1xufVxudmFyIGRlY29kZVB1cmUgPSAvKiogQF9fUFVSRV9fICovIE9iamVjdC5hc3NpZ24oZGVjb2RlLCBcbi8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLnByb3RvYnVmLmRlY29kZShcImRlY29kZVwiKSk7XG5leHBvcnRzLmRlY29kZSA9IGRlY29kZVB1cmU7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBhc3NlcnREZWNvZGUoKSB7XG4gICAgaGFsdChcImFzc2VydERlY29kZVwiKTtcbn1cbnZhciBhc3NlcnREZWNvZGVQdXJlID0gLyoqIEBfX1BVUkVfXyAqLyBPYmplY3QuYXNzaWduKGFzc2VydERlY29kZSwgXG4vKiogQF9fUFVSRV9fICovIE5hbWVzcGFjZS5hc3NlcnQoXCJwcm90b2J1Zi5hc3NlcnREZWNvZGVcIiksIFxuLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2UucHJvdG9idWYuZGVjb2RlKFwiYXNzZXJ0RGVjb2RlXCIpKTtcbmV4cG9ydHMuYXNzZXJ0RGVjb2RlID0gYXNzZXJ0RGVjb2RlUHVyZTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGlzRGVjb2RlKCkge1xuICAgIGhhbHQoXCJpc0RlY29kZVwiKTtcbn1cbnZhciBpc0RlY29kZVB1cmUgPSAvKiogQF9fUFVSRV9fICovIE9iamVjdC5hc3NpZ24oaXNEZWNvZGUsIFxuLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2UuaXMoKSwgXG4vKiogQF9fUFVSRV9fICovIE5hbWVzcGFjZS5wcm90b2J1Zi5kZWNvZGUoXCJpc0RlY29kZVwiKSk7XG5leHBvcnRzLmlzRGVjb2RlID0gaXNEZWNvZGVQdXJlO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVEZWNvZGUoKSB7XG4gICAgaGFsdChcInZhbGlkYXRlRGVjb2RlXCIpO1xufVxudmFyIHZhbGlkYXRlRGVjb2RlUHVyZSA9IC8qKiBAX19QVVJFX18gKi8gT2JqZWN0LmFzc2lnbih2YWxpZGF0ZURlY29kZSwgXG4vKiogQF9fUFVSRV9fICovIE5hbWVzcGFjZS52YWxpZGF0ZSgpLCBcbi8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLnByb3RvYnVmLmRlY29kZShcInZhbGlkYXRlRGVjb2RlXCIpKTtcbmV4cG9ydHMudmFsaWRhdGVEZWNvZGUgPSB2YWxpZGF0ZURlY29kZVB1cmU7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBlbmNvZGUoKSB7XG4gICAgaGFsdChcImVuY29kZVwiKTtcbn1cbnZhciBlbmNvZGVQdXJlID0gLyoqIEBfX1BVUkVfXyAqLyBPYmplY3QuYXNzaWduKGVuY29kZSwgXG4vKiogQF9fUFVSRV9fICovIE5hbWVzcGFjZS5wcm90b2J1Zi5lbmNvZGUoXCJlbmNvZGVcIikpO1xuZXhwb3J0cy5lbmNvZGUgPSBlbmNvZGVQdXJlO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0RW5jb2RlKCkge1xuICAgIGhhbHQoXCJhc3NlcnRFbmNvZGVcIik7XG59XG52YXIgYXNzZXJ0RW5jb2RlUHVyZSA9IC8qKiBAX19QVVJFX18gKi8gT2JqZWN0LmFzc2lnbihhc3NlcnRFbmNvZGUsIFxuLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2UuYXNzZXJ0KFwicHJvdG9idWYuYXNzZXJ0RW5jb2RlXCIpLCBcbi8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLnByb3RvYnVmLmVuY29kZShcImFzc2VydEVuY29kZVwiKSk7XG5leHBvcnRzLmFzc2VydEVuY29kZSA9IGFzc2VydEVuY29kZVB1cmU7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBpc0VuY29kZSgpIHtcbiAgICBoYWx0KFwiaXNFbmNvZGVcIik7XG59XG52YXIgaXNFbmNvZGVQdXJlID0gLyoqIEBfX1BVUkVfXyAqLyBPYmplY3QuYXNzaWduKGlzRW5jb2RlLCBcbi8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLmlzKCksIFxuLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2UucHJvdG9idWYuZW5jb2RlKFwiaXNFbmNvZGVcIikpO1xuZXhwb3J0cy5pc0VuY29kZSA9IGlzRW5jb2RlUHVyZTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlRW5jb2RlKCkge1xuICAgIGhhbHQoXCJ2YWxpZGF0ZUVuY29kZVwiKTtcbn1cbnZhciB2YWxpZGF0ZUVuY29kZVB1cmUgPSAvKiogQF9fUFVSRV9fICovIE9iamVjdC5hc3NpZ24odmFsaWRhdGVFbmNvZGUsIFxuLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2UudmFsaWRhdGUoKSwgXG4vKiogQF9fUFVSRV9fICovIE5hbWVzcGFjZS5wcm90b2J1Zi5lbmNvZGUoXCJ2YWxpZGF0ZUVuY29kZVwiKSk7XG5leHBvcnRzLnZhbGlkYXRlRW5jb2RlID0gdmFsaWRhdGVFbmNvZGVQdXJlO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRGVjb2RlKCkge1xuICAgIGhhbHQoXCJjcmVhdGVEZWNvZGVcIik7XG59XG52YXIgY3JlYXRlRGVjb2RlUHVyZSA9IC8qKiBAX19QVVJFX18gKi8gT2JqZWN0LmFzc2lnbihjcmVhdGVEZWNvZGUsIC8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLnByb3RvYnVmLmRlY29kZShcImNyZWF0ZURlY29kZVwiKSk7XG5leHBvcnRzLmNyZWF0ZURlY29kZSA9IGNyZWF0ZURlY29kZVB1cmU7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBjcmVhdGVJc0RlY29kZSgpIHtcbiAgICBoYWx0KFwiY3JlYXRlSXNEZWNvZGVcIik7XG59XG52YXIgY3JlYXRlSXNEZWNvZGVQdXJlID0gLyoqIEBfX1BVUkVfXyAqLyBPYmplY3QuYXNzaWduKGNyZWF0ZUlzRGVjb2RlLCBcbi8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLmlzKCksIFxuLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2UucHJvdG9idWYuZGVjb2RlKFwiY3JlYXRlSXNEZWNvZGVcIikpO1xuZXhwb3J0cy5jcmVhdGVJc0RlY29kZSA9IGNyZWF0ZUlzRGVjb2RlUHVyZTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUFzc2VydERlY29kZSgpIHtcbiAgICBoYWx0KFwiY3JlYXRlQXNzZXJ0RGVjb2RlXCIpO1xufVxudmFyIGNyZWF0ZUFzc2VydERlY29kZVB1cmUgPSAvKiogQF9fUFVSRV9fICovIE9iamVjdC5hc3NpZ24oY3JlYXRlQXNzZXJ0RGVjb2RlLCBcbi8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLmFzc2VydChcInByb3RvYnVmLmNyZWF0ZUFzc2VydERlY29kZVwiKSwgXG4vKiogQF9fUFVSRV9fICovIE5hbWVzcGFjZS5wcm90b2J1Zi5kZWNvZGUoXCJjcmVhdGVBc3NlcnREZWNvZGVcIikpO1xuZXhwb3J0cy5jcmVhdGVBc3NlcnREZWNvZGUgPSBjcmVhdGVBc3NlcnREZWNvZGVQdXJlO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gY3JlYXRlVmFsaWRhdGVEZWNvZGUoKSB7XG4gICAgaGFsdChcImNyZWF0ZVZhbGlkYXRlRGVjb2RlXCIpO1xufVxudmFyIGNyZWF0ZVZhbGlkYXRlRGVjb2RlUHVyZSA9IC8qKiBAX19QVVJFX18gKi8gT2JqZWN0LmFzc2lnbihjcmVhdGVWYWxpZGF0ZURlY29kZSwgXG4vKiogQF9fUFVSRV9fICovIE5hbWVzcGFjZS52YWxpZGF0ZSgpLCBcbi8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLnByb3RvYnVmLmRlY29kZShcImNyZWF0ZVZhbGlkYXRlRGVjb2RlXCIpKTtcbmV4cG9ydHMuY3JlYXRlVmFsaWRhdGVEZWNvZGUgPSBjcmVhdGVWYWxpZGF0ZURlY29kZVB1cmU7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBjcmVhdGVFbmNvZGUoKSB7XG4gICAgaGFsdChcImNyZWF0ZUVuY29kZVwiKTtcbn1cbnZhciBjcmVhdGVFbmNvZGVQdXJlID0gLyoqIEBfX1BVUkVfXyAqLyBPYmplY3QuYXNzaWduKGNyZWF0ZUVuY29kZSwgLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2UucHJvdG9idWYuZW5jb2RlKFwiY3JlYXRlRW5jb2RlXCIpKTtcbmV4cG9ydHMuY3JlYXRlRW5jb2RlID0gY3JlYXRlRW5jb2RlUHVyZTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUlzRW5jb2RlKCkge1xuICAgIGhhbHQoXCJjcmVhdGVJc0VuY29kZVwiKTtcbn1cbnZhciBjcmVhdGVJc0VuY29kZVB1cmUgPSAvKiogQF9fUFVSRV9fICovIE9iamVjdC5hc3NpZ24oY3JlYXRlSXNFbmNvZGUsIFxuLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2UuaXMoKSwgXG4vKiogQF9fUFVSRV9fICovIE5hbWVzcGFjZS5wcm90b2J1Zi5lbmNvZGUoXCJjcmVhdGVJc0VuY29kZVwiKSk7XG5leHBvcnRzLmNyZWF0ZUlzRW5jb2RlID0gY3JlYXRlSXNFbmNvZGVQdXJlO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQXNzZXJ0RW5jb2RlKCkge1xuICAgIGhhbHQoXCJjcmVhdGVBc3NlcnRFbmNvZGVcIik7XG59XG52YXIgY3JlYXRlQXNzZXJ0RW5jb2RlUHVyZSA9IC8qKiBAX19QVVJFX18gKi8gT2JqZWN0LmFzc2lnbihjcmVhdGVBc3NlcnRFbmNvZGUsIFxuLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2UuYXNzZXJ0KFwicHJvdG9idWYuY3JlYXRlQXNzZXJ0RW5jb2RlXCIpLCBcbi8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLnByb3RvYnVmLmVuY29kZShcImNyZWF0ZUFzc2VydEVuY29kZVwiKSk7XG5leHBvcnRzLmNyZWF0ZUFzc2VydEVuY29kZSA9IGNyZWF0ZUFzc2VydEVuY29kZVB1cmU7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBjcmVhdGVWYWxpZGF0ZUVuY29kZSgpIHtcbiAgICBoYWx0KFwiY3JlYXRlVmFsaWRhdGVFbmNvZGVcIik7XG59XG52YXIgY3JlYXRlVmFsaWRhdGVFbmNvZGVQdXJlID0gLyoqIEBfX1BVUkVfXyAqLyBPYmplY3QuYXNzaWduKGNyZWF0ZVZhbGlkYXRlRW5jb2RlLCBcbi8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLnZhbGlkYXRlKCksIFxuLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2UucHJvdG9idWYuZW5jb2RlKFwiY3JlYXRlVmFsaWRhdGVFbmNvZGVcIikpO1xuZXhwb3J0cy5jcmVhdGVWYWxpZGF0ZUVuY29kZSA9IGNyZWF0ZVZhbGlkYXRlRW5jb2RlUHVyZTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGhhbHQobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkVycm9yIG9uIHR5cGlhLnByb3RvYnVmLlwiLmNvbmNhdChuYW1lLCBcIigpOiBubyB0cmFuc2Zvcm0gaGFzIGJlZW4gY29uZmlndXJlZC4gUmVhZCBhbmQgZm9sbG93IGh0dHBzOi8vdHlwaWEuaW8vZG9jcy9zZXR1cCBwbGVhc2UuXCIpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb3RvYnVmLmpzLm1hcCIsCiAgICAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm1ldGFkYXRhID0gdm9pZCAwO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gbWV0YWRhdGEoKSB7XG4gICAgaGFsdChcIm1ldGFkYXRhXCIpO1xufVxudmFyIG1ldGFkYXRhUHVyZSA9IC8qKiBAX19QVVJFX18gKi8gT2JqZWN0LmFzc2lnbihtZXRhZGF0YSwgeyBmcm9tOiBmdW5jdGlvbiAoaW5wdXQpIHsgcmV0dXJuIGlucHV0OyB9IH0pO1xuZXhwb3J0cy5tZXRhZGF0YSA9IG1ldGFkYXRhUHVyZTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGhhbHQobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkVycm9yIG9uIHR5cGlhLnJlZmxlY3QuXCIuY29uY2F0KG5hbWUsIFwiKCk6IG5vIHRyYW5zZm9ybSBoYXMgYmVlbiBjb25maWd1cmVkLiBSZWFkIGFuZCBmb2xsb3cgaHR0cHM6Ly90eXBpYS5pby9kb2NzL3NldHVwIHBsZWFzZS5cIikpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVmbGVjdC5qcy5tYXAiLAogICAgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q29uc3RhbnQuanMubWFwIiwKICAgICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNvbnRlbnRNZWRpYVR5cGUuanMubWFwIiwKICAgICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPURlZmF1bHQuanMubWFwIiwKICAgICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUV4Y2x1c2l2ZU1heGltdW0uanMubWFwIiwKICAgICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUV4Y2x1c2l2ZU1pbmltdW0uanMubWFwIiwKICAgICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUZvcm1hdC5qcy5tYXAiLAogICAgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SnNvblNjaGVtYVBsdWdpbi5qcy5tYXAiLAogICAgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TWF4aW11bS5qcy5tYXAiLAogICAgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TWF4SXRlbXMuanMubWFwIiwKICAgICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU1heExlbmd0aC5qcy5tYXAiLAogICAgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TWluaW11bS5qcy5tYXAiLAogICAgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TWluSXRlbXMuanMubWFwIiwKICAgICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU1pbkxlbmd0aC5qcy5tYXAiLAogICAgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TXVsdGlwbGVPZi5qcy5tYXAiLAogICAgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UGF0dGVybi5qcy5tYXAiLAogICAgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VGFnQmFzZS5qcy5tYXAiLAogICAgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VHlwZS5qcy5tYXAiLAogICAgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VW5pcXVlSXRlbXMuanMubWFwIiwKICAgICJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0NvbnN0YW50XCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9Db250ZW50TWVkaWFUeXBlXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9EZWZhdWx0XCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9FeGNsdXNpdmVNYXhpbXVtXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9FeGNsdXNpdmVNaW5pbXVtXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9Gb3JtYXRcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0pzb25TY2hlbWFQbHVnaW5cIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL01heGltdW1cIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL01heEl0ZW1zXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9NYXhMZW5ndGhcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL01pbmltdW1cIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL01pbkl0ZW1zXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9NaW5MZW5ndGhcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL011bHRpcGxlT2ZcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL1BhdHRlcm5cIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL1RhZ0Jhc2VcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL1R5cGVcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL1VuaXF1ZUl0ZW1zXCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsCiAgICAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1JSnNEb2NUYWdJbmZvLmpzLm1hcCIsCiAgICAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1JSnNvbkFwcGxpY2F0aW9uLmpzLm1hcCIsCiAgICAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Bc3NlcnRpb25HdWFyZC5qcy5tYXAiLAogICAgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SVJhbmRvbUdlbmVyYXRvci5qcy5tYXAiLAogICAgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SVZhbGlkYXRpb24uanMubWFwIiwKICAgICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVByaW1pdGl2ZS5qcy5tYXAiLAogICAgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UmVzb2x2ZWQuanMubWFwIiwKICAgICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNhbWVsQ2FzZS5qcy5tYXAiLAogICAgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UGFzY2FsQ2FzZS5qcy5tYXAiLAogICAgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U25ha2VDYXNlLmpzLm1hcCIsCiAgICAiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNyZWF0ZVJhbmRvbSA9IGV4cG9ydHMuY3JlYXRlVmFsaWRhdGVFcXVhbHMgPSBleHBvcnRzLmNyZWF0ZUVxdWFscyA9IGV4cG9ydHMuY3JlYXRlQXNzZXJ0R3VhcmRFcXVhbHMgPSBleHBvcnRzLmNyZWF0ZUFzc2VydEVxdWFscyA9IGV4cG9ydHMuY3JlYXRlVmFsaWRhdGUgPSBleHBvcnRzLmNyZWF0ZUlzID0gZXhwb3J0cy5jcmVhdGVBc3NlcnRHdWFyZCA9IGV4cG9ydHMuY3JlYXRlQXNzZXJ0ID0gZXhwb3J0cy5yYW5kb20gPSBleHBvcnRzLnZhbGlkYXRlRXF1YWxzID0gZXhwb3J0cy5lcXVhbHMgPSBleHBvcnRzLmFzc2VydEd1YXJkRXF1YWxzID0gZXhwb3J0cy5hc3NlcnRFcXVhbHMgPSBleHBvcnRzLnZhbGlkYXRlID0gZXhwb3J0cy5pcyA9IGV4cG9ydHMuYXNzZXJ0R3VhcmQgPSBleHBvcnRzLmFzc2VydCA9IGV4cG9ydHMudGFncyA9IGV4cG9ydHMucmVmbGVjdCA9IGV4cG9ydHMucHJvdG9idWYgPSBleHBvcnRzLm5vdGF0aW9ucyA9IGV4cG9ydHMubWlzYyA9IGV4cG9ydHMuanNvbiA9IGV4cG9ydHMuaHR0cCA9IGV4cG9ydHMuZnVuY3Rpb25hbCA9IHZvaWQgMDtcbnZhciBOYW1lc3BhY2UgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vZnVuY3Rpb25hbC9OYW1lc3BhY2VcIikpO1xuZXhwb3J0cy5mdW5jdGlvbmFsID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL2Z1bmN0aW9uYWxcIikpO1xuZXhwb3J0cy5odHRwID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL2h0dHBcIikpO1xuZXhwb3J0cy5qc29uID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL2pzb25cIikpO1xuZXhwb3J0cy5taXNjID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL21pc2NcIikpO1xuZXhwb3J0cy5ub3RhdGlvbnMgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vbm90YXRpb25zXCIpKTtcbmV4cG9ydHMucHJvdG9idWYgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vcHJvdG9idWZcIikpO1xuZXhwb3J0cy5yZWZsZWN0ID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL3JlZmxlY3RcIikpO1xuZXhwb3J0cy50YWdzID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL3RhZ3NcIikpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3NjaGVtYXMvbWV0YWRhdGEvSUpzRG9jVGFnSW5mb1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vc2NoZW1hcy9qc29uL0lKc29uQXBwbGljYXRpb25cIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0Fzc2VydGlvbkd1YXJkXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9JUmFuZG9tR2VuZXJhdG9yXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9JVmFsaWRhdGlvblwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vVHlwZUd1YXJkRXJyb3JcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL1ByaW1pdGl2ZVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vUmVzb2x2ZWRcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0NhbWVsQ2FzZVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vUGFzY2FsQ2FzZVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vU25ha2VDYXNlXCIpLCBleHBvcnRzKTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGFzc2VydCgpIHtcbiAgICBoYWx0KFwiYXNzZXJ0XCIpO1xufVxudmFyIGFzc2VydFB1cmUgPSAvKiogQF9fUFVSRV9fICovIE9iamVjdC5hc3NpZ24oYXNzZXJ0LCBcbi8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLmFzc2VydChcImFzc2VydFwiKSk7XG5leHBvcnRzLmFzc2VydCA9IGFzc2VydFB1cmU7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBhc3NlcnRHdWFyZCgpIHtcbiAgICBoYWx0KFwiYXNzZXJ0R3VhcmRcIik7XG59XG52YXIgYXNzZXJ0R3VhcmRQdXJlID0gLyoqIEBfX1BVUkVfXyAqLyBPYmplY3QuYXNzaWduKGFzc2VydEd1YXJkLCBcbi8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLmFzc2VydChcImFzc2VydEd1YXJkXCIpKTtcbmV4cG9ydHMuYXNzZXJ0R3VhcmQgPSBhc3NlcnRHdWFyZFB1cmU7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBpcygpIHtcbiAgICBoYWx0KFwiaXNcIik7XG59XG52YXIgaXNQdXJlID0gLyoqIEBfX1BVUkVfXyAqLyBPYmplY3QuYXNzaWduKGlzLCBcbi8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLmFzc2VydChcImlzXCIpKTtcbmV4cG9ydHMuaXMgPSBpc1B1cmU7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiB2YWxpZGF0ZSgpIHtcbiAgICBoYWx0KFwidmFsaWRhdGVcIik7XG59XG52YXIgdmFsaWRhdGVQdXJlID0gLyoqIEBfX1BVUkVfXyAqLyBPYmplY3QuYXNzaWduKHZhbGlkYXRlLCBcbi8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLnZhbGlkYXRlKCkpO1xuZXhwb3J0cy52YWxpZGF0ZSA9IHZhbGlkYXRlUHVyZTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGFzc2VydEVxdWFscygpIHtcbiAgICBoYWx0KFwiYXNzZXJ0RXF1YWxzXCIpO1xufVxudmFyIGFzc2VydEVxdWFsc1B1cmUgPSAvKiogQF9fUFVSRV9fICovIE9iamVjdC5hc3NpZ24oYXNzZXJ0RXF1YWxzLCAvKiogQF9fUFVSRV9fICovIE5hbWVzcGFjZS5hc3NlcnQoXCJhc3NlcnRFcXVhbHNcIikpO1xuZXhwb3J0cy5hc3NlcnRFcXVhbHMgPSBhc3NlcnRFcXVhbHNQdXJlO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0R3VhcmRFcXVhbHMoKSB7XG4gICAgaGFsdChcImFzc2VydEd1YXJkRXF1YWxzXCIpO1xufVxudmFyIGFzc2VydEd1YXJkRXF1YWxzUHVyZSA9IC8qKiBAX19QVVJFX18gKi8gT2JqZWN0LmFzc2lnbihhc3NlcnRHdWFyZEVxdWFscywgLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2UuYXNzZXJ0KFwiYXNzZXJ0R3VhcmRFcXVhbHNcIikpO1xuZXhwb3J0cy5hc3NlcnRHdWFyZEVxdWFscyA9IGFzc2VydEd1YXJkRXF1YWxzUHVyZTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGVxdWFscygpIHtcbiAgICBoYWx0KFwiZXF1YWxzXCIpO1xufVxudmFyIGVxdWFsc1B1cmUgPSAvKiogQF9fUFVSRV9fICovIE9iamVjdC5hc3NpZ24oZXF1YWxzLCBcbi8qKiBAX19QVVJFX18gKi8gTmFtZXNwYWNlLmlzKCkpO1xuZXhwb3J0cy5lcXVhbHMgPSBlcXVhbHNQdXJlO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVFcXVhbHMoKSB7XG4gICAgaGFsdChcInZhbGlkYXRlRXF1YWxzXCIpO1xufVxudmFyIHZhbGlkYXRlRXF1YWxzUHVyZSA9IC8qKiBAX19QVVJFX18gKi8gT2JqZWN0LmFzc2lnbih2YWxpZGF0ZUVxdWFscywgLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2UudmFsaWRhdGUoKSk7XG5leHBvcnRzLnZhbGlkYXRlRXF1YWxzID0gdmFsaWRhdGVFcXVhbHNQdXJlO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gcmFuZG9tKCkge1xuICAgIGhhbHQoXCJyYW5kb21cIik7XG59XG52YXIgcmFuZG9tUHVyZSA9IC8qKiBAX19QVVJFX18gKi8gT2JqZWN0LmFzc2lnbihyYW5kb20sIFxuLyoqIEBfX1BVUkVfXyAqLyBOYW1lc3BhY2UucmFuZG9tKCkpO1xuZXhwb3J0cy5yYW5kb20gPSByYW5kb21QdXJlO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQXNzZXJ0KCkge1xuICAgIGhhbHQoXCJjcmVhdGVBc3NlcnRcIik7XG59XG52YXIgY3JlYXRlQXNzZXJ0UHVyZSA9IC8qKiBAX19QVVJFX18gKi8gT2JqZWN0LmFzc2lnbihjcmVhdGVBc3NlcnQsIGFzc2VydFB1cmUpO1xuZXhwb3J0cy5jcmVhdGVBc3NlcnQgPSBjcmVhdGVBc3NlcnRQdXJlO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQXNzZXJ0R3VhcmQoKSB7XG4gICAgaGFsdChcImNyZWF0ZUFzc2VydEd1YXJkXCIpO1xufVxudmFyIGNyZWF0ZUFzc2VydEd1YXJkUHVyZSA9IC8qKiBAX19QVVJFX18gKi8gT2JqZWN0LmFzc2lnbihjcmVhdGVBc3NlcnRHdWFyZCwgYXNzZXJ0R3VhcmRQdXJlKTtcbmV4cG9ydHMuY3JlYXRlQXNzZXJ0R3VhcmQgPSBjcmVhdGVBc3NlcnRHdWFyZFB1cmU7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBjcmVhdGVJcygpIHtcbiAgICBoYWx0KFwiY3JlYXRlSXNcIik7XG59XG52YXIgY3JlYXRlSXNQdXJlID0gLyoqIEBfX1BVUkVfXyAqLyBPYmplY3QuYXNzaWduKGNyZWF0ZUlzLCBpc1B1cmUpO1xuZXhwb3J0cy5jcmVhdGVJcyA9IGNyZWF0ZUlzUHVyZTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVZhbGlkYXRlKCkge1xuICAgIGhhbHQoXCJjcmVhdGVWYWxpZGF0ZVwiKTtcbn1cbnZhciBjcmVhdGVWYWxpZGF0ZVB1cmUgPSAvKiogQF9fUFVSRV9fICovIE9iamVjdC5hc3NpZ24oY3JlYXRlVmFsaWRhdGUsIHZhbGlkYXRlUHVyZSk7XG5leHBvcnRzLmNyZWF0ZVZhbGlkYXRlID0gY3JlYXRlVmFsaWRhdGVQdXJlO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQXNzZXJ0RXF1YWxzKCkge1xuICAgIGhhbHQoXCJjcmVhdGVBc3NlcnRFcXVhbHNcIik7XG59XG52YXIgY3JlYXRlQXNzZXJ0RXF1YWxzUHVyZSA9IC8qKiBAX19QVVJFX18gKi8gT2JqZWN0LmFzc2lnbihjcmVhdGVBc3NlcnRFcXVhbHMsIGFzc2VydEVxdWFsc1B1cmUpO1xuZXhwb3J0cy5jcmVhdGVBc3NlcnRFcXVhbHMgPSBjcmVhdGVBc3NlcnRFcXVhbHNQdXJlO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQXNzZXJ0R3VhcmRFcXVhbHMoKSB7XG4gICAgaGFsdChcImNyZWF0ZUFzc2VydEd1YXJkRXF1YWxzXCIpO1xufVxudmFyIGNyZWF0ZUFzc2VydEd1YXJkRXF1YWxzUHVyZSA9IC8qKiBAX19QVVJFX18gKi8gT2JqZWN0LmFzc2lnbihjcmVhdGVBc3NlcnRHdWFyZEVxdWFscywgYXNzZXJ0R3VhcmRFcXVhbHNQdXJlKTtcbmV4cG9ydHMuY3JlYXRlQXNzZXJ0R3VhcmRFcXVhbHMgPSBjcmVhdGVBc3NlcnRHdWFyZEVxdWFsc1B1cmU7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBjcmVhdGVFcXVhbHMoKSB7XG4gICAgaGFsdChcImNyZWF0ZUVxdWFsc1wiKTtcbn1cbnZhciBjcmVhdGVFcXVhbHNQdXJlID0gLyoqIEBfX1BVUkVfXyAqLyBPYmplY3QuYXNzaWduKGNyZWF0ZUVxdWFscywgZXF1YWxzUHVyZSk7XG5leHBvcnRzLmNyZWF0ZUVxdWFscyA9IGNyZWF0ZUVxdWFsc1B1cmU7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBjcmVhdGVWYWxpZGF0ZUVxdWFscygpIHtcbiAgICBoYWx0KFwiY3JlYXRlVmFsaWRhdGVFcXVhbHNcIik7XG59XG52YXIgY3JlYXRlVmFsaWRhdGVFcXVhbHNQdXJlID0gLyoqIEBfX1BVUkVfXyAqLyBPYmplY3QuYXNzaWduKGNyZWF0ZVZhbGlkYXRlRXF1YWxzLCB2YWxpZGF0ZUVxdWFsc1B1cmUpO1xuZXhwb3J0cy5jcmVhdGVWYWxpZGF0ZUVxdWFscyA9IGNyZWF0ZVZhbGlkYXRlRXF1YWxzUHVyZTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVJhbmRvbSgpIHtcbiAgICBoYWx0KFwiY3JlYXRlUmFuZG9tXCIpO1xufVxudmFyIGNyZWF0ZVJhbmRvbVB1cmUgPSAvKiogQF9fUFVSRV9fICovIE9iamVjdC5hc3NpZ24oY3JlYXRlUmFuZG9tLCByYW5kb21QdXJlKTtcbmV4cG9ydHMuY3JlYXRlUmFuZG9tID0gY3JlYXRlUmFuZG9tUHVyZTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGhhbHQobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkVycm9yIG9uIHR5cGlhLlwiLmNvbmNhdChuYW1lLCBcIigpOiBubyB0cmFuc2Zvcm0gaGFzIGJlZW4gY29uZmlndXJlZC4gUmVhZCBhbmQgZm9sbG93IGh0dHBzOi8vdHlwaWEuaW8vZG9jcy9zZXR1cCBwbGVhc2UuXCIpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vZHVsZS5qcy5tYXAiLAogICAgIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHR5cGlhID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL21vZHVsZVwiKSk7XG5leHBvcnRzLmRlZmF1bHQgPSB0eXBpYTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9tb2R1bGVcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIgogIF0sCiAgIm1hcHBpbmdzIjogIjBFQUFBLEdBQU8sUUFBVSxDQUNmLEtBQWEsRUFDYixNQUFhLEVBQ2IsU0FBYSxFQUNiLElBQWEsRUFDYixNQUFhLEVBQ2IsV0FBYSxFQUNiLFVBQWEsRUFDYixLQUFhLENBQ2Ysb0JDVEEsSUFBTSxPQUVBLEdBQU8sSUFBTSxDQUFDLENBQUUsS0FBTSxFQUFNLE1BQVEsS0FBTSxHQUFJLEdBQUksRUFBRyxDQUFDLEVBRXRELEdBQVEsSUFBTSxDQUNsQixNQUFPLENBQ0wsQ0FBRSxLQUFNLEVBQU0sS0FBTSxNQUFPLEVBQUcsRUFDOUIsQ0FBRSxLQUFNLEVBQU0sTUFBTyxLQUFNLEdBQUksR0FBSSxHQUFJLEVBQ3ZDLENBQUUsS0FBTSxFQUFNLE1BQU8sS0FBTSxHQUFJLEdBQUksRUFBRyxDQUN4QyxFQUFFLE9BQU8sR0FBSyxDQUFDLEdBR1gsR0FBYSxJQUFNLENBQ3ZCLE1BQU8sQ0FDTCxDQUFFLEtBQU0sRUFBTSxLQUFNLE1BQU8sQ0FBRSxFQUM3QixDQUFFLEtBQU0sRUFBTSxLQUFNLE1BQU8sRUFBRyxFQUM5QixDQUFFLEtBQU0sRUFBTSxLQUFNLE1BQU8sRUFBRyxFQUM5QixDQUFFLEtBQU0sRUFBTSxLQUFNLE1BQU8sRUFBRyxFQUM5QixDQUFFLEtBQU0sRUFBTSxLQUFNLE1BQU8s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QUksV0FBWSxPQUFPLEVBQ2xDLElBQUksRUFBUyxDQUFDLEVBQ2QsR0FBSSxHQUFPLE1BQU0sUUFBUyxLQUFLLEVBQUssR0FBSSxJQUFNLFdBQWEsT0FBTyxVQUFVLGVBQWUsS0FBSyxFQUFLLENBQUMsRUFBRyxHQUFnQixFQUFRLEVBQUssQ0FBQyxFQUV2SSxPQURBLEdBQW1CLEVBQVEsQ0FBRyxFQUN2QixHQUVQLEdBQWdCLEdBQVEsRUFBSyxzQkFBeUIsQ0FBQyxFQUFHLEVBQVMsQ0FDbkUsUUFBUyxLQUFLLEVBQUcsR0FBSSxJQUFNLFlBQWMsT0FBTyxVQUFVLGVBQWUsS0FBSyxFQUFTLENBQUMsRUFBRyxHQUFnQixFQUFTLEVBQUcsQ0FBQyxHQUU1SCxPQUFPLGVBQWUsRUFBUyxhQUFjLENBQUUsTUFBTyxFQUFLLENBQUMsRUFDNUQsSUFBSSxHQUFRLE9BQWdDLEVBQzVDLEVBQVEsUUFBVSxHQUNsQixRQUFrQyxDQUFPIiwKICAiZGVidWdJZCI6ICJDMThCMzY0NzM5MThCOUQ4NjQ3NTZlMjE2NDc1NmUyMSIsCiAgIm5hbWVzIjogW10KfQ==
