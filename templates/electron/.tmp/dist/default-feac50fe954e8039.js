import{b as L,e as c,g as U} from"./run-command-3641d3f5f84ce53c.js";import"./run-command-e3e49c92a10f73b5.js";import{m as N} from"./run-command-0e4caa5896ecd371.js";import x from"node:process";var d=function(t={}){const{origin:f=x.env.ORIGIN,trustProxy:a=x.env.TRUST_PROXY==="1"}=t;let{protocol:o,host:e}=f?new URL(f):{};if(o)o=o.slice(0,-1);let s=!1;return function n(u){function y(b){return(i["x-forwarded-"+b]||"").split(",",1)[0].trim()}let i=u.headers;if(i[":method"])i=Object.fromEntries(Object.entries(i).filter(([b])=>!b.startsWith(":")));const g=u.ip||a&&y("for")||u.socket?.remoteAddress||"",H=o||u.protocol||a&&y("proto")||u.socket?.encrypted&&"https"||"http";let l=e||a&&y("host")||i.host;if(!l&&!s)console.warn("Could not automatically determine the origin host, using 'localhost'. Use the 'origin' option or the 'ORIGIN' environment variable to set the origin explicitly."),s=!0,l="localhost";return[new Request(H+"://"+l+u.url,{method:u.method,headers:i,body:K(u),duplex:"half"}),g]}},K=function(t){if(t.method==="GET"||t.method==="HEAD")return;if(t.rawBody!==void 0)return t.rawBody;if(!J&&!z)return t;return new ReadableStream({start(f){t.on("data",(a)=>f.enqueue(a)),t.on("end",()=>f.close()),t.on("error",(a)=>f.error(a))}})},z=typeof Deno!=="undefined",J=typeof Bun!=="undefined";var p=Symbol("rawBody");import{Readable as r} from"node:stream";async function A(t,f){if(t[p]){h(t,f),f.end(t[p]);return}const{body:a}=t;let o=null;if(!T&&a instanceof r)o=a;else if(a instanceof ReadableStream)if(!T&&r.fromWeb)o=r.fromWeb(a);else{const e=a.getReader();o=new r({async read(){const{done:s,value:n}=await e.read();this.push(s?null:n)}})}else if(a)o=r.from(a);if(h(t,f),o)o.pipe(f),await new Promise((e,s)=>{o.on("error",s),f.on("finish",e),f.on("error",s)});else f.setHeader("content-length","0"),f.end()}var h=function(t,f){if(f.statusCode=t.status,t.statusText)f.statusMessage=t.statusText;const a=new Set(t.headers.keys());for(let o of a)if(o==="set-cookie"){const e=t.headers.getSetCookie();if(f.appendHeader)for(let s of e)f.appendHeader("set-cookie",s);else f.setHeader("set-cookie",e)}else f.setHeader(o,t.headers.get(o))},T=typeof Deno!=="undefined";if(T){const t=Headers.prototype.set;Headers.prototype.set=function f(a,o){if(Array.isArray(o))this.delete(a),o.forEach((e)=>this.append(a,e));else t.call(this,a,o)}}import{createServer as B} from"node:http";import Q from"node:process";var E=function(t,f={}){const{alwaysCallNext:a=!0,...o}=f,e=d(o);return async(s,n,u)=>{try{const[y,i]=e(s);let g=!1;const l=await t({request:y,ip:i,env(m){return Q.env[m]},waitUntil(m){},passThrough(){g=!0},platform:{name:"node",request:s,response:n}});if(g&&u){u();return}if(await A(l,n),u&&a)u()}catch(y){if(u)u(y);else{if(console.error(y),!n.headersSent)n.statusCode=500;if(!n.writableEnded)n.end()}}}},C=function(t,f,a){const o=E(t,f);return a?B(a,o):B(o)};import*as I from"node:stream/web";var j=function(){if(typeof globalThis.Headers.prototype.getSetCookie==="function")return;if(typeof globalThis.Headers.prototype.getAll==="function"){globalThis.Headers.prototype.getSetCookie=function t(){return this.getAll("Set-Cookie")};return}if(typeof globalThis.Headers.prototype.raw==="function"){globalThis.Headers.prototype.getSetCookie=function(){const t=this.raw()["set-cookie"];if(!t)return[];else if(typeof t==="string")return[t];return t};return}globalThis.Headers.prototype.getSetCookie=function t(){return[...this].filter(([f])=>f.toLowerCase()==="set-cookie").map(([,f])=>f)}};import V from"node:crypto";var k=function(){if(globalThis.crypto)return;Object.defineProperty(globalThis,"crypto",{value:V.webcrypto,writable:!1,configurable:!0})};var S=function(){return};j();k();S();for(let t of Object.keys(I))if(!(t in globalThis))globalThis[t]=I[t];import{spawn as X} from"node:child_process";var pt=L({meta:{},async action(t,f){const a=U(await N),o=await c.port;C(a).listen(o,"localhost",async()=>{console.log(`Milkio Server listening on http://localhost:${o}`);const e=async()=>{const s=new electron.BrowserWindow({show:!1,width:800,height:600});if(s.maximize(),setTimeout(()=>s.show(),1000),c.openDevTool)s.webContents.openDevTools();const n=[`localhost:${o}`,...c.allowDomains];if(!electron.app.isPackaged)n.push(`${c.devWebviewUrl}`);s.webContents.on("will-navigate",(y)=>{y.preventDefault();const i=new URL(y.url);if(n.includes(i.host))i.searchParams.set("_milkioServer",`http://localhost:${o}`),s.loadURL(i.toString());else electron.shell.openExternal(i.toString())}),await Y();const u=new URL(electron.app.isPackaged?`http://localhost:${o}`:`http://${c.devWebviewUrl}`);u.searchParams.set("_milkioServer",`http://localhost:${o}`),s.loadURL(u.toString())};electron.app.on("window-all-closed",()=>{if(process.platform!=="darwin")electron.app.quit()}),await electron.app.whenReady(),electron.Menu.setApplicationMenu(null),e(),electron.app.on("activate",()=>{if(electron.BrowserWindow.getAllWindows().length===0)e()})})}}),Y=async()=>{if(electron.app.isPackaged)return;const t=X("npm",["run","astro","dev"]);t.stdout.on("data",(f)=>console.log(f.toString())),t.stderr.on("data",(f)=>console.log(f.toString())),await new Promise((f)=>setTimeout(f,1000))};export{pt as api};

//# debugId=FEAC50FE954E803964756e2164756e21
//# sourceMappingURL=data:application/json;base64,
