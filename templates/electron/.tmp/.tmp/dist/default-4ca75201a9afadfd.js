import{a as S} from"./run-command-c18b36473918b9d8.js";import{f as b} from"./run-command-30563eedf5406ef6.js";import{j as A} from"./run-command-e3e49c92a10f73b5.js";var v=A(S(),1);var N=async(R)=>((l)=>{const O=(o)=>{const n=[];if(((r)=>{const d=(e)=>Array.isArray(e.commands)&&e.commands.every((T)=>typeof T==="string")&&(typeof e.options==="object"&&e.options!==null&&Array.isArray(e.options)===!1&&s(e.options)),s=(e)=>Object.keys(e).every((T)=>{const a=e[T];if(a===void 0)return!0;return a===!0||typeof a==="string"});return typeof r==="object"&&r!==null&&d(r)})(o)===!1){const r=v.default.misc.validatePrune.report(n);((d,s,e=!0)=>{const T=v.default.misc.validatePrune.join,a=(t,y,g=!0)=>[(Array.isArray(t.commands)||r(g,{path:y+".commands",expected:"Array<string>",value:t.commands}))&&t.commands.map((u,m)=>typeof u==="string"||r(g,{path:y+".commands["+m+"]",expected:"string",value:u})).every((u)=>u)||r(g,{path:y+".commands",expected:"Array<string>",value:t.commands}),(typeof t.options==="object"&&t.options!==null&&Array.isArray(t.options)===!1||r(g,{path:y+".options",expected:"Record<string, string | true>",value:t.options}))&&c(t.options,y+".options",g)||r(g,{path:y+".options",expected:"Record<string, string | true>",value:t.options})].every((u)=>u),c=(t,y,g=!0)=>[g===!1||Object.keys(t).map((u)=>{const m=t[u];if(m===void 0)return!0;return m===!0||typeof m==="string"||r(g,{path:y+T(u),expected:"(string | true)",value:m})}).every((u)=>u)].every((u)=>u);return(typeof d==="object"&&d!==null||r(!0,{path:s+"",expected:"__type",value:d}))&&a(d,s+"",!0)||r(!0,{path:s+"",expected:"__type",value:d})})(o,"$input",!0)}const E=n.length===0;return{success:E,errors:n,data:E?o:void 0}},x=(o)=>{const n=(r)=>Object.keys(r).every((d)=>{const s=r[d];if(s===void 0)return!0;return s===!0||typeof s==="string"}),f=(r)=>{if(typeof r.options==="object"&&r.options!==null)E(r.options);for(let d of Object.keys(r)){if(d==="commands"||d==="options")continue;delete r[d]}},E=(r)=>{Object.entries(r).forEach(([d,s])=>{if(s===void 0)return;if(RegExp(/(.*)/).test(d));});for(let d of Object.keys(r)){if(RegExp(/(.*)/).test(d))continue;delete r[d]}};if(typeof o==="object"&&o!==null)f(o)},i=O(l);if(i.success)x(l);return i})(R),I=async(R)=>{return b(((l)=>{const O=[];if(((o)=>{const n=(s)=>typeof s.executeId==="string"&&s.success===!0&&(s.data!==null&&s.data===void 0),f=(s)=>typeof s.executeId==="string"&&s.success===!1&&(typeof s.fail==="object"&&s.fail!==null&&E(s.fail)),E=(s)=>(s.code==="NETWORK_ERROR"||s.code==="INTERNAL_SERVER_ERROR"||s.code==="NOT_FOUND"||s.code==="NOT_ALLOW_METHOD"||s.code==="TYPE_SAFE_ERROR"||s.code==="BUSINESS_FAIL")&&typeof s.message==="string"&&(s.data===void 0||typeof s.data==="object"&&s.data!==null&&r(s.data)),r=(s)=>typeof s.path==="string"&&typeof s.expected==="string"&&typeof s.value==="string";return typeof o==="object"&&o!==null&&((s)=>(()=>{if(s.success===!0)return n(s);else if(s.success===!1)return f(s);else return!1})())(o)})(l)===!1){const o=v.default.validate.report(O);((n,f,E=!0)=>{const r=(a,c,t=!0)=>[typeof a.executeId==="string"||o(t,{path:c+".executeId",expected:"string",value:a.executeId}),a.success===!0||o(t,{path:c+".success",expected:"true",value:a.success}),(a.data!==null||o(t,{path:c+".data",expected:"undefined",value:a.data}))&&(a.data===void 0||o(t,{path:c+".data",expected:"undefined",value:a.data}))].every((y)=>y),d=(a,c,t=!0)=>[typeof a.executeId==="string"||o(t,{path:c+".executeId",expected:"string",value:a.executeId}),a.success===!1||o(t,{path:c+".success",expected:"false",value:a.success}),(typeof a.fail==="object"&&a.fail!==null||o(t,{path:c+".fail",expected:"RecursiveObjectXToString<Fail<\"NETWORK_ERROR\" | \"INTERNAL_SERVER_ERROR\" | \"NOT_FOUND\" | \"NOT_ALLOW_METHOD\" | \"TYPE_SAFE_ERROR\" | \"BUSINESS_FAIL\">, bigint | RegExp | Date | URL | Uint8Array | ArrayBuffer>",value:a.fail}))&&s(a.fail,c+".fail",t)||o(t,{path:c+".fail",expected:"RecursiveObjectXToString<Fail<\"NETWORK_ERROR\" | \"INTERNAL_SERVER_ERROR\" | \"NOT_FOUND\" | \"NOT_ALLOW_METHOD\" | \"TYPE_SAFE_ERROR\" | \"BUSINESS_FAIL\">, bigint | RegExp | Date | URL | Uint8Array | ArrayBuffer>",value:a.fail})].every((y)=>y),s=(a,c,t=!0)=>[a.code==="NETWORK_ERROR"||a.code==="INTERNAL_SERVER_ERROR"||a.code==="NOT_FOUND"||a.code==="NOT_ALLOW_METHOD"||a.code==="TYPE_SAFE_ERROR"||a.code==="BUSINESS_FAIL"||o(t,{path:c+".code",expected:"(\"BUSINESS_FAIL\" | \"INTERNAL_SERVER_ERROR\" | \"NETWORK_ERROR\" | \"NOT_ALLOW_METHOD\" | \"NOT_FOUND\" | \"TYPE_SAFE_ERROR\")",value:a.code}),typeof a.message==="string"||o(t,{path:c+".message",expected:"string",value:a.message}),a.data===void 0||(typeof a.data==="object"&&a.data!==null||o(t,{path:c+".data",expected:"(__type | undefined)",value:a.data}))&&e(a.data,c+".data",t)||o(t,{path:c+".data",expected:"(__type | undefined)",value:a.data})].every((y)=>y),e=(a,c,t=!0)=>[typeof a.path==="string"||o(t,{path:c+".path",expected:"string",value:a.path}),typeof a.expected==="string"||o(t,{path:c+".expected",expected:"string",value:a.expected}),typeof a.value==="string"||o(t,{path:c+".value",expected:"string",value:a.value})].every((y)=>y),T=(a,c,t=!0)=>(()=>{if(a.success===!0)return r(a,c,t);else if(a.success===!1)return d(a,c,t);else return o(t,{path:c,expected:"(RecursiveObjectXToString<ExecuteResultSuccess<void>, bigint | RegExp | Date | URL | Uint8Array | ArrayBuffer> | RecursiveObjectXToString<ExecuteResultFail, bigint | RegExp | Date | URL | Uint8Array | ArrayBuffer>)",value:a})})();return(typeof n==="object"&&n!==null||o(!0,{path:f+"",expected:"(RecursiveObjectXToString<ExecuteResultFail, bigint | RegExp | Date | URL | Uint8Array | ArrayBuffer> | RecursiveObjectXToString<ExecuteResultSuccess<void>, bigint | RegExp | Date | URL | Uint8Array | ArrayBuffer>)",value:n}))&&T(n,f+"",!0)||o(!0,{path:f+"",expected:"(RecursiveObjectXToString<ExecuteResultFail, bigint | RegExp | Date | URL | Uint8Array | ArrayBuffer> | RecursiveObjectXToString<ExecuteResultSuccess<void>, bigint | RegExp | Date | URL | Uint8Array | ArrayBuffer>)",value:n})})(l,"$input",!0)}const i=O.length===0;return{success:i,errors:O,data:i?l:void 0}})(R)),((l)=>{const O=(e)=>typeof e.executeId==="string"&&e.success===!0&&(e.data!==null&&e.data===void 0),x=(e)=>typeof e.executeId==="string"&&e.success===!1&&(typeof e.fail==="object"&&e.fail!==null&&i(e.fail)),i=(e)=>(e.code==="NETWORK_ERROR"||e.code==="INTERNAL_SERVER_ERROR"||e.code==="NOT_FOUND"||e.code==="NOT_ALLOW_METHOD"||e.code==="TYPE_SAFE_ERROR"||e.code==="BUSINESS_FAIL")&&typeof e.message==="string"&&(e.data===void 0||typeof e.data==="object"&&e.data!==null&&o(e.data)),o=(e)=>typeof e.path==="string"&&typeof e.expected==="string"&&typeof e.value==="string",n=v.default.json.stringify.string,f=v.default.json.stringify.throws,E=(e)=>`{"executeId":${n(e.executeId)},"success":${e.success}}`,r=(e)=>`{"executeId":${n(e.executeId)},"success":${e.success},"fail":${d(e.fail)}}`,d=(e)=>`{${e.data===void 0?"":`"data":${e.data!==void 0?`{"path":${n(e.data.path)},"expected":${n(e.data.expected)},"value":${n(e.data.value)}}`:void 0},`}"code":${(()=>{if(typeof e.code==="string")return n(e.code);if(typeof e.code==="string")return"\""+e.code+"\"";f({expected:"(\"BUSINESS_FAIL\" | \"INTERNAL_SERVER_ERROR\" | \"NETWORK_ERROR\" | \"NOT_ALLOW_METHOD\" | \"NOT_FOUND\" | \"TYPE_SAFE_ERROR\")",value:e.code})})()},"message":${n(e.message)}}`;return((e)=>(()=>{if(e.success===!0)return E(e);else if(e.success===!1)return r(e);else f({expected:"(RecursiveObjectXToString<ExecuteResultSuccess<void>, bigint | RegExp | Date | URL | Uint8Array | ArrayBuffer> | RecursiveObjectXToString<ExecuteResultFail, bigint | RegExp | Date | URL | Uint8Array | ArrayBuffer>)",value:e})})())(l)})(R)},L=async()=>((R)=>{const l=v.default.random.generator,O=v.default.random.pick,x=(o=!1,n=0)=>({commands:(R?.array??l.array)(()=>(R?.customs??l.customs)?.string?.([])??(R?.string??l.string)()),options:i(o,o?1+n:n)}),i=(o=!1,n=0)=>{const f={};return(R?.array??l.array)(()=>f[(R?.customs??l.customs)?.string?.([])??(R?.string??l.string)()]=O([()=>!0,()=>(R?.customs??l.customs)?.string?.([])??(R?.string??l.string)()])(),(R?.integer??l.integer)(0,3)),f};return x()})();export{I as validateResults,N as validateParams,L as randParams};

//# debugId=4CA75201A9AFADFD64756e2164756e21
//# sourceMappingURL=data:application/json;base64,
