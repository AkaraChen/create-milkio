import{j as GA,k as C,l as O} from"./run-command-e3e49c92a10f73b5.js";var mf=C((P9,cf)=>{var of=function(){var f="eth",A=wf.platform();if(A==="darwin")f="en";else if(A==="win32")f=null;return f},F$=function(){if(wf.platform()==="win32")return"ipconfig/all";return"/sbin/ifconfig"},pf=function(f,A){if(A==="IPv4")return f==="IPv4"||f===4;if(A==="IPv6")return f==="IPv6"||f===6;return f===A},E=function(f,A){if(typeof f==="function")A=f,f=null;var $={ip:E.ip(f),ipv6:E.ipv6(f),mac:null};E.mac(f,function(y,S){if(S)$.mac=S;A(y,$)})},R$=function(f,A,$){var y=f.split("\n");for(var S=0;S<y.length;S++){var B=y[S].trimRight(),W=bf.exec(B)||sf.exec(B);if(!W)continue;var j=W[1];if(j.indexOf(A)!==0)continue;var J=null,Z=null,H=tf.exec(B);if(H)Z=H[1];S++;while(!0){if(B=y[S],!B||bf.exec(B)||sf.exec(B)){S--;break}if(!Z){if(H=tf.exec(B),H)Z=H[1]}if(!J){if(H=M$.exec(B),H)J=H[1]}S++}if(J===$)return Z}},wf=O("os"),E$=O("fs"),_$=O("child_process"),O$="/etc/resolv.conf";E.interface=function(f,A){var $=wf.networkInterfaces(),y=!A;A=A||of(),f=f||"IPv4";for(var S=-1;S<8;S++){var B=A+(S>=0?S:""),W=$[B];if(W)for(var j=0;j<W.length;j++){var J=W[j];if(pf(J.family,f))return J}}if(y)for(var Z in $){var W=$[Z];for(var S=0;S<W.length;S++){var J=W[S];if(pf(J.family,f)&&!J.address.startsWith("127."))return J}}return};E.ip=function(f){var A=E.interface("IPv4",f);return A&&A.address};E.ipv6=function(f){var A=E.interface("IPv6",f);return A&&A.address};var bf=/^(\w+)\:\s+flags=/,sf=/^(\w+)\s{2,}link encap:\w+/i,tf=E.MAC_RE=/(?:ether|HWaddr)\s+((?:[a-z0-9]{2}\:){5}[a-z0-9]{2})/i,M$=E.MAC_IP_RE=/inet\s(?:addr\:)?(\d+\.\d+\.\d+\.\d+)/;E.mac=function(f,A){if(typeof f==="function")A=f,f=null;f=f||of();var $=E.interface("IPv4",f);if(!$)return A();if(!process.env.CI&&($.mac==="ff:00:00:00:00:00"||$.mac==="00:00:00:00:00:00"))$.mac="";if($.mac)return A(null,$.mac);_$.exec(F$(),{timeout:5000},function(y,S,B){if(y||!S)return A(y);var W=R$(S||"",f,$.address);A(null,W)})};var C$=/^nameserver\s+(\d+\.\d+\.\d+\.\d+)$/i;E.dns=function(f,A){if(typeof f==="function")A=f,f=null;f=f||O$,E$.readFile(f,"utf8",function($,y){if($)return A($);var S=[];y=y||"";var B=y.split("\n");for(var W=0;W<B.length;W++){var j=B[W].trim(),J=C$.exec(j);if(J)S.push(J[1])}A(null,S)})};cf.exports=E});var rf=C((w9,df)=>{var n$=function(f){if(f=String(f),f.length>100)return;var A=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(f);if(!A)return;var $=parseFloat(A[1]),y=(A[2]||"ms").toLowerCase();switch(y){case"years":case"year":case"yrs":case"yr":case"y":return $*D$;case"weeks":case"week":case"w":return $*k$;case"days":case"day":case"d":return $*b;case"hours":case"hour":case"hrs":case"hr":case"h":return $*r;case"minutes":case"minute":case"mins":case"min":case"m":return $*d;case"seconds":case"second":case"secs":case"sec":case"s":return $*m;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return $;default:return}},g$=function(f){var A=Math.abs(f);if(A>=b)return Math.round(f/b)+"d";if(A>=r)return Math.round(f/r)+"h";if(A>=d)return Math.round(f/d)+"m";if(A>=m)return Math.round(f/m)+"s";return f+"ms"},I$=function(f){var A=Math.abs(f);if(A>=b)return jf(f,A,b,"day");if(A>=r)return jf(f,A,r,"hour");if(A>=d)return jf(f,A,d,"minute");if(A>=m)return jf(f,A,m,"second");return f+" ms"},jf=function(f,A,$,y){var S=A>=$*1.5;return Math.round(f/$)+" "+y+(S?"s":"")},m=1000,d=m*60,r=d*60,b=r*24,k$=b*7,D$=b*365.25;df.exports=function(f,A){A=A||{};var $=typeof f;if($==="string"&&f.length>0)return n$(f);else if($==="number"&&isFinite(f))return A.long?I$(f):g$(f);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(f))}});var xf=C((x9,lf)=>{var h$=function(f){$.debug=$,$.default=$,$.coerce=J,$.disable=B,$.enable=S,$.enabled=W,$.humanize=rf(),$.destroy=Z,Object.keys(f).forEach((H)=>{$[H]=f[H]}),$.names=[],$.skips=[],$.formatters={};function A(H){let Q=0;for(let V=0;V<H.length;V++)Q=(Q<<5)-Q+H.charCodeAt(V),Q|=0;return $.colors[Math.abs(Q)%$.colors.length]}$.selectColor=A;function $(H){let Q,V=null,D,t;function Y(...K){if(!Y.enabled)return;const k=Y,P=Number(new Date),q=P-(Q||P);if(k.diff=q,k.prev=Q,k.curr=P,Q=P,K[0]=$.coerce(K[0]),typeof K[0]!=="string")K.unshift("%O");let _=0;K[0]=K[0].replace(/%([a-zA-Z%])/g,(T,n)=>{if(T==="%%")return"%";_++;const _f=$.formatters[n];if(typeof _f==="function"){const z$=K[_];T=_f.call(k,z$),K.splice(_,1),_--}return T}),$.formatArgs.call(k,K),(k.log||$.log).apply(k,K)}if(Y.namespace=H,Y.useColors=$.useColors(),Y.color=$.selectColor(H),Y.extend=y,Y.destroy=$.destroy,Object.defineProperty(Y,"enabled",{enumerable:!0,configurable:!1,get:()=>{if(V!==null)return V;if(D!==$.namespaces)D=$.namespaces,t=$.enabled(H);return t},set:(K)=>{V=K}}),typeof $.init==="function")$.init(Y);return Y}function y(H,Q){const V=$(this.namespace+(typeof Q==="undefined"?":":Q)+H);return V.log=this.log,V}function S(H){$.save(H),$.namespaces=H,$.names=[],$.skips=[];let Q;const V=(typeof H==="string"?H:"").split(/[\s,]+/),D=V.length;for(Q=0;Q<D;Q++){if(!V[Q])continue;if(H=V[Q].replace(/\*/g,".*?"),H[0]==="-")$.skips.push(new RegExp("^"+H.slice(1)+"$"));else $.names.push(new RegExp("^"+H+"$"))}}function B(){const H=[...$.names.map(j),...$.skips.map(j).map((Q)=>"-"+Q)].join(",");return $.enable(""),H}function W(H){if(H[H.length-1]==="*")return!0;let Q,V;for(Q=0,V=$.skips.length;Q<V;Q++)if($.skips[Q].test(H))return!1;for(Q=0,V=$.names.length;Q<V;Q++)if($.names[Q].test(H))return!0;return!1}function j(H){return H.toString().substring(2,H.toString().length-2).replace(/\.\*\?$/,"*")}function J(H){if(H instanceof Error)return H.stack||H.message;return H}function Z(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")}return $.enable($.load()),$};lf.exports=h$});var ef=C((af,Jf)=>{var N$=function(){if(typeof window!=="undefined"&&window.process&&(window.process.type==="renderer"||window.process.__nwjs))return!0;if(typeof navigator!=="undefined"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return typeof document!=="undefined"&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||typeof window!=="undefined"&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||typeof navigator!=="undefined"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||typeof navigator!=="undefined"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},u$=function(f){if(f[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+f[0]+(this.useColors?"%c ":" ")+"+"+af.humanize(this.diff),!this.useColors)return;const A="color: "+this.color;f.splice(1,0,A,"color: inherit");let $=0,y=0;f[0].replace(/%[a-zA-Z%]/g,(S)=>{if(S==="%%")return;if($++,S==="%c")y=$}),f.splice(y,0,A)},v$=function(f){try{if(f)af.storage.setItem("debug",f);else af.storage.removeItem("debug")}catch(A){}},p$=function(){let f;try{f=af.storage.getItem("debug")}catch(A){}if(!f&&typeof process!=="undefined"&&"env"in process)f=process.env.DEBUG;return f},i$=function(){try{return localStorage}catch(f){}};af.formatArgs=u$;af.save=v$;af.load=p$;af.useColors=N$;af.storage=i$();af.destroy=(()=>{let f=!1;return()=>{if(!f)f=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")}})();af.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"];af.log=console.debug||console.log||(()=>{});Jf.exports=xf()(af);var{formatters:b$}=Jf.exports;b$.j=function(f){try{return JSON.stringify(f)}catch(A){return"[UnexpectedJSONParseError]: "+A.message}}});var $$=C((G9,f$)=>{f$.exports=(f,A=process.argv)=>{const $=f.startsWith("-")?"":f.length===1?"-":"--",y=A.indexOf($+f),S=A.indexOf("--");return y!==-1&&(S===-1||y<S)}});var S$=C((U9,y$)=>{var Tf=function(f){if(f===0)return!1;return{level:f,hasBasic:!0,has256:f>=2,has16m:f>=3}},Gf=function(f,A){if(N===0)return 0;if(R("color=16m")||R("color=full")||R("color=truecolor"))return 3;if(R("color=256"))return 2;if(f&&!A&&N===void 0)return 0;const $=N||0;if(z.TERM==="dumb")return $;if(process.platform==="win32"){const y=l$.release().split(".");if(Number(y[0])>=10&&Number(y[2])>=10586)return Number(y[2])>=14931?3:2;return 1}if("CI"in z){if(["TRAVIS","CIRCLECI","APPVEYOR","GITLAB_CI","GITHUB_ACTIONS","BUILDKITE"].some((y)=>(y in z))||z.CI_NAME==="codeship")return 1;return $}if("TEAMCITY_VERSION"in z)return/^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(z.TEAMCITY_VERSION)?1:0;if(z.COLORTERM==="truecolor")return 3;if("TERM_PROGRAM"in z){const y=parseInt((z.TERM_PROGRAM_VERSION||"").split(".")[0],10);switch(z.TERM_PROGRAM){case"iTerm.app":return y>=3?3:2;case"Apple_Terminal":return 2}}if(/-256(color)?$/i.test(z.TERM))return 2;if(/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(z.TERM))return 1;if("COLORTERM"in z)return 1;return $},a$=function(f){const A=Gf(f,f&&f.isTTY);return Tf(A)},l$=O("os"),A$=O("tty"),R=$$(),{env:z}=process,N;if(R("no-color")||R("no-colors")||R("color=false")||R("color=never"))N=0;else if(R("color")||R("colors")||R("color=true")||R("color=always"))N=1;if("FORCE_COLOR"in z)if(z.FORCE_COLOR==="true")N=1;else if(z.FORCE_COLOR==="false")N=0;else N=z.FORCE_COLOR.length===0?1:Math.min(parseInt(z.FORCE_COLOR,10),3);y$.exports={supportsColor:a$,stdout:Tf(Gf(!0,A$.isatty(1))),stderr:Tf(Gf(!0,A$.isatty(2)))}});var j$=C((W$,Zf)=>{var fA=function(){return"colors"in W$.inspectOpts?Boolean(W$.inspectOpts.colors):e$.isatty(process.stderr.fd)},$A=function(f){const{namespace:A,useColors:$}=this;if($){const y=this.color,S="\x1B[3"+(y<8?y:"8;5;"+y),B=`  ${S};1m${A} \x1B[0m`;f[0]=B+f[0].split("\n").join("\n"+B),f.push(S+"m+"+W$.humanize(this.diff)+"\x1B[0m")}else f[0]=AA()+A+" "+f[0]},AA=function(){if(W$.inspectOpts.hideDate)return"";return(new Date()).toISOString()+" "},yA=function(...f){return process.stderr.write(Qf.formatWithOptions(W$.inspectOpts,...f)+"\n")},SA=function(f){if(f)process.env.DEBUG=f;else delete process.env.DEBUG},BA=function(){return process.env.DEBUG},WA=function(f){f.inspectOpts={};const A=Object.keys(W$.inspectOpts);for(let $=0;$<A.length;$++)f.inspectOpts[A[$]]=W$.inspectOpts[A[$]]},e$=O("tty"),Qf=O("util");W$.init=WA;W$.log=yA;W$.formatArgs=$A;W$.save=SA;W$.load=BA;W$.useColors=fA;W$.destroy=Qf.deprecate(()=>{},"Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");W$.colors=[6,2,3,4,5,1];try{const f=S$();if(f&&(f.stderr||f).level>=2)W$.colors=[20,21,26,27,32,33,38,39,40,41,42,43,44,45,56,57,62,63,68,69,74,75,76,77,78,79,80,81,92,93,98,99,112,113,128,129,134,135,148,149,160,161,162,163,164,165,166,167,168,169,170,171,172,173,178,179,184,185,196,197,198,199,200,201,202,203,204,205,206,207,208,209,214,215,220,221]}catch(f){}W$.inspectOpts=Object.keys(process.env).filter((f)=>{return/^debug_/i.test(f)}).reduce((f,A)=>{const $=A.substring(6).toLowerCase().replace(/_([a-z])/g,(S,B)=>{return B.toUpperCase()});let y=process.env[A];if(/^(yes|on|true|enabled)$/i.test(y))y=!0;else if(/^(no|off|false|disabled)$/i.test(y))y=!1;else if(y==="null")y=null;else y=Number(y);return f[$]=y,f},{});Zf.exports=xf()(W$);var{formatters:B$}=Zf.exports;B$.o=function(f){return this.inspectOpts.colors=this.useColors,Qf.inspect(f,this.inspectOpts).split("\n").map((A)=>A.trim()).join(" ")};B$.O=function(f){return this.inspectOpts.colors=this.useColors,Qf.inspect(f,this.inspectOpts)}});var Xf=C((q9,Uf)=>{if(typeof process==="undefined"||process.type==="renderer"||!1||process.__nwjs)Uf.exports=ef();else Uf.exports=j$()});var Lf=C((L9,V$)=>{var qf=function(f,A,$,y){function S(){if(f++,f>=A)Sf("port: %s >= maxPort: %s, give up and use random port",f,A),f=0,A=0;qf(f,A,$,y)}if($)yf(f,$,(B,W)=>{if(B){if(B.code==="EADDRNOTAVAIL")return y(new Error("the ip that is not unknown on the machine"));return S()}y(null,W)});else yf(f,null,(B,W)=>{if(f===0)return y(B,W);if(B)return S(B);yf(f,"0.0.0.0",(j)=>{if(j)return S(j);yf(f,"localhost",(J)=>{if(J&&J.code!=="EADDRNOTAVAIL")return S(J);yf(f,YA.ip(),(Z,H)=>{if(Z)return S(Z);y(null,H)})})})})},yf=function(f,A,$){const y=new zA.Server;y.on("error",(S)=>{if(Sf("listen %s:%s error: %s",A,f,S),y.close(),S.code==="ENOTFOUND")return Sf("ignore dns ENOTFOUND error, get free %s:%s",A,f),$(null,f);return $(S)}),y.listen(f,A,()=>{return f=y.address().port,y.close(),Sf("get free %s:%s",A,f),$(null,f)})},zA=O("net"),YA=mf(),Sf=Xf()("detect-port");V$.exports=(f,A)=>{let $="";if(typeof f==="object"&&f)$=f.hostname,A=f.callback,f=f.port;else if(typeof f==="function")A=f,f=null;f=parseInt(f)||0;let y=f+10;if(y>65535)y=65535;if(Sf("detect free port between [%s, %s)",f,y),typeof A==="function")return qf(f,y,$,A);return new Promise((S)=>{qf(f,y,$,(B,W)=>{S(W)})})}});var Q$=C((E9,J$)=>{async function TA(f,A={}){const{retryInterval:$=1000,retries:y=Infinity}=A;let S=1;async function B(){if(PA("retries",y,"count",S),S>y){const j=new Error("retries exceeded");throw j.retries=y,j.count=S,j}if(S++,await wA(f)===f)return await xA($),B();return!0}return await B()}var PA=Xf()("wait-port"),wA=Lf(),xA=(f)=>new Promise((A)=>setTimeout(A,f));J$.exports=TA});var Z$=C((_9,Ef)=>{Ef.exports=Lf();Ef.exports.waitPort=Q$()});function UA(f){return{...f,isApi:!0}}function qA(f,A){return{getCases:()=>A,isApiTest:!0}}var w={rules:{stringify:[{match:(f)=>typeof f=="bigint",handler:(f)=>`t!bigint:${f.toString()}`},{match:(f)=>f instanceof Date,handler:(f)=>`t!Date:${f.toISOString()}`},{match:(f)=>f instanceof URL,handler:(f)=>`t!URL:${f.toString()}`},{match:(f)=>f instanceof RegExp,handler:(f)=>`t!RegExp:${f.toString()}`},{match:(f)=>f instanceof Uint8Array,handler:(f)=>`t!Uint8Array:${(new TextDecoder()).decode(f)}`},{match:(f)=>f instanceof ArrayBuffer,handler:(f)=>`t!ArrayBuffer:${(new TextDecoder()).decode(f)}`}],parse:[{match:(f)=>f.startsWith("t!bigint:"),handler:(f)=>BigInt(f.slice(9))},{match:(f)=>f.startsWith("t!Date:"),handler:(f)=>new Date(f.slice(7))},{match:(f)=>f.startsWith("t!URL:"),handler:(f)=>new URL(f.slice(6))},{match:(f)=>f.startsWith("t!RegExp:"),handler:(f)=>new RegExp(f.slice(9))},{match:(f)=>f.startsWith("t!Uint8Array:"),handler:(f)=>(new TextEncoder()).encode(f.slice(13))},{match:(f)=>f.startsWith("t!ArrayBuffer:"),handler:(f)=>(new TextEncoder()).encode(f.slice(14)).buffer}]},stringify(f){return JSON.stringify(w.encode(f))},parse(f){return w.decode(JSON.parse(f))},encode(f){function A($){if(!$||typeof $!="object"&&typeof $!="bigint")return $;if($){if(Array.isArray($)){const B=[];for(let W=0;W<$.length;W++)B[W]=A($[W]);return B}}else return $;for(let B of w.rules.stringify)if(B.match($))return B.handler($);const y={};for(var S in $)y[S]=A($[S]);return y}return A(f)},decode(f){function A($){if(Array.isArray($))return $.map(A);if(typeof $=="object"&&$!==null){const y={};for(let S in $)$.hasOwnProperty(S)&&(y[S]=A($[S]));return y}else if(typeof $=="string"){for(let y of w.rules.parse)if(y.match($)===!0)return y.handler($);return $}return $}return A(f)}};var Kf=w;import Bf from"node:crypto";function a(f){if(!o(f))throw new Error("Parameter was not an error")}function o(f){return Y$(f)==="[object Error]"||f instanceof Error}var Y$=function(f){return Object.prototype.toString.call(f)};function Of(f){let A,$="";if(f.length===0)A={};else if(o(f[0]))A={cause:f[0]},$=f.slice(1).join(" ")||"";else if(f[0]&&typeof f[0]==="object")A=Object.assign({},f[0]),$=f.slice(1).join(" ")||"";else if(typeof f[0]==="string")A={},$=$=f.join(" ")||"";else throw new Error("Invalid arguments passed to Layerr");return{options:A,shortMessage:$}}class G extends Error{constructor(f,A){const $=[...arguments],{options:y,shortMessage:S}=Of($);let B=S;if(y.cause)B=`${B}: ${y.cause.message}`;super(B);if(this.message=B,y.name&&typeof y.name==="string")this.name=y.name;else this.name="Layerr";if(y.cause)Object.defineProperty(this,"_cause",{value:y.cause});if(Object.defineProperty(this,"_info",{value:{}}),y.info&&typeof y.info==="object")Object.assign(this._info,y.info);if(Error.captureStackTrace){const W=y.constructorOpt||this.constructor;Error.captureStackTrace(this,W)}}static cause(f){if(a(f),!f._cause)return null;return o(f._cause)?f._cause:null}static fullStack(f){a(f);const A=G.cause(f);if(A)return`${f.stack}\ncaused by: ${G.fullStack(A)}`;return f.stack}static info(f){a(f);const A={},$=G.cause(f);if($)Object.assign(A,G.info($));if(f._info)Object.assign(A,f._info);return A}cause(){return G.cause(this)}toString(){let f=this.name||this.constructor.name||this.constructor.prototype.name;if(this.message)f=`${f}: ${this.message}`;return f}}var w$=function(f){const A=f||x$(),$=A&&(A.crypto||A.msCrypto)||(typeof Bf!=="undefined"?Bf:null);if(typeof $?.getRandomValues==="function")return()=>{const y=new Uint8Array(1);return $.getRandomValues(y),y[0]/255};else if(typeof $?.randomBytes==="function")return()=>$.randomBytes(1).readUInt8()/255;else if(Bf?.randomBytes)return()=>Bf.randomBytes(1).readUInt8()/255;throw new G({info:{code:"PRNG_DETECT",...u}},"Failed to find a reliable PRNG")},x$=function(){if(U$())return self;if(typeof window!=="undefined")return window;if(typeof global!=="undefined")return global;if(typeof globalThis!=="undefined")return globalThis;return null},T$=function(f,A){let $="";for(;f>0;f--)$=X$(A)+$;return $},Rf=function(f,A){if(isNaN(f))throw new G({info:{code:"ENC_TIME_NAN",...u}},`Time must be a number: ${f}`);else if(f>Ff)throw new G({info:{code:"ENC_TIME_SIZE_EXCEED",...u}},`Cannot encode a time larger than ${Ff}: ${f}`);else if(f<0)throw new G({info:{code:"ENC_TIME_NEG",...u}},`Time must be positive: ${f}`);else if(Number.isInteger(f)===!1)throw new G({info:{code:"ENC_TIME_TYPE",...u}},`Time must be an integer: ${f}`);let $,y="";for(let S=A;S>0;S--)$=f%c,y=e.charAt($)+y,f=(f-$)/c;return y};var G$=function(f){let A=void 0,$=f.length,y,S,B=f;const W=c-1;while(!A&&$-->=0){if(y=B[$],S=e.indexOf(y),S===-1)throw new G({info:{code:"B32_INC_ENC",...u}},"Incorrectly encoded string");if(S===W){B=Cf(B,$,e[0]);continue}A=Cf(B,$,e[S+1])}if(typeof A==="string")return A;throw new G({info:{code:"B32_INC_INVALID",...u}},"Failed incrementing string")},U$=function(){return typeof WorkerGlobalScope!=="undefined"&&self instanceof WorkerGlobalScope};var kf=function(f){const A=f||w$();let $=0,y;return function S(B){const W=isNaN(B)?Date.now():B;if(W<=$){const J=y=G$(y);return Rf($,Mf)+J}$=W;const j=y=T$(P$,A);return Rf(W,Mf)+j}},X$=function(f){let A=Math.floor(f()*c);if(A===c)A=c-1;return e.charAt(A)},Cf=function(f,A,$){if(A>f.length-1)return f;return f.substr(0,A)+$+f.substr(A+1)};var e="0123456789ABCDEFGHJKMNPQRSTVWXYZ",c=32,Ff=281474976710655,Mf=10,P$=16,u=Object.freeze({source:"ulid"});var q$=kf(),v=()=>q$();function ff(f,A){if(f===void 0)return A;return`${f}`}function Df(f,A){if(f===void 0)return A;return Number.parseInt(f,10)}function nf(f,A){if(f==="true")return!0;if(f==="false")return!1;if(f==="")return!1;if(f===void 0)return A;return Boolean(f)}var $f=(f)=>{if(f.toJSON)return f.toJSON();const A={};return f.forEach(($,y)=>{A[y]=$}),f};function mA(f){return()=>({...f,isMiddleware:!0})}var U={execute:{executeIds:new Set},maxRunningTimeout:{enable:!1,expectedEndedAt:0}};var zf={onSubmit:(f,A)=>{},onInsert:(f)=>{return console[f.loggerLevel](f.description,...f.params),!0}};var Wf=(()=>{const f=new Map,A=(W,j)=>{if(!f.has(W))f.set(W,{__LOG_DETAIL__:[]});const J=f.get(W);for(let Z in j)J[Z]=j[Z]},$=async(W)=>{if(!f.has(W))return;if(W==="global")return;const j={executeId:W},J=f.get(W);for(let Z in J){if(Z==="__LOG_DETAIL__")continue;j[Z]=J[Z]}f.delete(W),zf.onSubmit(j,J.__LOG_DETAIL__)},y=async()=>{for(let W of f.keys())await $(W)},S=(W,j,J,Z)=>{let H=[];if(W==="global")H=Array.from(new Set([...Array.from(U.execute.executeIds),...Array.from(U.execute.executeIds)]));else H=[W];for(let Q of H){if(!f.has(Q))f.set(Q,{__LOG_DETAIL__:[]});const V={executeId:Q,loggerLevel:j,description:J,params:Z};if(!zf.onInsert(V))return;f.get(Q).__LOG_DETAIL__.push(V)}};return{loggerPushTags:A,loggerSubmit:$,loggerSubmitAll:y,useLogger:(W)=>{return{debug(j,...J){S(W,"debug",j,J)},log(j,...J){S(W,"log",j,J)},info(j,...J){S(W,"log",j,J)},warn(j,...J){S(W,"warn",j,J)},error(j,...J){S(W,"error",j,J)}}}}})(),g=Wf.useLogger,X=Wf.loggerPushTags,p=Wf.loggerSubmit,fy=Wf.loggerSubmitAll;var I={NETWORK_ERROR:(f)=>"Network Error",INTERNAL_SERVER_ERROR:(f)=>"Internal Server Error",NOT_FOUND:(f)=>"Not Found",NOT_ALLOW_METHOD:(f)=>"Not Allow Method",TYPE_SAFE_ERROR:(f)=>`Parameter Error: The current value is '${f.value}', which does not meet '${f.expected}' requirements`,BUSINESS_FAIL:(f)=>`${f}`};function h(f,A){const $=I[f]?.(A)??"",y={name:"MilkioReject",code:f,message:$,data:A,stack:""};return Error.captureStackTrace(y),y.stack=y.stack.replace(/\n.*\n/,"\n"),y}var gf={generatedAt:1717736964033,validate:{"$/default":()=>import("./default-4ca75201a9afadfd.js"),"hello-world/say":()=>import("./say-42fa730a93c93914.js")}};var M={apiValidator:gf,apiMethodsSchema:{"$/default":()=>({module:import("./default-feac50fe954e8039.js")}),"hello-world/say":()=>({module:import("./say-45d6a46483b50aef.js")})},apiMethodsTypeSchema:{"$/default":void 0,"hello-world/say":void 0},apiTestsSchema:{"hello-world/say":()=>({module:import("./say-45d6a46483b50aef.js")})}};function If(f){if(f.success)return f.data;const A=f.errors[0];if(A.value===void 0)A.value;if(A.value===null)A.value;throw h("TYPE_SAFE_ERROR",{path:A.path,expected:A.expected,value:A.value})}var hf=new Map,Af=new Map,x=(()=>{return{define:(y,S)=>{hf.set(y,S)},handle:async(y,S)=>{const B=Af.get(y);if(!B)return;for(let W of B)await W.middleware(...S)},_sort:()=>{for(let[y,S]of Af){const B=hf.get(y);if(B)S.sort(B)}}}})();function i(f,A){const $=g(A);if(F.debug===!0)if($.error(`Error Data: ${JSON.stringify(f)}`),f.stack)$.error("Error Stack: ",f.stack);else $.error("Error Stack: ",f);if(f.name!=="MilkioReject"){if(F.debug===!0)$.error("FailCode: INTERNAL_SERVER_ERROR");return{executeId:A,success:!1,fail:{code:"INTERNAL_SERVER_ERROR",message:I.INTERNAL_SERVER_ERROR(),data:void 0}}}if(F.debug===!0)$.error(`FailCode: ${f.code}`);return{executeId:A,success:!1,fail:{code:f.code,message:f.message,data:f.data}}}var Nf=async(f,A)=>{return!1};function Oy(f,A={}){return async(y)=>{const S=new URL(y.request.url,`http://${y.request.headers.get("host")??"localhost"}`),B=A?.executeIdGenerator?await A.executeIdGenerator(y.request):v();U.execute.executeIds.add(B);const W=g(B),j=A.getRealIp?A.getRealIp(y.request):y.request.headers.get("X-Forwarded-For")?.split(",")[0]??"0.0.0.0",J=y.request.headers;X(B,{from:"http-server",fullUrl:S.pathname,ip:j,method:y.request.method,requestHeaders:$f(y.request.headers),timein:(new Date()).getTime()});const Z={body:"",status:200,headers:{"Content-Type":"application/json","Access-Control-Allow-Methods":F.corsAllowMethods??"*","Access-Control-Allow-Headers":F.corsAllowHeaders??"*","Access-Control-Allow-Origin":F.corsAllowOrigin??"*"}};try{if(y.request.method==="OPTIONS")return await p(B),U.execute.executeIds.delete(B),new Response("",{headers:{"Access-Control-Allow-Methods":F.corsAllowMethods??"*","Access-Control-Allow-Headers":F.corsAllowHeaders??"*","Access-Control-Allow-Origin":F.corsAllowOrigin??"*"}});let H=S.pathname.substring(1).split("/");if(F.ignorePathLevel!==0)H=H.slice(F.ignorePathLevel);let Q=H.join("/");const V={path:Q,ip:j,executeId:B,fullurl:S,request:y.request,response:Z};if(!(Q in M.apiMethodsSchema)||Q.startsWith("$/")){const P=await Nf(Q,S);if(!P){const q=await y.request.text();if(X(B,{body:q||"no body"}),!V.response.body){if(!V.response.headers["Content-Type"])V.response.headers["Content-Type"]="application/json";if(!V.response.headers["Cache-Control"])V.response.headers["Cache-Control"]="no-cache";V.response.body=`{"executeId":"${B}","success":false,"fail":{"code":"NOT_FOUND","message":"${I.NOT_FOUND()}"}}`}return await x.handle("httpNotFound",[V]),X(B,{status:V.response.status,responseHeaders:V.response.headers,timeout:(new Date()).getTime()}),await p(B),U.execute.executeIds.delete(B),new Response(V.response.body,V.response)}Q=P}X(B,{path:Q}),await x.handle("afterHttpRequest",[J,V]);const D=J.get("Accept")==="text/event-stream"?"stream":"execute",t=await y.request.text();X(B,{body:t||"no body"});let Y;try{if(t)Y=JSON.parse(t);else Y=void 0}catch(P){g(B).log("TIP: body is not json, the content is not empty, but the content is not in a valid JSON format. The original content value can be retrieved via request.request.text()"),Y=void 0}X(B,{params:Y});const K=await f._call(D,Q,Y,J,{executeId:B,logger:W,detail:V});let k;try{k=await M.apiValidator.validate[Q]()}catch(P){throw h("BUSINESS_FAIL","This is the new API, which takes effect after restarting the server or saving any changes. It will be fixed in the future.")}if(D==="execute"){const P=await k.validateResults(w.encode(K.$result));if(!V.response.body)V.response.body=P;const q={value:V.response.body};if(await x.handle("beforeHttpResponse",[q,V]),!V.response.headers["Content-Type"])V.response.headers["Content-Type"]="application/json";if(!V.response.headers["Cache-Control"])V.response.headers["Cache-Control"]="no-cache";if(!V.response.body)V.response.body=q.value}if(D==="stream"){let P,q;if(K.$type==="result"&&K.$result.success===!1)P=new ReadableStream({async pull(_){q=_,_.enqueue(`data:@${JSON.stringify(w.encode(K.$result))}\n\n`),_.close()},cancel(){q.close()}});else{const _=K.$generator;if(global?.Bun)P=new ReadableStream({type:"direct",async pull(L){q=L;try{L.write(`data:@${JSON.stringify(w.encode(K.$result))}\n\n`);for await(let T of _)if(!y.request.signal.aborted){const n=JSON.stringify(w.encode(T));L.write(`data:${n}\n\n`)}else _.return(void 0),L.close()}catch(T){const n=i(T,B);L.write(`data:@${JSON.stringify(w.encode(n))}\n\n`)}await new Promise((T)=>setTimeout(T,0)),L.close()},cancel(){q.close()}});else P=new ReadableStream({async pull(L){q=L;try{L.enqueue(`data:@${JSON.stringify(w.encode(K.$result))}\n\n`);for await(let T of _)if(!y.request.signal.aborted){const n=JSON.stringify(w.encode(T));L.enqueue(`data:${n}\n\n`)}else _.return(void 0),L.close()}catch(T){const n=i(T,B);L.enqueue(`data:@${JSON.stringify(w.encode(n))}\n\n`)}await new Promise((T)=>setTimeout(T,0)),L.close()},cancel(){q.close()}})}V.response.headers["Content-Type"]="text/event-stream",V.response.headers["Cache-Control"]="no-cache",V.response.body=P}}catch(H){const Q=i(H,B);if(!Z.headers["Content-Type"])Z.headers["Content-Type"]="application/json";if(!Z.headers["Cache-Control"])Z.headers["Cache-Control"]="no-cache";if(!Z.body)Z.body=w.stringify(Q)}return X(B,{status:Z.status,responseHeaders:Z.headers,body:Z.body?.toString()??"",timeout:(new Date()).getTime()}),await p(B),U.execute.executeIds.delete(B),new Response(Z.body,Z)}}function My(f,A={}){return async(y)=>{const S={path:"default",commands:[],options:{}};for(let W of y.slice(3))if(W.startsWith("--")&&W.includes("=")){const j=W.split("=");S.options[j[0].slice(2)]=j.slice(1,j.length).join("=")}else if(W.startsWith("--"))S.options[W.slice(2)]=!0;else if(W.startsWith("-")&&W.includes("=")){const j=W.split("=");S.options[j[0].slice(1)]=j.slice(1,j.length).join("=")}else if(W.startsWith("-"))S.options[W.slice(1)]=!0;else S.commands.push(W);if(y.length===2)S.path="$/default";else S.path=`\$/${y[2]??"default"}`;const B=await f.execute(S.path,{params:S});if(!B.success){if(B.fail.code==="NOT_FOUND"){if(A.notFoundHandler)await A.notFoundHandler({...S,name:y.length===2?"default":y[2]??"default"});return}if(B.fail.code!=="INTERNAL_SERVER_ERROR"){console.log(B.fail.message);return}}}}async function Hf(f,A,$,y={},S){const B=S.executeId;if($=Kf.decode($),!(A in M.apiMethodsSchema))return{$type:"result",$result:{executeId:B,success:!1,fail:{code:"NOT_FOUND",message:I.NOT_FOUND(),data:void 0}}};let W;if(!(y instanceof Headers))W=new Headers({...y});else W=y;if(S?.onAfterHeaders)await S.onAfterHeaders(W);const j={executeId:B,path:A,headers:W,logger:S.logger,detail:S?.detail??{}};let J;try{await x.handle("beforeExecute",[j]);let Z;try{Z=await M.apiValidator.validate[A]()}catch(D){throw h("BUSINESS_FAIL","This is the new API, which takes effect after restarting the server or saving any changes. It will be fixed in the future.")}$=If(await Z.validateParams($));let H;if(Yf.has(A))H=Yf.get(A);else H=M.apiMethodsSchema[A](),Yf.set(A,H);const V=(await H.module).api.action;if(J={value:await V($,j)},await x.handle("afterExecute",[j,J]),f==="execute"&&!J.value?.[Symbol.asyncIterator])return{$type:"result",$result:{executeId:B,success:!0,data:J.value}};if(f==="stream"&&J.value?.[Symbol.asyncIterator])return{$type:"stream",$result:{executeId:B,success:!0,data:"$"},$generator:J.value};throw console.log(f),h("BUSINESS_FAIL",`It looks like you used the wrong syntax, for this API you should use "client.${f}(...)"`)}catch(Z){return{$type:"result",$result:i(Z,B)}}}async function Pf(f,A){if(!A.headers)A.headers={};const $=A?.executeId??v(),y=g($);U.execute.executeIds.add($),X($,{from:"execute",executeId:$,params:A.params,path:f});const S=await Hf("execute",f,A.params,A.headers,{...A,executeId:$,logger:y,onAfterHeaders:(B)=>{X($,{headers:$f(B)})}});return X($,{result:S.$result}),await p($),U.execute.executeIds.delete($),S.$result}async function uf(f,A){const $=await Pf(f,A);let y;try{y=await M.apiValidator.validate[f]()}catch(B){throw h("BUSINESS_FAIL","This is the new API, which takes effect after restarting the server or saving any changes. It will be fixed in the future.")}return await y.validateResults(Kf.encode($))}async function vf(f,A){if(!A.headers)A.headers={};const $=A?.executeId??v(),y=g($);U.execute.executeIds.add($),X($,{from:"execute",executeId:$,params:A.params,path:f});const S=await Hf("stream",f,A.params,A.headers,{...A,executeId:$,logger:y,onAfterHeaders:(B)=>{X($,{headers:$f(B)})}});return X($,{result:S.$result}),await p($),U.execute.executeIds.delete($),{getResult:()=>S.$result,stream:S.$generator}}var Yf=new Map;async function ty(f={}){if(f.enableMaxRunningTimeoutLimit&&f.enableMaxRunningTimeoutLimit>=1)setTimeout(()=>{throw new Error('Milkio reached the limit of "maxRunningTimeout" in the options and automatically exited.')},f.enableMaxRunningTimeoutLimit*60*1000),U.maxRunningTimeout.enable=!0;const A={randParams:L$,execute:Pf,executeToJson:uf,executeStream:vf,_call:Hf};if(f.bootstraps)await Promise.all(f.bootstraps());if(f.middlewares){x.define("bootstrap",(y,S)=>y.index-S.index),x.define("beforeExecute",(y,S)=>y.index-S.index),x.define("afterExecute",(y,S)=>S.index-y.index),x.define("afterHttpRequest",(y,S)=>y.index-S.index),x.define("beforeHttpResponse",(y,S)=>S.index-y.index),x.define("httpNotFound",(y,S)=>y.index-S.index);const $=f.middlewares();for(let y=0;y<$.length;y++){const S=$[y];for(let B in S){let W=Af.get(B);if(W===void 0)W=[],Af.set(B,W);const j=v();W.push({id:j,index:y,middleware:S[B]})}}x._sort(),await x.handle("bootstrap",[A])}return A}async function L$(f){return await(await M.apiValidator.validate[f]()).randParams()}var K$=GA(Z$(),1);import{env as l} from"node:process";var F={debug:nf(l.MILKIO_DEBUG,!0),nodeEnv:ff(l.NODE_ENV,"production"),ignorePathLevel:Df(l.MILKIO_IGNORE_PATH_LEVEL,0),corsAllowMethods:ff(l.MILKIO_CORS_ALLOW_METHODS,"*"),corsAllowHeaders:ff(l.MILKIO_CORS_ALLOW_HEADERS,"*"),corsAllowOrigin:ff(l.MILKIO_CORS_ALLOW_ORIGIN,"*"),port:K$.default(Math.floor(Math.random()*10001)+1e4),devWebviewUrl:"localhost:8999",openDevTool:!0,allowDomains:[]};
export{UA as b,qA as c,mA as d,F as e,If as f,Oy as g,My as h,ty as i};

//# debugId=DC41799F9BD2E26764756e2164756e21
//# sourceMappingURL=data:application/json;base64,
